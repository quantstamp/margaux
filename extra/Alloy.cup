import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.TreeSet;
import java.util.Map;
import java.util.LinkedHashMap;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.Reader;
import java.io.IOException;
import java.io.StringReader;
import java_cup_11a.runtime.*;
import edu.mit.csail.sdg.alloy4.Err;
import edu.mit.csail.sdg.alloy4.ErrorFatal;
import edu.mit.csail.sdg.alloy4.ErrorSyntax;
import edu.mit.csail.sdg.alloy4.Pos;
import edu.mit.csail.sdg.alloy4.Pair;
import edu.mit.csail.sdg.alloy4.Util;
import edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary;
import edu.mit.csail.sdg.alloy4compiler.ast.ExprConstant;
import edu.mit.csail.sdg.alloy4compiler.ast.ExprUnary;
import edu.mit.csail.sdg.alloy4compiler.ast.ExprQuant;

//===========================================================================//

parser code {:

  public Module alloymodule=null;
  public String alloyfile="";

  @SuppressWarnings("unchecked")
  @Override public Symbol parse() throws java.lang.Exception {
     int act; // current action code
     Symbol lhs_sym = null; // the Symbol/stack element returned by a reduce
     short handle_size, lhs_sym_num; // information about production being reduced with
     production_tab = production_table();
     action_tab     = action_table();
     reduce_tab     = reduce_table();
     init_actions();
     user_init();
     // start
     cur_token = scan();
     stack.removeAllElements();
     stack.push(getSymbolFactory().startSymbol("START", 0, start_state()));
     tos = 0;
     for (_done_parsing = false; !_done_parsing; ) {
        act = get_action(((Symbol)stack.peek()).parse_state, cur_token.sym);
        if (act > 0) { // "shift"; thus, we shift to the encoded state by pushing it on the stack
           cur_token.parse_state = act-1;
           stack.push(cur_token);
           tos++;
           cur_token = scan();
        } else if (act<0) { // "reduce"
           lhs_sym = do_action((-act)-1, this, stack, tos);
           lhs_sym_num = production_tab[(-act)-1][0];
           handle_size = production_tab[(-act)-1][1];
           for (int i = 0; i < handle_size; i++)  {  stack.pop(); tos--; }
           act = get_reduce(((Symbol)stack.peek()).parse_state, lhs_sym_num);
           lhs_sym.parse_state = act;
           stack.push(lhs_sym);
           tos++;
        } else { // "error"
           syntax_error(cur_token);
           done_parsing();
        }
     }
     return lhs_sym;
  }

  private Pos alloypos(Symbol x) {
    if (x==null) return null;
    if (x.value instanceof Pos) return (Pos)(x.value);
    if (x.value instanceof Exp) return ((Exp)(x.value)).pos;
    return x.pos;
  }

  public void syntax_error(Symbol x) throws Err {
    Map<Integer,String> ch=new LinkedHashMap<Integer,String>();
    ch.put(CompSym.ABSTRACT        , "abstract");
    ch.put(CompSym.ALL             , "all");
    ch.put(CompSym.ALL2            , "all");
    ch.put(CompSym.ANY_ARROW_LONE  , "set");
    ch.put(CompSym.ANY_ARROW_ONE   , "set");
    ch.put(CompSym.ANY_ARROW_SOME  , "set");
    ch.put(CompSym.AS              , "as");
    ch.put(CompSym.ASSERT          , "assert");
    ch.put(CompSym.BUT             , "but");
    ch.put(CompSym.CHECK           , "check");
    ch.put(CompSym.ELSE            , "else");
    ch.put(CompSym.EXACTLY         , "exactly");
    ch.put(CompSym.EXPECT          , "expect");
    ch.put(CompSym.EXTENDS         , "extends");
    ch.put(CompSym.FACT            , "fact");
    ch.put(CompSym.FOR             , "for");
    ch.put(CompSym.FUN             , "fun");
    ch.put(CompSym.ID              , "NAME");
    ch.put(CompSym.IDEN            , "iden");
    ch.put(CompSym.IN              , "in");
    ch.put(CompSym.INT             , "int");
    ch.put(CompSym.LET             , "let");
    ch.put(CompSym.LONE            , "lone");
    ch.put(CompSym.LONE2           , "lone");
    ch.put(CompSym.LONE_ARROW_ANY  , "lone");
    ch.put(CompSym.LONE_ARROW_LONE , "lone");
    ch.put(CompSym.LONE_ARROW_ONE  , "lone");
    ch.put(CompSym.LONE_ARROW_SOME , "lone");
    ch.put(CompSym.MODULE          , "module");
    ch.put(CompSym.NO              , "no");
    ch.put(CompSym.NO2             , "no");
    ch.put(CompSym.NONE            , "none");
    ch.put(CompSym.NUMBER          , "NUMBER");
    ch.put(CompSym.ONE             , "one");
    ch.put(CompSym.ONE2            , "one");
    ch.put(CompSym.ONE_ARROW_ANY   , "one");
    ch.put(CompSym.ONE_ARROW_LONE  , "one");
    ch.put(CompSym.ONE_ARROW_ONE   , "one");
    ch.put(CompSym.ONE_ARROW_SOME  , "one");
    ch.put(CompSym.OPEN            , "open");
    ch.put(CompSym.PRED            , "pred");
    ch.put(CompSym.RUN             , "run");
    ch.put(CompSym.SET             , "set");
    ch.put(CompSym.SIG             , "sig");
    ch.put(CompSym.SIGINT          , "Int");
    ch.put(CompSym.SOME            , "some");
    ch.put(CompSym.SOME2           , "some");
    ch.put(CompSym.SOME_ARROW_ANY  , "some");
    ch.put(CompSym.SOME_ARROW_LONE , "some");
    ch.put(CompSym.SOME_ARROW_ONE  , "some");
    ch.put(CompSym.SOME_ARROW_SOME , "some");
    ch.put(CompSym.SUM             , "sum");
    ch.put(CompSym.SUM2            , "sum");
    ch.put(CompSym.THIS            , "this");
    ch.put(CompSym.UNIV            , "univ");
    ch.put(CompSym.AMPERSAND       , "&");
    ch.put(CompSym.AND             , "&&");
    ch.put(CompSym.ARROW           , "->");
    ch.put(CompSym.AT              , "@");
    ch.put(CompSym.BAR             , "|");
    ch.put(CompSym.CARET           , "^");
    ch.put(CompSym.COLON           , ":");
    ch.put(CompSym.COMMA           , ",");
    ch.put(CompSym.DOMAIN          , "<:");
    ch.put(CompSym.DOT             , ".");
    ch.put(CompSym.EQUALS          , "=");
    ch.put(CompSym.GT              , ">");
    ch.put(CompSym.GTE             , ">=");
    ch.put(CompSym.HASH            , "#");
    ch.put(CompSym.IFF             , "<=>");
    ch.put(CompSym.IMPLIES         , "->");
    ch.put(CompSym.LBRACE          , "{");
    ch.put(CompSym.LBRACKET        , "[");
    ch.put(CompSym.LPAREN          , "(");
    ch.put(CompSym.LT              , "<");
    ch.put(CompSym.LTE             , "=<");
    ch.put(CompSym.MINUS           , "-");
    ch.put(CompSym.NOT             , "!");
    ch.put(CompSym.NOTEQUALS       , "!");
    ch.put(CompSym.NOTGT           , "!");
    ch.put(CompSym.NOTGTE          , "!");
    ch.put(CompSym.NOTIN           , "!");
    ch.put(CompSym.NOTLT           , "!");
    ch.put(CompSym.NOTLTE          , "!");
    ch.put(CompSym.OR              , "||");
    ch.put(CompSym.PLUS            , "+");
    ch.put(CompSym.PLUSPLUS        , "++");
    ch.put(CompSym.RANGE           , ":>");
    ch.put(CompSym.RBRACE          , "}");
    ch.put(CompSym.RBRACKET        , "]");
    ch.put(CompSym.RPAREN          , ")");
    ch.put(CompSym.SLASH           , "/");
    ch.put(CompSym.STAR            , "*");
    ch.put(CompSym.TILDE           , "~");
    TreeSet<String> list=new TreeSet<String>();
    Pos p=alloypos(x);
    if (!stack.empty()) for(Map.Entry<Integer,String> e:ch.entrySet()) {
        int key=e.getKey(), act=get_action(((Symbol)stack.peek()).parse_state, key);
        if (act==0) continue;
        try {
            if (act>0 || alloy_confirm(key)) list.add(e.getValue());
        } catch(Throwable ex) {
            // If the parser is really really confused, alloy_confirm() could fail with array out-of-bound exception, etc.
        }
    }
    String result="There are "+list.size()+" possible tokens that can appear here:\n";
    for(String item:list) result=result+item+" ";
    throw new ErrorSyntax(p, (list.size()!=0)?result:"");
  }

  private boolean alloy_confirm(int key) {
    int state = ((Symbol)stack.peek()).parse_state;
    Stack<Object> newstack=new Stack<Object>(); for(Object x:stack) newstack.push(x);
    while(true) {
      int act = get_action(state, key);
      if (act>0) return true;
      if (act==0) return false;
      int lhs_sym_num = production_tab[(-act)-1][0];
      int handle_size = production_tab[(-act)-1][1];
      for (int i = 0; i < handle_size; i++) { if (newstack.empty()) return false; newstack.pop(); }
      if (newstack.empty()) return false;
      if (newstack.peek() instanceof Symbol) state=((Symbol)newstack.peek()).parse_state;
      state=get_reduce(state, lhs_sym_num);
      newstack.push(null);
    }
  }

  static Module alloy_parseStream(boolean allowDollar, Map<String,String> fc, Module world, int lineOffset, String filename, String prefix)
  throws Err, FileNotFoundException, IOException {
    Reader isr=null;
    try {
        if (world==null) world=new Module(null, Pos.UNKNOWN, "");
        String content=fc.get(filename);
        if (content==null) { content=Util.readAll(filename); fc.put(filename,content); }
        isr=new StringReader(content);
        Module u = world.lookupOrCreateModule(Pos.UNKNOWN, prefix);
        CompFilter s=new CompFilter(allowDollar, filename, lineOffset, new BufferedReader(isr));
        CompParser p=new CompParser(s);
        p.alloymodule=u;
        p.alloyfile=filename;
        try {p.parse();} catch(Throwable ex) {if (ex instanceof Err) throw (Err)ex; throw new ErrorFatal("Parser Exception: "+ex);}
        return u;
    } finally {
        Util.close(isr);
    }
  }

:};

action code {:
    /**
     * This function is needed to handle a difficult parsing ambiguity.
     *
     * <p>
     * "some EXPR", "one EXPR", and "lone EXPR"
     * can be either formulas (saying the EXPR has at least 1, exactly 1, or at most 1 tuple),
     * or multiplicity constraints (saying something else has this multiplicity).
     *
     * <p>
     * So we let the parser generate the former by default.
     * And whenever we construct a EDecl(x,y) object,
     * or an ExprBinary.Op.IN(x,y) object, or a function return type,
     * we call this method on y to convert it into a multiplicity constraint.
     *
     * <p>
     * This is safe, because in all 3 cases, a formula would be illegal.
     * So the first form is always wrong.
     *
     * <p>
     * And this is sufficient, because those are the only 3 places
     * where a mulitplicity constraint is allowed to appear.
     *
     * @return a newly formed multiplciity constraint (if this.op==SOME or LONE or ONE),
     * otherwise it just returns the original node.
     */
    private Exp mult(Exp x) throws Err {
        if (x instanceof ExpUnary) {
           ExpUnary y=(ExpUnary)x;
           if (y.op==ExprUnary.Op.SOME) return new ExpUnary(y.pos, ExprUnary.Op.SOMEOF, y.sub);
           if (y.op==ExprUnary.Op.LONE) return new ExpUnary(y.pos, ExprUnary.Op.LONEOF, y.sub);
           if (y.op==ExprUnary.Op.ONE)  return new ExpUnary(y.pos, ExprUnary.Op.ONEOF, y.sub);
        }
        return x;
    }
    private Exp alloyTrue(Pos pos) throws Err { return new ExpConstant(pos, ExprConstant.Op.TRUE, 0); }

    private Exp t(ExpDot j, Pos close) throws Err {
      if (j.right instanceof ExpName) {
         String n=((ExpName)(j.right)).name;
         if (n.equals("int"))  return new ExpUnary(j.pos, ExprUnary.Op.CAST2INT, j.left);
         if (n.equals("disj")) return new ExpBuiltin(j.pos, close, Util.asList(j.left));
      }
      else if (j.right instanceof ExpBuiltin) {
         ExpBuiltin n=((ExpBuiltin)(j.right));
         List<Exp> args=new ArrayList<Exp>(n.args);
         args.add(j.left);
         return new ExpBuiltin(j.pos, n.closingBracket, args);
      }
      return j;
    }
:};

//===========================================================================//

terminal Pos ARROW;            //  ->
terminal Pos ANY_ARROW_SOME;   //  ->some    // The filter allows whitespace/comment in these 15 "*->*" tokens
terminal Pos ANY_ARROW_ONE;    //  ->one
terminal Pos ANY_ARROW_LONE;   //  ->lone
terminal Pos SOME_ARROW_ANY;   //  some->
terminal Pos SOME_ARROW_SOME;  //  some->some
terminal Pos SOME_ARROW_ONE;   //  some->one
terminal Pos SOME_ARROW_LONE;  //  some->lone
terminal Pos ONE_ARROW_ANY;    //  one->
terminal Pos ONE_ARROW_SOME;   //  one->some
terminal Pos ONE_ARROW_ONE;    //  one->one
terminal Pos ONE_ARROW_LONE;   //  one->lone
terminal Pos LONE_ARROW_ANY;   //  lone->any
terminal Pos LONE_ARROW_SOME;  //  lone->some
terminal Pos LONE_ARROW_ONE;   //  lone->one
terminal Pos LONE_ARROW_LONE;  //  lone->lone

terminal Pos ABSTRACT;         //  abstract
terminal Pos ALL;              //  all      // The filter enables us to disambiguate
terminal Pos ALL2;             //  all      // The filter enables us to disambiguate
terminal Pos AMPERSAND;        //  &
terminal Pos AND;              //  && and
terminal Pos AS;               //  as
terminal Pos ASSERT;           //  assert
terminal Pos AT;               //  @
terminal Pos BAR;              //  |
terminal Pos BUT;              //  but
terminal Pos CARET;            //  ^
terminal Pos CHECK;            //  check
terminal Pos COLON;            //  :
terminal Pos COMMA;            //  ,
terminal Pos DISJ;             //  disj disjoint
terminal Pos DOMAIN;           //  <:
terminal Pos DOT;              //  .
terminal Pos ELSE;             //  else
terminal Pos EQUALS;           //  =  ==
terminal Pos EXACTLY;          //  exactly
terminal Pos EXH;              //  exh exhaustive
terminal Pos EXPECT;           //  expect
terminal Pos EXTENDS;          //  extends
terminal Pos FACT;             //  fact
terminal Pos FOR;              //  for
terminal Pos FUN;              //  fun
terminal Pos GT;               //  >
terminal Pos GTE;              //  >=
terminal Pos HASH;             //  #
terminal Pos IDEN;             //  iden
terminal Pos IFF;              //  <=> iff
terminal Pos IMPLIES;          //  => implies
terminal Pos IN;               //  in
terminal Pos INT;              //  int
terminal Pos LBRACE;           //  {
terminal Pos LBRACKET;         //  [
terminal Pos LET;              //  let
terminal Pos LONE2;            //  lone      // The filter enables us to disambiguate
terminal Pos LONE;             //  lone      // The filter enables us to disambiguate
terminal Pos LPAREN;           //  (
terminal Pos LT;               //  <
terminal Pos LTE;              //  =<
terminal Pos MINUS;            //  -
terminal Pos MODULE;           //  module
terminal Pos NO2;              //  no        // The filter enables us to disambiguate
terminal Pos NO;               //  no        // The filter enables us to disambiguate
terminal Pos NONE;             //  none
terminal Pos NOT;              //  !      not
terminal Pos NOTEQUALS;        //  !=     not=    // The filter allows whitespace/comment in between
terminal Pos NOTGT;            //  !>     not>    // The filter allows whitespace/comment in between
terminal Pos NOTGTE;           //  !>=    not>=   // The filter allows whitespace/comment in between
terminal Pos NOTIN;            //  !in    notin   // The filter allows whitespace/comment in between
terminal Pos NOTLT;            //  !<     not<    // The filter allows whitespace/comment in between
terminal Pos NOTLTE;           //  !=<    not=<   // The filter allows whitespace/comment in between
terminal Pos ONE2;             //  one            // The filter enables us to disambiguate
terminal Pos ONE;              //  one            // The filter enables us to disambiguate
terminal Pos OPEN;             //  open
terminal Pos OR;               //  ||     or
terminal Pos PART;             //  part   partition
terminal Pos PLUS;             //  +
terminal Pos PLUSPLUS;         //  ++
terminal Pos PRED;             //  pred
terminal Pos RANGE;            //  :>
terminal Pos RBRACE;           //  }
terminal Pos RBRACKET;         //  ]
terminal Pos RPAREN;           //  )
terminal Pos RUN;              //  run
terminal Pos SEQ;              //  seq
terminal Pos SET;              //  set
terminal Pos SIG;              //  sig
terminal Pos SIGINT;           //  Int
terminal Pos SLASH;            //  /
terminal Pos SOME2;            //  some      // The filter enables us to disambiguate
terminal Pos SOME;             //  some      // The filter enables us to disambiguate
terminal Pos STAR;             //  *
terminal Pos SUM2;             //  sum       // The filter enables us to disambiguate
terminal Pos SUM;              //  sum       // The filter enables us to disambiguate
terminal Pos THIS;             //  this
terminal Pos TILDE;            //  ~
terminal Pos UNIV;             //  univ

terminal ExpName ID;

terminal Exp NUMBER;

//===========================================================================//

nonterminal Exp                        AndExpr;
nonterminal Exp                        BaseExpr;
nonterminal Exp                        BracketExpr;
nonterminal Exp                        CompareExpr;
nonterminal String                     CmdLabel;
nonterminal List<ExpName>              CmdOpt;
nonterminal Decl                       Decla;
nonterminal List<Decl>                 Declp;
nonterminal List<Decl>                 Decls;
nonterminal Exp                        DomainExpr;
nonterminal Exp                        DotExpr;
nonterminal Exp                        EquivExpr;
nonterminal String                     Expects;
nonterminal Exp                        Expr;
nonterminal Exp                        Super;
nonterminal Exp                        SuperOpt;
nonterminal Exp                        SuperP;
nonterminal Exp                        SuperOrBar;
nonterminal List<Exp>                  Exprs;
nonterminal List<Exp>                  Exprp;
nonterminal                            Function;
nonterminal List<ExpName>              Hint;
nonterminal Exp                        ImpliesExpr;
nonterminal Exp                        ImpliesExprClose;
nonterminal Exp                        ImpliesExprOpen;
nonterminal Exp                        IntersectExpr;
nonterminal Exp                        Let;
nonterminal                            Module;
nonterminal                            Modules;
nonterminal                            Modulep;
nonterminal ExpName                    Name;
nonterminal ExpName                    NameHelper;
nonterminal List<ExpName>              Names;
nonterminal Exp                        NegExpr;
nonterminal Exp                        NumUnopExpr;
nonterminal                            Open;
nonterminal                            Opens;
nonterminal Exp                        OrExpr;
nonterminal Exp                        OverrideExpr;
nonterminal                            Paragraphs;
nonterminal                            Predicate;
nonterminal Exp                        RangeExpr;
nonterminal Exp                        RelationExpr;
nonterminal List<String>               Scope;
nonterminal                            Sig;
nonterminal Pair<Pos,List<String>>     SigIn;
nonterminal List<Pos>                  SigQual;
nonterminal List<Pos>                  SigQuals;
nonterminal ExpName                    SigRef;
nonterminal List<ExpName>              SigRefp;
nonterminal List<ExpName>              SigRefs;
nonterminal Pair<Pos,List<String>>     SigRefu;
nonterminal                            Specification;
nonterminal List<String>               Typescopes;
nonterminal List<String>               Typescope;
nonterminal Exp                        UnionDiffExpr;
nonterminal Exp                        UnopExpr;

//===========================================================================//

Specification ::= Modules Opens Paragraphs ;

Modulep ::= Module                                       ;
Modulep ::= Modulep Module                               ;
Modules ::= Modulep                                      ;
Modules ::=                                              {: parser.alloymodule.addModelName(new Pos(parser.alloyfile,1,1), ""     , new ArrayList<ExpName>()); :};
Module ::= MODULE:o Name:n                               {: parser.alloymodule.addModelName(o.merge(n.pos)               , n.name , new ArrayList<ExpName>()); :};
Module ::= MODULE:o Name:n LBRACKET SigRefs:b RBRACKET:r {: parser.alloymodule.addModelName(o.merge(r)                   , n.name , b                       ); :};

Open ::= OPEN:o Name:a                                         {: parser.alloymodule.addOpen(o.merge(a.pos), a, null, null); :};
Open ::= OPEN:o Name:a                               AS Name:c {: parser.alloymodule.addOpen(o.merge(c.pos), a, null, c);    :};
Open ::= OPEN:o Name:a LBRACKET SigRefs:b RBRACKET:c           {: parser.alloymodule.addOpen(o.merge(c),     a, b,    null); :};
Open ::= OPEN:o Name:a LBRACKET SigRefs:b RBRACKET   AS Name:c {: parser.alloymodule.addOpen(o.merge(c.pos), a, b,    c);    :};

Opens ::=            ;
Opens ::= Opens Open ;

Paragraphs ::= Paragraphs FACT:o          Super:e {: parser.alloymodule.addFact      (o , ""     , e); :};
Paragraphs ::= Paragraphs FACT:o   Name:n Super:e {: parser.alloymodule.addFact      (o , n.name , e); :};
Paragraphs ::= Paragraphs ASSERT:o        Super:e {: parser.alloymodule.addAssertion (o , ""     , e); :};
Paragraphs ::= Paragraphs ASSERT:o Name:n Super:e {: parser.alloymodule.addAssertion (o , n.name , e); :};
Paragraphs ::= Paragraphs Sig             ;
Paragraphs ::= Paragraphs FUN Function    ;
Paragraphs ::= Paragraphs PRED Predicate  ;
Paragraphs ::=                            ;

CmdLabel ::=           {: RESULT="";     :};
CmdLabel ::= DOT ID:i  {: RESULT=i.name; :};

CmdOpt ::=                               {: RESULT=new ArrayList<ExpName>(); :};
CmdOpt ::= LBRACKET SigRefp:o RBRACKET   {: RESULT=o;                        :};

Paragraphs ::= Paragraphs CHECK:o CmdLabel:x CmdOpt Super:e  Scope:s  {: // Current, CmdOpt are unused
  int bitwidth = -1 , maxseq = -1;
  int overall = s.get(0).length()>0 ? Integer.parseInt(s.get(0)) : -1;
  int expects = s.get(1).length()>0 ? Integer.parseInt(s.get(1)) : -1;
  Map<String,Integer> scope=new LinkedHashMap<String,Integer>();
  for(int i=2; i<s.size()-1; i=i+2) {
    int j;
    String a=s.get(i);
    String b=s.get(i+1);
    if (a.charAt(0)=='e') { j=Integer.parseInt(a.substring(1)); j=(0-j)-1; } else { j=Integer.parseInt(a); }
    if (scope.containsKey(b)) throw new ErrorSyntax(o,"The scope of the sig \""+b+"\" cannot be specified more than once.");
    scope.put(b,j);
  }
  if (scope.containsKey("int")) bitwidth=scope.remove("int");
  if (scope.containsKey("seq")) maxseq=scope.remove("seq");
  parser.alloymodule.addCommand(o, e, true, overall, bitwidth, maxseq, expects, scope, x);
:};

Paragraphs ::= Paragraphs CHECK:o CmdLabel:x CmdOpt Name:n  Scope:s  {: // Current, CmdOpt are unused
  int bitwidth = -1 , maxseq = -1;
  int overall = s.get(0).length()>0 ? Integer.parseInt(s.get(0)) : -1;
  int expects = s.get(1).length()>0 ? Integer.parseInt(s.get(1)) : -1;
  Map<String,Integer> scope=new LinkedHashMap<String,Integer>();
  for(int i=2; i<s.size()-1; i=i+2) {
    int j;
    String a=s.get(i);
    String b=s.get(i+1);
    if (a.charAt(0)=='e') { j=Integer.parseInt(a.substring(1)); j=(0-j)-1; } else { j=Integer.parseInt(a); }
    if (scope.containsKey(b)) throw new ErrorSyntax(o,"The scope of the sig \""+b+"\" cannot be specified more than once.");
    scope.put(b,j);
  }
  if (scope.containsKey("int")) bitwidth=scope.remove("int");
  if (scope.containsKey("seq")) maxseq=scope.remove("seq");
  parser.alloymodule.addCommand(o, n.name, true, overall, bitwidth, maxseq, expects, scope, x);
:};

Paragraphs ::= Paragraphs RUN:o CmdLabel:x CmdOpt Name:n  Scope:s  {: // Current, CmdOpt are unused
  int bitwidth = -1 , maxseq = -1;
  int overall = s.get(0).length()>0 ? Integer.parseInt(s.get(0)) : -1;
  int expects = s.get(1).length()>0 ? Integer.parseInt(s.get(1)) : -1;
  Map<String,Integer> scope=new LinkedHashMap<String,Integer>();
  for(int i=2; i<s.size()-1; i=i+2) {
    int j;
    String a=s.get(i);
    String b=s.get(i+1);
    if (a.charAt(0)=='e') { j=Integer.parseInt(a.substring(1)); j=(0-j)-1; } else { j=Integer.parseInt(a); }
    if (scope.containsKey(b)) throw new ErrorSyntax(o,"The scope of the sig \""+b+"\" cannot be specified more than once.");
    scope.put(b,j);
  }
  if (scope.containsKey("int")) bitwidth=scope.remove("int");
  if (scope.containsKey("seq")) maxseq=scope.remove("seq");
  parser.alloymodule.addCommand(o, n.name, false, overall, bitwidth, maxseq, expects, scope, x);
:};

Paragraphs ::= Paragraphs RUN:o CmdLabel:x CmdOpt Super:e  Scope:s  {: // Current, CmdOpt are unused
  int bitwidth = -1 , maxseq = -1;
  int overall = s.get(0).length()>0 ? Integer.parseInt(s.get(0)) : -1;
  int expects = s.get(1).length()>0 ? Integer.parseInt(s.get(1)) : -1;
  Map<String,Integer> scope=new LinkedHashMap<String,Integer>();
  for(int i=2; i<s.size()-1; i=i+2) {
    int j;
    String a=s.get(i);
    String b=s.get(i+1);
    if (a.charAt(0)=='e') { j=Integer.parseInt(a.substring(1)); j=(0-j)-1; } else { j=Integer.parseInt(a); }
    if (scope.containsKey(b)) throw new ErrorSyntax(o,"The scope of the sig \""+b+"\" cannot be specified more than once.");
    scope.put(b,j);
  }
  if (scope.containsKey("int")) bitwidth=scope.remove("int");
  if (scope.containsKey("seq")) maxseq=scope.remove("seq");
  parser.alloymodule.addCommand(o, e, false, overall, bitwidth, maxseq, expects, scope, x);
:};

Expects    ::=                 {: RESULT="";                      :};
Expects    ::= EXPECT NUMBER:a {: RESULT=""+((ExpConstant)a).num; :};

Scope      ::= FOR NUMBER:a                  Expects:c {: RESULT=new ArrayList<String>(); RESULT.add(""+((ExpConstant)a).num); RESULT.add(c);                   :};
Scope      ::= FOR NUMBER:a BUT Typescopes:b Expects:c {: RESULT=new ArrayList<String>(); RESULT.add(""+((ExpConstant)a).num); RESULT.add(c); RESULT.addAll(b); :};
Scope      ::= FOR              Typescopes:b Expects:c {: RESULT=new ArrayList<String>(); RESULT.add("");                      RESULT.add(c); RESULT.addAll(b); :};
Scope      ::=                               Expects:c {: RESULT=new ArrayList<String>(); RESULT.add("");                      RESULT.add(c);                   :};

Typescopes ::= Typescope:a                    {: RESULT=a;               :};
Typescopes ::= Typescopes:a COMMA Typescope:b {: RESULT=a; a.addAll(b);  :};

Typescope  ::= EXACTLY NUMBER:a Name:b        {: RESULT=new ArrayList<String>(); RESULT.add("e"+((ExpConstant)a).num); RESULT.add(b.name); :};
Typescope  ::=         NUMBER:a Name:b        {: RESULT=new ArrayList<String>(); RESULT.add( ""+((ExpConstant)a).num); RESULT.add(b.name); :};
Typescope  ::= EXACTLY NUMBER:a INT           {: RESULT=new ArrayList<String>(); RESULT.add("e"+((ExpConstant)a).num); RESULT.add("int");  :};
Typescope  ::=         NUMBER:a INT           {: RESULT=new ArrayList<String>(); RESULT.add( ""+((ExpConstant)a).num); RESULT.add("int");  :};
Typescope  ::= EXACTLY NUMBER:a SEQ           {: RESULT=new ArrayList<String>(); RESULT.add("e"+((ExpConstant)a).num); RESULT.add("seq");  :};
Typescope  ::=         NUMBER:a SEQ           {: RESULT=new ArrayList<String>(); RESULT.add( ""+((ExpConstant)a).num); RESULT.add("seq");  :};
Typescope  ::= EXACTLY NUMBER:a UNIV          {: if (1==1) throw new ErrorSyntax(a.pos, "You cannot set a scope on univ."); :};
Typescope  ::=         NUMBER:a UNIV          {: if (1==1) throw new ErrorSyntax(a.pos, "You cannot set a scope on univ."); :};
Typescope  ::= EXACTLY NUMBER:a SIGINT        {: if (1==1) throw new ErrorSyntax(a.pos, "You can no longer set a scope on Int; the number of Int atoms is always exactly equal to 2^(integer bitwidth).\n"); :};
Typescope  ::=         NUMBER:a SIGINT        {: if (1==1) throw new ErrorSyntax(a.pos, "You can no longer set a scope on Int; the number of Int atoms is always exactly equal to 2^(integer bitwidth).\n"); :};
Typescope  ::= EXACTLY NUMBER:a NONE          {: if (1==1) throw new ErrorSyntax(a.pos, "You cannot set a scope on none."); :};
Typescope  ::=         NUMBER:a NONE          {: if (1==1) throw new ErrorSyntax(a.pos, "You cannot set a scope on none."); :};

Function ::=              Name:n LPAREN   Decls:d RPAREN   COLON Expr:r Super:v {: parser.alloymodule.addFunc(n.pos, n.name, null, d                    , mult(r), v); :};
Function ::=              Name:n LBRACKET Decls:d RBRACKET COLON Expr:r Super:v {: parser.alloymodule.addFunc(n.pos, n.name, null, d                    , mult(r), v); :};
Function ::=              Name:n                           COLON Expr:r Super:v {: parser.alloymodule.addFunc(n.pos, n.name, null, new ArrayList<Decl>(), mult(r), v); :};
Function ::= SigRef:f DOT Name:n LPAREN   Decls:d RPAREN   COLON Expr:r Super:v {: parser.alloymodule.addFunc(n.pos, n.name, f   , d                    , mult(r), v); :};
Function ::= SigRef:f DOT Name:n LBRACKET Decls:d RBRACKET COLON Expr:r Super:v {: parser.alloymodule.addFunc(n.pos, n.name, f   , d                    , mult(r), v); :};
Function ::= SigRef:f DOT Name:n                           COLON Expr:r Super:v {: parser.alloymodule.addFunc(n.pos, n.name, f   , new ArrayList<Decl>(), mult(r), v); :};

Predicate ::=              Name:n LPAREN   Decls:d RPAREN   Super:v {: parser.alloymodule.addFunc(n.pos, n.name, null, d                    , null, v); :};
Predicate ::=              Name:n LBRACKET Decls:d RBRACKET Super:v {: parser.alloymodule.addFunc(n.pos, n.name, null, d                    , null, v); :};
Predicate ::=              Name:n                           Super:v {: parser.alloymodule.addFunc(n.pos, n.name, null, new ArrayList<Decl>(), null, v); :};
Predicate ::= SigRef:f DOT Name:n LPAREN   Decls:d RPAREN   Super:v {: parser.alloymodule.addFunc(n.pos, n.name, f   , d                    , null, v); :};
Predicate ::= SigRef:f DOT Name:n LBRACKET Decls:d RBRACKET Super:v {: parser.alloymodule.addFunc(n.pos, n.name, f   , d                    , null, v); :};
Predicate ::= SigRef:f DOT Name:n                           Super:v {: parser.alloymodule.addFunc(n.pos, n.name, f   , new ArrayList<Decl>(), null, v); :};

Hint ::=             {: RESULT=null;           :};
Hint ::= HASH Name:e {: RESULT=Util.asList(e); :};

Sig ::= Hint:h SigQuals:a SIG Names:b SigIn:c LBRACE Decls:d RBRACE SuperOpt:e
 {:
   for(ExpName bbb:b) {
     String bb=bbb.name;
     if (c==null)
       parser.alloymodule.addSig(h, bbb.pos, bb, a.get(0), a.get(1), a.get(2), a.get(3), null, null,null,d,e);
     else if (c.b.get(0)==null) {
       parser.alloymodule.addSig(h, bbb.pos, bb, a.get(0), a.get(1), a.get(2), a.get(3), null, null,(String)(c.b.get(1)),d,e);
       }
     else {
       parser.alloymodule.addSig(h, bbb.pos, bb, a.get(0), a.get(1), a.get(2), a.get(3), c.a,  c.b, null, d, e);
       }
   }
 :};

SigQual  ::= ABSTRACT:x               {: RESULT=new ArrayList<Pos>(4); RESULT.add(x);    RESULT.add(null); RESULT.add(null); RESULT.add(null); :};
SigQual  ::= LONE:x                   {: RESULT=new ArrayList<Pos>(4); RESULT.add(null); RESULT.add(x);    RESULT.add(null); RESULT.add(null); :};
SigQual  ::= ONE:x                    {: RESULT=new ArrayList<Pos>(4); RESULT.add(null); RESULT.add(null); RESULT.add(x);    RESULT.add(null); :};
SigQual  ::= SOME:x                   {: RESULT=new ArrayList<Pos>(4); RESULT.add(null); RESULT.add(null); RESULT.add(null); RESULT.add(x);    :};

SigQuals ::=                          {: RESULT=new ArrayList<Pos>(4); RESULT.add(null); RESULT.add(null); RESULT.add(null); RESULT.add(null); :};
SigQuals ::= SigQuals:a SigQual:b     {: RESULT=a; for(int i=0;i<4;i++) if (a.get(i)==null) a.set(i,b.get(i)); else if (b.get(i)!=null) throw new ErrorSyntax(b.get(i), "The same qualifer cannot be specified more than once for the same sig."); :};

SigIn    ::= EXTENDS:e SigRef:a       {: RESULT=new Pair<Pos,List<String>>(e.merge(a.pos), new ArrayList<String>()); RESULT.b.add(null); RESULT.b.add(a.name); :};
SigIn    ::= IN:a SigRefu:b           {: RESULT=new Pair<Pos,List<String>>(a.merge(b.a),   b.b);                                                               :};
SigIn    ::=                          {: RESULT=null;                                                                                                          :};

SigRef   ::= Name:x                   {: RESULT=x;                                   :};
SigRef   ::= UNIV:x                   {: RESULT=new ExpName(x, "univ");              :};
SigRef   ::= SIGINT:x                 {: RESULT=new ExpName(x, "Int");               :};
SigRef   ::= SEQ:a SLASH SIGINT:b     {: RESULT=new ExpName(a.merge(b), "seq/Int");  :};
SigRef   ::= NONE:x                   {: RESULT=new ExpName(x, "none");              :};

SigRefs  ::=                          {: RESULT=new ArrayList<ExpName>(); :};
SigRefs  ::= SigRefp:x                {: RESULT=x;                        :};

SigRefp  ::= SigRef:x                 {: RESULT=new ArrayList<ExpName>(); RESULT.add(x); :};
SigRefp  ::= SigRefp:a COMMA SigRef:b {: a.add(b); RESULT=a;                             :};

SigRefu  ::= SigRef:x                 {: RESULT=new Pair<Pos,List<String>>(x.pos, new ArrayList<String>()); RESULT.b.add(x.name); :};
SigRefu  ::= SigRefu:a PLUS SigRef:b  {: RESULT=new Pair<Pos,List<String>>(a.a.merge(b.pos), a.b);          RESULT.b.add(b.name); :};

Name ::= NameHelper:x              {: RESULT=x;                                           :};
Name ::= THIS:a SLASH NameHelper:b {: RESULT=new ExpName(a.merge(b.pos), "this/"+b.name); :};
Name ::= SEQ:a  SLASH NameHelper:b {: RESULT=new ExpName(a.merge(b.pos),  "seq/"+b.name); :};

NameHelper ::= ID:x                     {: RESULT=x;                                                  :};
NameHelper ::= NameHelper:a SLASH ID:b  {: RESULT=new ExpName(a.pos.merge(b.pos), a.name+"/"+b.name); :};

Names ::= Name:x                   {: RESULT=new ArrayList<ExpName>(); RESULT.add(x);  :};
Names ::= Names:a COMMA Name:b     {: a.add(b); RESULT=a;                              :};

Decla ::= PART:k Names   COLON Expr   {: if (1==1) throw ExpName.hint(k,"part"); :};
Decla ::= EXH:k  Names   COLON Expr   {: if (1==1) throw ExpName.hint(k,"exh");  :};

Decla ::= DISJ:k Names:a COLON Expr:b {: RESULT=new Decl(k,    a, mult(b)); :};
Decla ::=        Names:a COLON Expr:b {: RESULT=new Decl(null, a, mult(b)); :};

Declp ::= Declp:x COMMA Decla:y {: RESULT=x; RESULT.add(y);                      :};
Declp ::=               Decla:y {: RESULT=new ArrayList<Decl>(); RESULT.add(y);  :};

Decls ::=                        {: RESULT=new ArrayList<Decl>();                :};
Decls ::= Decla:x                {: RESULT=new ArrayList<Decl>(); RESULT.add(x); :};
Decls ::= Decla:x COMMA Decls:y  {: RESULT=y; RESULT.add(0,x);                   :};
Decls ::=         COMMA Decls:y  {: RESULT=y;                                    :};

Let ::= Name:a EQUALS:o Expr:b SuperOrBar:x {:
  if (a.name.indexOf('/')>=0) throw new ErrorSyntax(a.pos, "Let variable name cannot contain \'/\'");
  if (a.name.indexOf('@')>=0) throw new ErrorSyntax(a.pos, "Let variable name cannot contain \'@\'");
  RESULT = new ExpLet(o, a, b, x);
:};

Let ::= Name:a EQUALS:o Expr:b COMMA Let:x {:
  if (a.name.indexOf('/')>=0) throw new ErrorSyntax(a.pos, "Let variable name cannot contain \'/\'");
  if (a.name.indexOf('@')>=0) throw new ErrorSyntax(a.pos, "Let variable name cannot contain \'@\'");
  RESULT = new ExpLet(o, a, b, x);
:};

SuperOpt ::=                               {: RESULT=null;                                         :};
SuperOpt ::= Super:x                       {: RESULT=x;                                            :};
Super    ::= LBRACE   SuperP:x RBRACE      {: RESULT=x;                                            :};
Super    ::= LBRACE:o          RBRACE      {: RESULT=alloyTrue(o);                                 :};
SuperP   ::= Expr:a                        {: RESULT=a;                                            :};
SuperP   ::= Expr:a SuperP:b               {: RESULT=new ExpBinary(null, ExprBinary.Op.AND, a, b); :};

SuperOrBar ::= BAR Expr:x  {: RESULT=x; :};
SuperOrBar ::= Super:x     {: RESULT=x; :};

Exprs ::=                       {: RESULT=new ArrayList<Exp>();                :};
Exprs ::= Exprp:x               {: RESULT=x;                                   :};
Exprp ::= Expr:x                {: RESULT=new ArrayList<Exp>(); RESULT.add(x); :};
Exprp ::= Exprp:a COMMA Expr:b  {: a.add(b); RESULT=a;                         :};

//=============================================================================

Expr ::= OrExpr:x                     {: RESULT=x;                                              :};
Expr ::= LET     Let:x                {: RESULT=x;                                              :};
Expr ::= ALL2:o  Declp:a SuperOrBar:b {: RESULT=new ExpQuant(o, null, ExprQuant.Op.ALL,  a, b); :};
Expr ::= NO2:o   Declp:a SuperOrBar:b {: RESULT=new ExpQuant(o, null, ExprQuant.Op.NO,   a, b); :};
Expr ::= SOME2:o Declp:a SuperOrBar:b {: RESULT=new ExpQuant(o, null, ExprQuant.Op.SOME, a, b); :};
Expr ::= LONE2:o Declp:a SuperOrBar:b {: RESULT=new ExpQuant(o, null, ExprQuant.Op.LONE, a, b); :};
Expr ::= ONE2:o  Declp:a SuperOrBar:b {: RESULT=new ExpQuant(o, null, ExprQuant.Op.ONE,  a, b); :};
Expr ::= SUM2:o  Declp:a SuperOrBar:b {: RESULT=new ExpQuant(o, null, ExprQuant.Op.SUM,  a, b); :};

OrExpr  ::=               EquivExpr:b              {: RESULT=b;                                        :};
OrExpr  ::= OrExpr:a OR:o EquivExpr:b              {: RESULT=new ExpBinary(o, ExprBinary.Op.OR, a, b); :};

EquivExpr ::=                   ImpliesExpr:b      {: RESULT=b;                                         :};
EquivExpr ::= EquivExpr:a IFF:o ImpliesExpr:b      {: RESULT=new ExpBinary(o, ExprBinary.Op.IFF, a, b); :};

ImpliesExpr      ::= ImpliesExprClose:a            {: RESULT=a; :};
ImpliesExpr      ::= ImpliesExprOpen:a             {: RESULT=a; :};
ImpliesExprClose ::= AndExpr:a                     {: RESULT=a; :};
ImpliesExprClose ::= AndExpr:a IMPLIES   ImpliesExprClose:b ELSE ImpliesExprClose:c {: RESULT=new ExpITE(a,b,c);                              :};
ImpliesExprOpen  ::= AndExpr:a IMPLIES   ImpliesExprClose:b ELSE ImpliesExprOpen:c  {: RESULT=new ExpITE(a,b,c);                              :};
ImpliesExprOpen  ::= AndExpr:a IMPLIES:o ImpliesExpr:b                              {: RESULT=new ExpBinary(o, ExprBinary.Op.OR, a.not(), b); :};

AndExpr ::=                 NegExpr:b   {: RESULT=b;                                         :};
AndExpr ::= AndExpr:a AND:o NegExpr:b   {: RESULT=new ExpBinary(o, ExprBinary.Op.AND, a, b); :};

NegExpr ::=       CompareExpr:b         {: RESULT=b;                                    :};
NegExpr ::= NOT:o NegExpr:b             {: RESULT=new ExpUnary(o, ExprUnary.Op.NOT, b); :};

CompareExpr ::= CompareExpr:a EQUALS:o    UnionDiffExpr:b    {: RESULT=new ExpBinary(o, ExprBinary.Op.EQUALS,a,b);         :};
CompareExpr ::= CompareExpr:a IN:o        UnionDiffExpr:b    {: RESULT=new ExpBinary(o, ExprBinary.Op.IN,a,mult(b));       :};
CompareExpr ::= CompareExpr:a LT:o        UnionDiffExpr:b    {: RESULT=new ExpBinary(o, ExprBinary.Op.LT,a,b);             :};
CompareExpr ::= CompareExpr:a GT:o        UnionDiffExpr:b    {: RESULT=new ExpBinary(o, ExprBinary.Op.GT,a,b);             :};
CompareExpr ::= CompareExpr:a LTE:o       UnionDiffExpr:b    {: RESULT=new ExpBinary(o, ExprBinary.Op.LTE,a,b);            :};
CompareExpr ::= CompareExpr:a GTE:o       UnionDiffExpr:b    {: RESULT=new ExpBinary(o, ExprBinary.Op.GTE,a,b);            :};
CompareExpr ::= CompareExpr:a NOTEQUALS:o UnionDiffExpr:b    {: RESULT=new ExpBinary(o, ExprBinary.Op.EQUALS,a,b).not();   :};
CompareExpr ::= CompareExpr:a NOTIN:o     UnionDiffExpr:b    {: RESULT=new ExpBinary(o, ExprBinary.Op.IN,a,mult(b)).not(); :};
CompareExpr ::= CompareExpr:a NOTLT:o     UnionDiffExpr:b    {: RESULT=new ExpBinary(o, ExprBinary.Op.GTE,a,b);            :};
CompareExpr ::= CompareExpr:a NOTGT:o     UnionDiffExpr:b    {: RESULT=new ExpBinary(o, ExprBinary.Op.LTE,a,b);            :};
CompareExpr ::= CompareExpr:a NOTLTE:o    UnionDiffExpr:b    {: RESULT=new ExpBinary(o, ExprBinary.Op.GT,a,b);             :};
CompareExpr ::= CompareExpr:a NOTGTE:o    UnionDiffExpr:b    {: RESULT=new ExpBinary(o, ExprBinary.Op.LT,a,b);             :};
CompareExpr ::= ALL:o  UnionDiffExpr                         {: if (1==1) throw new ErrorSyntax(o,"The \"all x\" construct is no longer supported. If you know the range of possible values of x, consider rewriting it as \"x == set_of_all_possible_values\"."); :};
CompareExpr ::= NO:o   UnionDiffExpr:b                       {: RESULT=new ExpUnary(o, ExprUnary.Op.NO,    b);   :};
CompareExpr ::= SOME:o UnionDiffExpr:b                       {: RESULT=new ExpUnary(o, ExprUnary.Op.SOME,  b);   :};
CompareExpr ::= LONE:o UnionDiffExpr:b                       {: RESULT=new ExpUnary(o, ExprUnary.Op.LONE,  b);   :};
CompareExpr ::= ONE:o  UnionDiffExpr:b                       {: RESULT=new ExpUnary(o, ExprUnary.Op.ONE,   b);   :};
CompareExpr ::= SET:o  UnionDiffExpr:b                       {: RESULT=new ExpUnary(o, ExprUnary.Op.SETOF, b);   :};
CompareExpr ::= SEQ:o  UnionDiffExpr:b                       {: RESULT=new ExpBinary(o, ExprBinary.Op.ISSEQ_ARROW_LONE, new ExpName(null,"seq/Int"), b); parser.alloymodule.addOpen(o, new ExpName(o,"util/sequniv"), null, new ExpName(o,"seq")); :};
CompareExpr ::=        UnionDiffExpr:b                       {: RESULT=b;                                        :};

UnionDiffExpr ::=                         NumUnopExpr:b  {: RESULT=b;                                           :};
UnionDiffExpr ::= UnionDiffExpr:a PLUS:o  NumUnopExpr:b  {: RESULT=new ExpBinary(o, ExprBinary.Op.PLUS,  a, b); :};
UnionDiffExpr ::= UnionDiffExpr:a MINUS:o NumUnopExpr:b  {: RESULT=new ExpBinary(o, ExprBinary.Op.MINUS, a, b); :};

NumUnopExpr ::=          OverrideExpr:b      {: RESULT=b;                                            :};
NumUnopExpr ::= HASH:o   NumUnopExpr:b       {: RESULT=new ExpUnary(o, ExprUnary.Op.CARDINALITY, b); :};
NumUnopExpr ::= SUM:o    NumUnopExpr:b       {: RESULT=new ExpUnary(o, ExprUnary.Op.CAST2INT,    b); :};
NumUnopExpr ::= INT:o    NumUnopExpr:b       {: RESULT=new ExpUnary(o, ExprUnary.Op.CAST2INT,    b); :};

OverrideExpr ::=                           IntersectExpr:b   {: RESULT=b;                                              :};
OverrideExpr ::= OverrideExpr:a PLUSPLUS:o IntersectExpr:b   {: RESULT=new ExpBinary(o, ExprBinary.Op.PLUSPLUS, a, b); :};

IntersectExpr ::=                             RelationExpr:b {: RESULT=b;                                               :};
IntersectExpr ::= IntersectExpr:a AMPERSAND:o RelationExpr:b {: RESULT=new ExpBinary(o, ExprBinary.Op.INTERSECT, a, b); :};

RelationExpr ::= DomainExpr:a                                  {: RESULT=a;                                                   :};
RelationExpr ::= DomainExpr:a ARROW:o           RelationExpr:b {: RESULT=new ExpBinary(o, ExprBinary.Op.ARROW          ,a,b); :};
RelationExpr ::= DomainExpr:a ANY_ARROW_SOME:o  RelationExpr:b {: RESULT=new ExpBinary(o, ExprBinary.Op.ANY_ARROW_SOME ,a,b); :};
RelationExpr ::= DomainExpr:a ANY_ARROW_ONE:o   RelationExpr:b {: RESULT=new ExpBinary(o, ExprBinary.Op.ANY_ARROW_ONE  ,a,b); :};
RelationExpr ::= DomainExpr:a ANY_ARROW_LONE:o  RelationExpr:b {: RESULT=new ExpBinary(o, ExprBinary.Op.ANY_ARROW_LONE ,a,b); :};
RelationExpr ::= DomainExpr:a SOME_ARROW_ANY:o  RelationExpr:b {: RESULT=new ExpBinary(o, ExprBinary.Op.SOME_ARROW_ANY ,a,b); :};
RelationExpr ::= DomainExpr:a SOME_ARROW_SOME:o RelationExpr:b {: RESULT=new ExpBinary(o, ExprBinary.Op.SOME_ARROW_SOME,a,b); :};
RelationExpr ::= DomainExpr:a SOME_ARROW_ONE:o  RelationExpr:b {: RESULT=new ExpBinary(o, ExprBinary.Op.SOME_ARROW_ONE ,a,b); :};
RelationExpr ::= DomainExpr:a SOME_ARROW_LONE:o RelationExpr:b {: RESULT=new ExpBinary(o, ExprBinary.Op.SOME_ARROW_LONE,a,b); :};
RelationExpr ::= DomainExpr:a ONE_ARROW_ANY:o   RelationExpr:b {: RESULT=new ExpBinary(o, ExprBinary.Op.ONE_ARROW_ANY  ,a,b); :};
RelationExpr ::= DomainExpr:a ONE_ARROW_SOME:o  RelationExpr:b {: RESULT=new ExpBinary(o, ExprBinary.Op.ONE_ARROW_SOME ,a,b); :};
RelationExpr ::= DomainExpr:a ONE_ARROW_ONE:o   RelationExpr:b {: RESULT=new ExpBinary(o, ExprBinary.Op.ONE_ARROW_ONE  ,a,b); :};
RelationExpr ::= DomainExpr:a ONE_ARROW_LONE:o  RelationExpr:b {: RESULT=new ExpBinary(o, ExprBinary.Op.ONE_ARROW_LONE ,a,b); :};
RelationExpr ::= DomainExpr:a LONE_ARROW_ANY:o  RelationExpr:b {: RESULT=new ExpBinary(o, ExprBinary.Op.LONE_ARROW_ANY ,a,b); :};
RelationExpr ::= DomainExpr:a LONE_ARROW_SOME:o RelationExpr:b {: RESULT=new ExpBinary(o, ExprBinary.Op.LONE_ARROW_SOME,a,b); :};
RelationExpr ::= DomainExpr:a LONE_ARROW_ONE:o  RelationExpr:b {: RESULT=new ExpBinary(o, ExprBinary.Op.LONE_ARROW_ONE ,a,b); :};
RelationExpr ::= DomainExpr:a LONE_ARROW_LONE:o RelationExpr:b {: RESULT=new ExpBinary(o, ExprBinary.Op.LONE_ARROW_LONE,a,b); :};

DomainExpr ::=                       RangeExpr:b  {: RESULT=b;                                            :};
DomainExpr ::= DomainExpr:a DOMAIN:o RangeExpr:b  {: RESULT=new ExpBinary(o, ExprBinary.Op.DOMAIN, a, b); :};

RangeExpr ::=                     BracketExpr:b   {: RESULT=b;                                           :};
RangeExpr ::= RangeExpr:a RANGE:o BracketExpr:b   {: RESULT=new ExpBinary(o, ExprBinary.Op.RANGE, a, b); :};

BracketExpr ::= DotExpr:b                                 {: RESULT=b;                                                                                                          :};
BracketExpr ::= BracketExpr:a LBRACKET Exprs:b RBRACKET:c {: Exp aa=a;                     for(Exp bb:b) aa=t(new ExpDot(aa.span().merge(bb.span()), c, bb, aa), c); RESULT=aa; :};
BracketExpr ::= DISJ:a        LBRACKET Exprs:b RBRACKET:c {: Exp aa=new ExpName(a,"disj"); for(Exp bb:b) aa=t(new ExpDot(aa.span().merge(bb.span()), c, bb, aa), c); RESULT=aa; :};
BracketExpr ::= INT:a         LBRACKET Exprs:b RBRACKET:c {: Exp aa=new ExpName(a,"int");  for(Exp bb:b) aa=t(new ExpDot(aa.span().merge(bb.span()), c, bb, aa), c); RESULT=aa; :};
BracketExpr ::= SUM:a         LBRACKET Exprs:b RBRACKET:c {: Exp aa=new ExpName(a,"int");  for(Exp bb:b) aa=t(new ExpDot(aa.span().merge(bb.span()), c, bb, aa), c); RESULT=aa; :};

DotExpr ::=                     UnopExpr:b {: RESULT=b;                                                      :};
DotExpr ::= BracketExpr:a DOT:o UnopExpr:b {: RESULT=t(new ExpDot(o, null, a, b),                     null); :};
DotExpr ::= BracketExpr:a DOT:o DISJ:b     {: RESULT=t(new ExpDot(o, null, a, new ExpName(b,"disj")), null); :};
DotExpr ::= BracketExpr:a DOT:o INT        {: RESULT=new ExpUnary(o, ExprUnary.Op.CAST2INT, a);              :};
DotExpr ::= BracketExpr:a DOT:o SUM        {: RESULT=new ExpUnary(o, ExprUnary.Op.CAST2INT, a);              :};

UnopExpr ::=          BaseExpr:b  {: RESULT=b;                                          :};
UnopExpr ::= TILDE:o  UnopExpr:b  {: RESULT=new ExpUnary(o, ExprUnary.Op.TRANSPOSE, b); :};
UnopExpr ::= STAR:o   UnopExpr:b  {: RESULT=new ExpUnary(o, ExprUnary.Op.RCLOSURE,  b); :};
UnopExpr ::= CARET:o  UnopExpr:b  {: RESULT=new ExpUnary(o, ExprUnary.Op.CLOSURE,   b); :};

//=============================================================================

BaseExpr ::= NUMBER:x                               {: RESULT=x;                                                               :};
BaseExpr ::= IDEN:o                                 {: RESULT=new ExpName(o, "iden");                                          :};
BaseExpr ::= THIS:o                                 {: RESULT=new ExpName(o, "this");                                          :};
BaseExpr ::= LPAREN Expr:x RPAREN                   {: RESULT=x;                                                               :};
BaseExpr ::= SigRef:x                               {: RESULT=x;                                                               :};
BaseExpr ::= AT:o Name:x                            {: RESULT=new ExpName(o.merge(x.pos), "@"+x.name);                         :};
BaseExpr ::= Super:x                                {: RESULT=x;                                                               :};
BaseExpr ::= LBRACE:o Declp:a SuperOrBar:b RBRACE:c {: RESULT=new ExpQuant(o, c, ExprQuant.Op.COMPREHENSION, a, b);            :};
BaseExpr ::= LBRACE:o Declp:a              RBRACE:c {: RESULT=new ExpQuant(o, c, ExprQuant.Op.COMPREHENSION, a, alloyTrue(c)); :};

//=============================================================================
