
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
//----------------------------------------------------

package edu.mit.csail.sdg.alloy4;

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Set;
import java.util.TreeSet;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.LinkedHashMap;
import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.Reader;
import java.io.InputStreamReader;
import java.io.FileNotFoundException;
import java.io.UnsupportedEncodingException;
import java.io.IOException;

/** Autogenerated by CUP.
  */
public class AlloyParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AlloyParser() {super();}

  /** Constructor which sets the default scanner. */
  public AlloyParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AlloyParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\302\000\002\060\005\000\002\002\004\000\002\031" +
    "\004\000\002\031\007\000\002\031\002\000\002\037\004" +
    "\000\002\037\006\000\002\037\007\000\002\037\011\000" +
    "\002\040\002\000\002\040\004\000\002\043\005\000\002" +
    "\043\006\000\002\043\005\000\002\043\006\000\002\043" +
    "\004\000\002\043\005\000\002\043\005\000\002\043\002" +
    "\000\002\043\006\000\002\043\006\000\002\013\002\000" +
    "\002\013\004\000\002\047\005\000\002\047\007\000\002" +
    "\047\005\000\002\047\003\000\002\061\003\000\002\061" +
    "\005\000\002\062\005\000\002\062\004\000\002\062\005" +
    "\000\002\062\004\000\002\062\005\000\002\062\004\000" +
    "\002\023\013\000\002\023\013\000\002\023\010\000\002" +
    "\023\015\000\002\023\015\000\002\023\012\000\002\044" +
    "\007\000\002\044\007\000\002\044\004\000\002\044\011" +
    "\000\002\044\011\000\002\044\006\000\002\050\012\000" +
    "\002\052\003\000\002\052\003\000\002\052\003\000\002" +
    "\052\003\000\002\053\002\000\002\053\004\000\002\051" +
    "\004\000\002\051\004\000\002\051\004\000\002\051\002" +
    "\000\002\054\003\000\002\054\003\000\002\054\003\000" +
    "\002\056\002\000\002\056\003\000\002\055\003\000\002" +
    "\055\005\000\002\057\003\000\002\057\003\000\002\057" +
    "\005\000\002\057\005\000\002\032\003\000\002\032\005" +
    "\000\002\033\003\000\002\033\005\000\002\034\003\000" +
    "\002\034\005\000\002\006\010\000\002\006\010\000\002" +
    "\006\010\000\002\006\007\000\002\006\006\000\002\006" +
    "\006\000\002\006\006\000\002\006\005\000\002\007\002" +
    "\000\002\007\003\000\002\030\006\000\002\030\007\000" +
    "\002\016\002\000\002\016\003\000\002\015\005\000\002" +
    "\017\002\000\002\017\004\000\002\020\004\000\002\020" +
    "\003\000\002\021\002\000\002\021\003\000\002\022\003" +
    "\000\002\022\005\000\002\014\003\000\002\014\004\000" +
    "\002\014\005\000\002\014\005\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\041" +
    "\003\000\002\041\005\000\002\012\003\000\002\012\005" +
    "\000\002\024\003\000\002\024\003\000\002\025\003\000" +
    "\002\025\007\000\002\026\007\000\002\026\005\000\002" +
    "\002\003\000\002\002\005\000\002\035\003\000\002\035" +
    "\004\000\002\005\003\000\002\005\004\000\002\005\004" +
    "\000\002\005\004\000\002\005\004\000\002\005\004\000" +
    "\002\005\004\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\063\003\000\002\063\005\000\002\063\005\000\002" +
    "\036\003\000\002\036\004\000\002\036\004\000\002\036" +
    "\004\000\002\036\004\000\002\042\003\000\002\042\005" +
    "\000\002\027\003\000\002\027\005\000\002\046\003\000" +
    "\002\046\005\000\002\046\005\000\002\046\005\000\002" +
    "\046\005\000\002\046\005\000\002\046\005\000\002\046" +
    "\005\000\002\046\005\000\002\046\005\000\002\046\005" +
    "\000\002\046\005\000\002\046\005\000\002\046\005\000" +
    "\002\046\005\000\002\046\005\000\002\046\005\000\002" +
    "\010\003\000\002\010\005\000\002\045\003\000\002\045" +
    "\005\000\002\004\003\000\002\004\006\000\002\004\006" +
    "\000\002\011\003\000\002\011\005\000\002\011\005\000" +
    "\002\064\003\000\002\064\004\000\002\064\004\000\002" +
    "\064\004\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\005\000\002\003\004\000\002\003\003\000" +
    "\002\003\003\000\002\003\006\000\002\003\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u018f\000\036\002\ufffd\023\ufffd\032\ufffd\037\ufffd\054" +
    "\ufffd\056\ufffd\073\ufffd\100\005\114\ufffd\115\ufffd\122\ufffd" +
    "\127\ufffd\131\ufffd\135\ufffd\001\002\000\034\002\ufff8\023" +
    "\ufff8\032\ufff8\037\ufff8\054\ufff8\056\ufff8\073\ufff8\114\ufff8" +
    "\115\ufff8\122\ufff8\127\ufff8\131\ufff8\135\ufff8\001\002\000" +
    "\006\141\013\144\011\001\002\000\004\002\007\001\002" +
    "\000\004\002\000\001\002\000\036\002\uffff\023\uffff\032" +
    "\uffff\037\uffff\054\uffff\056\uffff\070\020\073\uffff\114\uffff" +
    "\115\uffff\122\uffff\127\uffff\131\uffff\135\uffff\001\002\000" +
    "\276\002\uffba\004\uffba\005\uffba\006\uffba\007\uffba\010\uffba" +
    "\011\uffba\012\uffba\013\uffba\014\uffba\015\uffba\016\uffba\017" +
    "\uffba\020\uffba\021\uffba\022\uffba\023\uffba\024\uffba\025\uffba" +
    "\026\uffba\027\uffba\030\uffba\031\uffba\032\uffba\033\uffba\034" +
    "\uffba\036\uffba\037\uffba\040\uffba\041\uffba\042\uffba\043\uffba" +
    "\044\uffba\045\uffba\046\uffba\047\uffba\052\uffba\053\uffba\054" +
    "\uffba\055\uffba\056\uffba\057\uffba\060\uffba\061\uffba\062\uffba" +
    "\063\uffba\064\uffba\065\uffba\066\uffba\067\uffba\070\uffba\071" +
    "\uffba\072\uffba\073\uffba\074\uffba\075\uffba\076\uffba\077\uffba" +
    "\101\uffba\102\uffba\103\uffba\104\uffba\105\uffba\106\uffba\107" +
    "\uffba\110\uffba\111\uffba\112\uffba\113\uffba\114\uffba\115\uffba" +
    "\116\uffba\120\uffba\121\uffba\122\uffba\123\uffba\124\uffba\125" +
    "\uffba\126\uffba\127\uffba\130\uffba\131\uffba\132\uffba\133\uffba" +
    "\134\uffba\135\uffba\136\uffba\137\uffba\140\uffba\141\uffba\142" +
    "\uffba\143\uffba\144\uffba\145\uffba\001\002\000\276\002\uffbc" +
    "\004\uffbc\005\uffbc\006\uffbc\007\uffbc\010\uffbc\011\uffbc\012" +
    "\uffbc\013\uffbc\014\uffbc\015\uffbc\016\uffbc\017\uffbc\020\uffbc" +
    "\021\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027" +
    "\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc\036\uffbc" +
    "\037\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\045" +
    "\uffbc\046\uffbc\047\uffbc\052\uffbc\053\uffbc\054\uffbc\055\uffbc" +
    "\056\uffbc\057\uffbc\060\uffbc\061\uffbc\062\uffbc\063\uffbc\064" +
    "\uffbc\065\uffbc\066\uffbc\067\uffbc\070\uffbc\071\uffbc\072\uffbc" +
    "\073\uffbc\074\uffbc\075\uffbc\076\uffbc\077\uffbc\101\uffbc\102" +
    "\uffbc\103\uffbc\104\uffbc\105\uffbc\106\uffbc\107\uffbc\110\uffbc" +
    "\111\uffbc\112\uffbc\113\uffbc\114\uffbc\115\uffbc\116\uffbc\120" +
    "\uffbc\121\uffbc\122\uffbc\123\uffbc\124\uffbc\125\uffbc\126\uffbc" +
    "\127\uffbc\130\uffbc\131\uffbc\132\uffbc\133\016\134\uffbc\135" +
    "\uffbc\136\uffbc\137\uffbc\140\uffbc\141\uffbc\142\uffbc\143\uffbc" +
    "\144\uffbc\145\uffbc\001\002\000\004\133\014\001\002\000" +
    "\004\144\011\001\002\000\276\002\uffbb\004\uffbb\005\uffbb" +
    "\006\uffbb\007\uffbb\010\uffbb\011\uffbb\012\uffbb\013\uffbb\014" +
    "\uffbb\015\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb" +
    "\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb\031" +
    "\uffbb\032\uffbb\033\uffbb\034\uffbb\036\uffbb\037\uffbb\040\uffbb" +
    "\041\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb\046\uffbb\047" +
    "\uffbb\052\uffbb\053\uffbb\054\uffbb\055\uffbb\056\uffbb\057\uffbb" +
    "\060\uffbb\061\uffbb\062\uffbb\063\uffbb\064\uffbb\065\uffbb\066" +
    "\uffbb\067\uffbb\070\uffbb\071\uffbb\072\uffbb\073\uffbb\074\uffbb" +
    "\075\uffbb\076\uffbb\077\uffbb\101\uffbb\102\uffbb\103\uffbb\104" +
    "\uffbb\105\uffbb\106\uffbb\107\uffbb\110\uffbb\111\uffbb\112\uffbb" +
    "\113\uffbb\114\uffbb\115\uffbb\116\uffbb\120\uffbb\121\uffbb\122" +
    "\uffbb\123\uffbb\124\uffbb\125\uffbb\126\uffbb\127\uffbb\130\uffbb" +
    "\131\uffbb\132\uffbb\133\016\134\uffbb\135\uffbb\136\uffbb\137" +
    "\uffbb\140\uffbb\141\uffbb\142\uffbb\143\uffbb\144\uffbb\145\uffbb" +
    "\001\002\000\004\144\017\001\002\000\276\002\uffb9\004" +
    "\uffb9\005\uffb9\006\uffb9\007\uffb9\010\uffb9\011\uffb9\012\uffb9" +
    "\013\uffb9\014\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9\021" +
    "\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9" +
    "\030\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\036\uffb9\037" +
    "\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9" +
    "\046\uffb9\047\uffb9\052\uffb9\053\uffb9\054\uffb9\055\uffb9\056" +
    "\uffb9\057\uffb9\060\uffb9\061\uffb9\062\uffb9\063\uffb9\064\uffb9" +
    "\065\uffb9\066\uffb9\067\uffb9\070\uffb9\071\uffb9\072\uffb9\073" +
    "\uffb9\074\uffb9\075\uffb9\076\uffb9\077\uffb9\101\uffb9\102\uffb9" +
    "\103\uffb9\104\uffb9\105\uffb9\106\uffb9\107\uffb9\110\uffb9\111" +
    "\uffb9\112\uffb9\113\uffb9\114\uffb9\115\uffb9\116\uffb9\120\uffb9" +
    "\121\uffb9\122\uffb9\123\uffb9\124\uffb9\125\uffb9\126\uffb9\127" +
    "\uffb9\130\uffb9\131\uffb9\132\uffb9\133\uffb9\134\uffb9\135\uffb9" +
    "\136\uffb9\137\uffb9\140\uffb9\141\uffb9\142\uffb9\143\uffb9\144" +
    "\uffb9\145\uffb9\001\002\000\006\141\013\144\011\001\002" +
    "\000\016\040\uffb8\041\uffb8\053\uffb8\065\uffb8\067\uffb8\125" +
    "\uffb8\001\002\000\006\041\023\125\024\001\002\000\006" +
    "\141\013\144\011\001\002\000\034\002\ufffe\023\ufffe\032" +
    "\ufffe\037\ufffe\054\ufffe\056\ufffe\073\ufffe\114\ufffe\115\ufffe" +
    "\122\ufffe\127\ufffe\131\ufffe\135\ufffe\001\002\000\016\040" +
    "\uffb7\041\uffb7\053\uffb7\065\uffb7\067\uffb7\125\uffb7\001\002" +
    "\000\034\002\uffef\023\uffef\032\uffef\037\uffef\054\uffef\056" +
    "\uffef\073\uffef\114\uffef\115\031\122\uffef\127\uffef\131\uffef" +
    "\135\uffef\001\002\000\034\002\ufff7\023\ufff7\032\ufff7\037" +
    "\ufff7\054\ufff7\056\ufff7\073\ufff7\114\ufff7\115\ufff7\122\ufff7" +
    "\127\ufff7\131\ufff7\135\ufff7\001\002\000\032\002\001\023" +
    "\uffcd\032\060\037\052\054\056\056\057\073\uffcd\114\uffcd" +
    "\122\055\127\053\131\uffcd\135\uffcd\001\002\000\006\141" +
    "\013\144\011\001\002\000\040\002\ufffc\023\ufffc\031\033" +
    "\032\ufffc\037\ufffc\054\ufffc\056\ufffc\070\034\073\ufffc\114" +
    "\ufffc\115\ufffc\122\ufffc\127\ufffc\131\ufffc\135\ufffc\001\002" +
    "\000\006\141\013\144\011\001\002\000\014\125\uffc4\132" +
    "\041\141\013\143\040\144\011\001\002\000\004\125\045" +
    "\001\002\000\006\041\043\125\uffc3\001\002\000\006\041" +
    "\uffc7\125\uffc7\001\002\000\010\041\uffc6\045\uffc6\125\uffc6" +
    "\001\002\000\010\041\uffc5\045\uffc5\125\uffc5\001\002\000" +
    "\006\041\uffc2\125\uffc2\001\002\000\012\132\041\141\013" +
    "\143\040\144\011\001\002\000\006\041\uffc1\125\uffc1\001" +
    "\002\000\036\002\ufffa\023\ufffa\031\046\032\ufffa\037\ufffa" +
    "\054\ufffa\056\ufffa\073\ufffa\114\ufffa\115\ufffa\122\ufffa\127" +
    "\ufffa\131\ufffa\135\ufffa\001\002\000\006\141\013\144\011" +
    "\001\002\000\034\002\ufff9\023\ufff9\032\ufff9\037\ufff9\054" +
    "\ufff9\056\ufff9\073\ufff9\114\ufff9\115\ufff9\122\ufff9\127\ufff9" +
    "\131\ufff9\135\ufff9\001\002\000\034\002\ufffb\023\ufffb\032" +
    "\ufffb\037\ufffb\054\ufffb\056\ufffb\073\ufffb\114\ufffb\115\ufffb" +
    "\122\ufffb\127\ufffb\131\ufffb\135\ufffb\001\002\000\014\023" +
    "\u0180\073\u017e\114\u017b\131\u017f\135\u017d\001\002\000\006" +
    "\141\013\144\011\001\002\000\006\141\013\144\011\001" +
    "\002\000\032\002\ufff2\023\ufff2\032\ufff2\037\ufff2\054\ufff2" +
    "\056\ufff2\073\ufff2\114\ufff2\122\ufff2\127\ufff2\131\ufff2\135" +
    "\ufff2\001\002\000\012\132\041\141\013\143\040\144\011" +
    "\001\002\000\010\067\062\141\013\144\011\001\002\000" +
    "\012\132\041\141\013\143\040\144\011\001\002\000\010" +
    "\067\062\141\013\144\011\001\002\000\004\067\062\001" +
    "\002\000\104\024\142\025\115\033\145\036\111\042\120" +
    "\043\134\061\072\062\133\066\073\067\131\071\136\072" +
    "\114\073\143\074\071\101\123\102\130\103\126\104\105" +
    "\113\107\114\124\124\uffa7\130\150\132\074\134\132\135" +
    "\065\136\103\137\116\140\141\141\112\142\101\143\067" +
    "\144\011\145\117\001\002\000\032\002\ufff4\023\ufff4\032" +
    "\ufff4\037\ufff4\054\ufff4\056\ufff4\073\ufff4\114\ufff4\122\ufff4" +
    "\127\ufff4\131\ufff4\135\ufff4\001\002\000\162\024\uff76\025" +
    "\uff76\027\uff76\033\uff76\034\uff76\036\uff76\041\uff76\042\uff76" +
    "\043\uff76\046\uff76\047\uff76\057\uff76\060\uff76\061\uff76\062" +
    "\uff76\063\uff76\064\uff76\065\uff76\066\uff76\067\uff76\071\uff76" +
    "\072\uff76\073\uff76\074\uff76\075\uff76\076\uff76\077\uff76\101" +
    "\uff76\102\uff76\103\uff76\104\uff76\105\uff76\106\uff76\107\uff76" +
    "\110\uff76\111\uff76\112\uff76\113\uff76\114\uff76\116\uff76\120" +
    "\uff76\124\uff76\125\uff76\126\uff76\130\uff76\132\uff76\134\uff76" +
    "\135\uff76\136\uff76\137\uff76\140\uff76\141\uff76\142\uff76\143" +
    "\uff76\144\uff76\145\uff76\001\002\000\046\033\145\036\111" +
    "\042\120\043\134\061\072\062\133\066\073\067\131\074" +
    "\071\103\126\132\074\136\103\140\141\141\112\142\101" +
    "\143\067\144\011\145\117\001\002\000\120\024\uff97\025" +
    "\uff97\033\uff97\034\uff97\036\uff97\041\uff97\042\uff97\043\uff97" +
    "\061\uff97\062\uff97\063\u0105\066\uff97\067\uff97\071\uff97\072" +
    "\uff97\073\uff97\074\uff97\101\uff97\102\uff97\103\uff97\104\uff97" +
    "\113\uff97\114\uff97\116\uff97\124\uff97\125\uff97\126\uff97\130" +
    "\uff97\132\uff97\134\uff97\135\uff97\136\uff97\137\uff97\140\uff97" +
    "\141\uff97\142\uff97\143\uff97\144\uff97\145\uff97\001\002\000" +
    "\236\004\uff48\005\uff48\006\uff48\007\uff48\010\uff48\011\uff48" +
    "\012\uff48\013\uff48\014\uff48\015\uff48\016\uff48\017\uff48\020" +
    "\uff48\021\uff48\022\uff48\024\uff48\025\uff48\026\uff48\027\uff48" +
    "\030\uff48\033\uff48\034\uff48\036\uff48\041\uff48\042\uff48\043" +
    "\uff48\044\uff48\045\uff48\046\uff48\047\uff48\057\uff48\060\uff48" +
    "\061\uff48\062\uff48\063\uff48\064\uff48\065\uff48\066\uff48\067" +
    "\uff48\070\uff48\071\uff48\072\uff48\073\uff48\074\uff48\075\uff48" +
    "\076\uff48\077\uff48\101\uff48\102\uff48\103\uff48\104\uff48\105" +
    "\uff48\106\uff48\107\uff48\110\uff48\111\uff48\112\uff48\113\uff48" +
    "\114\uff48\116\uff48\120\uff48\121\uff48\123\uff48\124\uff48\125" +
    "\uff48\126\uff48\130\uff48\132\uff48\134\uff48\135\uff48\136\uff48" +
    "\137\uff48\140\uff48\141\uff48\142\uff48\143\uff48\144\uff48\145" +
    "\uff48\001\002\000\236\004\uff43\005\uff43\006\uff43\007\uff43" +
    "\010\uff43\011\uff43\012\uff43\013\uff43\014\uff43\015\uff43\016" +
    "\uff43\017\uff43\020\uff43\021\uff43\022\uff43\024\uff43\025\uff43" +
    "\026\uff43\027\uff43\030\uff43\033\uff43\034\uff43\036\uff43\041" +
    "\uff43\042\uff43\043\uff43\044\uff43\045\uff43\046\uff43\047\uff43" +
    "\057\uff43\060\uff43\061\uff43\062\uff43\063\uff43\064\uff43\065" +
    "\uff43\066\uff43\067\uff43\070\uff43\071\uff43\072\uff43\073\uff43" +
    "\074\uff43\075\uff43\076\uff43\077\uff43\101\uff43\102\uff43\103" +
    "\uff43\104\uff43\105\uff43\106\uff43\107\uff43\110\uff43\111\uff43" +
    "\112\uff43\113\uff43\114\uff43\116\uff43\120\uff43\121\uff43\123" +
    "\uff43\124\uff43\125\uff43\126\uff43\130\uff43\132\uff43\134\uff43" +
    "\135\uff43\136\uff43\137\uff43\140\uff43\141\uff43\142\uff43\143" +
    "\uff43\144\uff43\145\uff43\001\002\000\102\024\142\025\115" +
    "\033\145\036\111\042\120\043\134\061\072\062\133\066" +
    "\073\067\131\071\136\072\114\073\143\074\071\101\123" +
    "\102\130\103\126\104\105\113\107\114\124\130\150\132" +
    "\074\134\132\135\065\136\103\137\116\140\141\141\112" +
    "\142\101\143\067\144\011\145\117\001\002\000\046\033" +
    "\145\036\111\042\120\043\134\061\072\062\133\066\073" +
    "\067\131\074\071\103\126\132\074\136\103\140\141\141" +
    "\112\142\101\143\067\144\011\145\117\001\002\000\046" +
    "\033\145\036\111\042\120\043\134\061\072\062\133\066" +
    "\073\067\131\074\071\103\126\132\074\136\103\140\141" +
    "\141\112\142\101\143\067\144\011\145\117\001\002\000" +
    "\236\004\uff47\005\uff47\006\uff47\007\uff47\010\uff47\011\uff47" +
    "\012\uff47\013\uff47\014\uff47\015\uff47\016\uff47\017\uff47\020" +
    "\uff47\021\uff47\022\uff47\024\uff47\025\uff47\026\uff47\027\uff47" +
    "\030\uff47\033\uff47\034\uff47\036\uff47\041\uff47\042\uff47\043" +
    "\uff47\044\uff47\045\uff47\046\uff47\047\uff47\057\uff47\060\uff47" +
    "\061\uff47\062\uff47\063\uff47\064\uff47\065\uff47\066\uff47\067" +
    "\uff47\070\uff47\071\uff47\072\uff47\073\uff47\074\uff47\075\uff47" +
    "\076\uff47\077\uff47\101\uff47\102\uff47\103\uff47\104\uff47\105" +
    "\uff47\106\uff47\107\uff47\110\uff47\111\uff47\112\uff47\113\uff47" +
    "\114\uff47\116\uff47\120\uff47\121\uff47\123\uff47\124\uff47\125" +
    "\uff47\126\uff47\130\uff47\132\uff47\134\uff47\135\uff47\136\uff47" +
    "\137\uff47\140\uff47\141\uff47\142\uff47\143\uff47\144\uff47\145" +
    "\uff47\001\002\000\120\024\uff93\025\uff93\033\uff93\034\uff93" +
    "\036\uff93\041\uff93\042\uff93\043\uff93\061\uff93\062\uff93\063" +
    "\uff93\066\uff93\067\uff93\071\uff93\072\uff93\073\uff93\074\uff93" +
    "\101\uff93\102\uff93\103\uff93\104\uff93\113\uff93\114\uff93\116" +
    "\uff93\124\uff93\125\uff93\126\uff93\130\uff93\132\uff93\134\uff93" +
    "\135\uff93\136\uff93\137\uff93\140\uff93\141\uff93\142\uff93\143" +
    "\uff93\144\uff93\145\uff93\001\002\000\236\004\uff52\005\uff52" +
    "\006\uff52\007\uff52\010\uff52\011\uff52\012\uff52\013\uff52\014" +
    "\uff52\015\uff52\016\uff52\017\uff52\020\uff52\021\uff52\022\uff52" +
    "\024\uff52\025\uff52\026\uff52\027\uff52\030\uff52\033\uff52\034" +
    "\uff52\036\uff52\041\uff52\042\uff52\043\uff52\044\uff52\045\uff52" +
    "\046\uff52\047\uff52\057\uff52\060\uff52\061\uff52\062\uff52\063" +
    "\uff52\064\uff52\065\uff52\066\uff52\067\uff52\070\uff52\071\uff52" +
    "\072\uff52\073\uff52\074\uff52\075\uff52\076\uff52\077\uff52\101" +
    "\uff52\102\uff52\103\uff52\104\uff52\105\uff52\106\uff52\107\uff52" +
    "\110\uff52\111\uff52\112\uff52\113\uff52\114\uff52\116\uff52\120" +
    "\uff52\121\uff52\123\uff52\124\uff52\125\uff52\126\uff52\130\uff52" +
    "\132\uff52\134\uff52\135\uff52\136\uff52\137\uff52\140\uff52\141" +
    "\uff52\142\uff52\143\uff52\144\uff52\145\uff52\001\002\000\166" +
    "\024\uff6c\025\uff6c\026\uff6c\027\uff6c\033\uff6c\034\uff6c\036" +
    "\uff6c\041\uff6c\042\uff6c\043\uff6c\046\uff6c\047\uff6c\057\uff6c" +
    "\060\uff6c\061\uff6c\062\uff6c\063\uff6c\064\uff6c\065\uff6c\066" +
    "\uff6c\067\uff6c\071\uff6c\072\uff6c\073\uff6c\074\uff6c\075\uff6c" +
    "\076\uff6c\077\uff6c\101\uff6c\102\uff6c\103\uff6c\104\uff6c\105" +
    "\uff6c\106\uff6c\107\uff6c\110\uff6c\111\uff6c\112\uff6c\113\uff6c" +
    "\114\uff6c\116\uff6c\120\uff6c\121\uff6c\124\uff6c\125\uff6c\126" +
    "\uff6c\130\uff6c\132\uff6c\134\uff6c\135\uff6c\136\uff6c\137\uff6c" +
    "\140\uff6c\141\uff6c\142\uff6c\143\uff6c\144\uff6c\145\uff6c\001" +
    "\002\000\126\024\uff91\025\uff91\027\u0109\033\uff91\034\uff91" +
    "\036\uff91\041\uff91\042\uff91\043\uff91\046\uff91\061\uff91\062" +
    "\uff91\063\uff91\064\u0108\066\uff91\067\uff91\071\uff91\072\uff91" +
    "\073\uff91\074\uff91\101\uff91\102\uff91\103\uff91\104\uff91\113" +
    "\uff91\114\uff91\116\uff91\124\uff91\125\uff91\126\uff91\130\uff91" +
    "\132\uff91\134\uff91\135\uff91\136\uff91\137\uff91\140\uff91\141" +
    "\uff91\142\uff91\143\uff91\144\uff91\145\uff91\001\002\000\034" +
    "\033\145\036\111\062\133\067\131\074\071\103\126\132" +
    "\074\136\103\141\112\142\101\143\067\144\011\145\117" +
    "\001\002\000\116\024\uff9f\025\uff9f\033\uff9f\034\uff9f\036" +
    "\uff9f\041\uff9f\042\uff9f\043\uff9f\061\uff9f\062\uff9f\066\uff9f" +
    "\067\uff9f\071\uff9f\072\uff9f\073\uff9f\074\uff9f\101\uff9f\102" +
    "\uff9f\103\uff9f\104\uff9f\113\uff9f\114\uff9f\116\u0103\124\uff9f" +
    "\125\uff9f\126\uff9f\130\uff9f\132\uff9f\134\uff9f\135\uff9f\136" +
    "\uff9f\137\uff9f\140\uff9f\141\uff9f\142\uff9f\143\uff9f\144\uff9f" +
    "\145\uff9f\001\002\000\034\033\145\036\111\062\133\067" +
    "\131\074\071\103\126\132\074\136\103\141\112\142\101" +
    "\143\067\144\011\145\117\001\002\000\120\024\uff95\025" +
    "\uff95\033\uff95\034\uff95\036\uff95\041\uff95\042\uff95\043\uff95" +
    "\061\uff95\062\uff95\063\uff95\066\uff95\067\uff95\071\uff95\072" +
    "\uff95\073\uff95\074\uff95\101\uff95\102\uff95\103\uff95\104\uff95" +
    "\113\uff95\114\uff95\116\uff95\124\uff95\125\uff95\126\uff95\130" +
    "\uff95\132\uff95\134\uff95\135\uff95\136\uff95\137\uff95\140\uff95" +
    "\141\uff95\142\uff95\143\uff95\144\uff95\145\uff95\001\002\000" +
    "\064\024\142\033\145\036\111\042\120\043\134\061\072" +
    "\062\133\066\073\067\131\073\143\074\071\102\130\103" +
    "\126\104\105\114\124\130\150\132\074\135\065\136\103" +
    "\140\141\141\112\142\101\143\067\144\011\145\117\001" +
    "\002\000\120\024\uff92\025\uff92\033\uff92\034\uff92\036\uff92" +
    "\041\uff92\042\uff92\043\uff92\061\uff92\062\uff92\063\uff92\066" +
    "\uff92\067\uff92\071\uff92\072\uff92\073\uff92\074\uff92\101\uff92" +
    "\102\uff92\103\uff92\104\uff92\113\uff92\114\uff92\116\uff92\124" +
    "\uff92\125\uff92\126\uff92\130\uff92\132\uff92\134\uff92\135\uff92" +
    "\136\uff92\137\uff92\140\uff92\141\uff92\142\uff92\143\uff92\144" +
    "\uff92\145\uff92\001\002\000\014\042\257\051\261\117\260" +
    "\141\013\144\011\001\002\000\236\004\uff55\005\uff55\006" +
    "\uff55\007\uff55\010\uff55\011\uff55\012\uff55\013\uff55\014\uff55" +
    "\015\uff55\016\uff55\017\uff55\020\uff55\021\uff55\022\uff55\024" +
    "\uff55\025\uff55\026\uff55\027\uff55\030\uff55\033\uff55\034\uff55" +
    "\036\uff55\041\uff55\042\uff55\043\uff55\044\uff55\045\uff55\046" +
    "\uff55\047\uff55\057\uff55\060\uff55\061\uff55\062\uff55\063\uff55" +
    "\064\uff55\065\uff55\066\uff55\067\uff55\070\uff55\071\uff55\072" +
    "\uff55\073\uff55\074\uff55\075\uff55\076\uff55\077\uff55\101\uff55" +
    "\102\uff55\103\uff55\104\uff55\105\uff55\106\uff55\107\uff55\110" +
    "\uff55\111\uff55\112\uff55\113\uff55\114\uff55\116\uff55\120\uff55" +
    "\121\uff55\123\uff55\124\uff55\125\uff55\126\uff55\130\uff55\132" +
    "\uff55\134\uff55\135\uff55\136\uff55\137\uff55\140\uff55\141\uff55" +
    "\142\uff55\143\uff55\144\uff55\145\uff55\001\002\000\034\033" +
    "\145\036\111\062\133\067\131\074\071\103\126\132\074" +
    "\136\103\141\112\142\101\143\067\144\011\145\117\001" +
    "\002\000\240\004\uff46\005\uff46\006\uff46\007\uff46\010\uff46" +
    "\011\uff46\012\uff46\013\uff46\014\uff46\015\uff46\016\uff46\017" +
    "\uff46\020\uff46\021\uff46\022\uff46\024\uff46\025\uff46\026\uff46" +
    "\027\uff46\030\uff46\033\uff46\034\uff46\036\uff46\041\uff46\042" +
    "\uff46\043\uff46\044\uff46\045\uff46\046\uff46\047\uff46\057\uff46" +
    "\060\uff46\061\uff46\062\uff46\063\uff46\064\uff46\065\uff46\066" +
    "\uff46\067\uff46\070\uff46\071\uff46\072\uff46\073\uff46\074\uff46" +
    "\075\uff46\076\uff46\077\uff46\101\uff46\102\uff46\103\uff46\104" +
    "\uff46\105\uff46\106\uff46\107\uff46\110\uff46\111\uff46\112\uff46" +
    "\113\uff46\114\uff46\116\uff46\120\uff46\121\uff46\123\uff46\124" +
    "\uff46\125\uff46\126\uff46\130\uff46\132\uff46\133\014\134\uff46" +
    "\135\uff46\136\uff46\137\uff46\140\uff46\141\uff46\142\uff46\143" +
    "\uff46\144\uff46\145\uff46\001\002\000\164\024\uff73\025\uff73" +
    "\027\uff73\033\uff73\034\uff73\036\uff73\041\uff73\042\uff73\043" +
    "\uff73\046\uff73\047\uff73\057\uff73\060\uff73\061\uff73\062\uff73" +
    "\063\uff73\064\uff73\065\uff73\066\uff73\067\uff73\071\uff73\072" +
    "\uff73\073\uff73\074\uff73\075\uff73\076\uff73\077\uff73\101\uff73" +
    "\102\uff73\103\uff73\104\uff73\105\uff73\106\uff73\107\uff73\110" +
    "\uff73\111\uff73\112\uff73\113\uff73\114\uff73\116\uff73\120\uff73" +
    "\121\374\124\uff73\125\uff73\126\uff73\130\uff73\132\uff73\134" +
    "\uff73\135\uff73\136\uff73\137\uff73\140\uff73\141\uff73\142\uff73" +
    "\143\uff73\144\uff73\145\uff73\001\002\000\014\042\257\051" +
    "\261\117\260\141\013\144\011\001\002\000\014\042\257" +
    "\051\261\117\260\141\013\144\011\001\002\000\014\042" +
    "\257\051\261\117\260\141\013\144\011\001\002\000\236" +
    "\004\uff4b\005\uff4b\006\uff4b\007\uff4b\010\uff4b\011\uff4b\012" +
    "\uff4b\013\uff4b\014\uff4b\015\uff4b\016\uff4b\017\uff4b\020\uff4b" +
    "\021\uff4b\022\uff4b\024\uff4b\025\uff4b\026\uff4b\027\uff4b\030" +
    "\uff4b\033\uff4b\034\uff4b\036\uff4b\041\uff4b\042\uff4b\043\uff4b" +
    "\044\uff4b\045\uff4b\046\uff4b\047\uff4b\057\uff4b\060\uff4b\061" +
    "\uff4b\062\uff4b\063\uff4b\064\uff4b\065\uff4b\066\uff4b\067\uff4b" +
    "\070\uff4b\071\uff4b\072\uff4b\073\uff4b\074\uff4b\075\uff4b\076" +
    "\uff4b\077\uff4b\101\uff4b\102\uff4b\103\uff4b\104\uff4b\105\uff4b" +
    "\106\uff4b\107\uff4b\110\uff4b\111\uff4b\112\uff4b\113\uff4b\114" +
    "\uff4b\116\uff4b\120\uff4b\121\uff4b\123\uff4b\124\uff4b\125\uff4b" +
    "\126\uff4b\130\uff4b\132\uff4b\134\uff4b\135\uff4b\136\uff4b\137" +
    "\uff4b\140\uff4b\141\uff4b\142\uff4b\143\uff4b\144\uff4b\145\uff4b" +
    "\001\002\000\004\070\326\001\002\000\162\024\uff89\025" +
    "\uff89\027\uff89\033\uff89\034\uff89\036\uff89\041\uff89\042\uff89" +
    "\043\uff89\046\uff89\047\uff89\057\uff89\060\uff89\061\uff89\062" +
    "\uff89\063\uff89\064\uff89\065\uff89\066\uff89\067\uff89\071\uff89" +
    "\072\uff89\073\uff89\074\uff89\075\uff89\076\uff89\077\170\101" +
    "\uff89\102\uff89\103\uff89\104\uff89\105\uff89\106\uff89\107\uff89" +
    "\110\uff89\111\uff89\112\uff89\113\uff89\114\uff89\116\uff89\120" +
    "\167\124\uff89\125\uff89\126\uff89\130\uff89\132\uff89\134\uff89" +
    "\135\uff89\136\uff89\137\uff89\140\uff89\141\uff89\142\uff89\143" +
    "\uff89\144\uff89\145\uff89\001\002\000\156\024\uff8b\025\uff8b" +
    "\027\uff8b\033\uff8b\034\uff8b\036\uff8b\041\uff8b\042\uff8b\043" +
    "\uff8b\046\uff8b\047\350\057\346\060\340\061\uff8b\062\uff8b" +
    "\063\uff8b\064\uff8b\065\341\066\uff8b\067\uff8b\071\uff8b\072" +
    "\uff8b\073\uff8b\074\uff8b\075\351\076\342\101\uff8b\102\uff8b" +
    "\103\uff8b\104\uff8b\105\337\106\344\107\343\110\336\111" +
    "\347\112\345\113\uff8b\114\uff8b\116\uff8b\124\uff8b\125\uff8b" +
    "\126\uff8b\130\uff8b\132\uff8b\134\uff8b\135\uff8b\136\uff8b\137" +
    "\uff8b\140\uff8b\141\uff8b\142\uff8b\143\uff8b\144\uff8b\145\uff8b" +
    "\001\002\000\014\042\257\051\261\117\260\141\013\144" +
    "\011\001\002\000\046\033\145\036\111\042\120\043\134" +
    "\061\072\062\133\066\073\067\131\074\071\103\126\132" +
    "\074\136\103\140\141\141\112\142\101\143\067\144\011" +
    "\145\117\001\002\000\104\024\142\025\115\033\145\036" +
    "\111\042\120\043\134\061\072\062\133\066\073\067\131" +
    "\071\136\072\114\073\143\074\071\101\123\102\130\103" +
    "\126\104\105\113\107\114\124\124\uffa7\130\150\132\074" +
    "\134\132\135\065\136\103\137\116\140\141\141\112\142" +
    "\101\143\067\144\011\145\117\001\002\000\236\004\uff4a" +
    "\005\uff4a\006\uff4a\007\uff4a\010\uff4a\011\uff4a\012\uff4a\013" +
    "\uff4a\014\uff4a\015\uff4a\016\uff4a\017\uff4a\020\uff4a\021\uff4a" +
    "\022\uff4a\024\uff4a\025\uff4a\026\uff4a\027\uff4a\030\uff4a\033" +
    "\uff4a\034\uff4a\036\uff4a\041\uff4a\042\uff4a\043\uff4a\044\uff4a" +
    "\045\uff4a\046\uff4a\047\uff4a\057\uff4a\060\uff4a\061\uff4a\062" +
    "\uff4a\063\uff4a\064\uff4a\065\uff4a\066\uff4a\067\uff4a\070\uff4a" +
    "\071\uff4a\072\uff4a\073\uff4a\074\uff4a\075\uff4a\076\uff4a\077" +
    "\uff4a\101\uff4a\102\uff4a\103\uff4a\104\uff4a\105\uff4a\106\uff4a" +
    "\107\uff4a\110\uff4a\111\uff4a\112\uff4a\113\uff4a\114\uff4a\116" +
    "\uff4a\120\uff4a\121\uff4a\123\uff4a\124\uff4a\125\uff4a\126\uff4a" +
    "\130\uff4a\132\uff4a\134\uff4a\135\uff4a\136\uff4a\137\uff4a\140" +
    "\uff4a\141\uff4a\142\uff4a\143\uff4a\144\uff4a\145\uff4a\001\002" +
    "\000\236\004\uff42\005\uff42\006\uff42\007\uff42\010\uff42\011" +
    "\uff42\012\uff42\013\uff42\014\uff42\015\uff42\016\uff42\017\uff42" +
    "\020\uff42\021\uff42\022\uff42\024\uff42\025\uff42\026\uff42\027" +
    "\uff42\030\uff42\033\uff42\034\uff42\036\uff42\041\uff42\042\uff42" +
    "\043\uff42\044\uff42\045\uff42\046\uff42\047\uff42\057\uff42\060" +
    "\uff42\061\uff42\062\uff42\063\uff42\064\uff42\065\uff42\066\uff42" +
    "\067\uff42\070\uff42\071\uff42\072\uff42\073\uff42\074\uff42\075" +
    "\uff42\076\uff42\077\uff42\101\uff42\102\uff42\103\uff42\104\uff42" +
    "\105\uff42\106\uff42\107\uff42\110\uff42\111\uff42\112\uff42\113" +
    "\uff42\114\uff42\116\uff42\120\uff42\121\uff42\123\uff42\124\uff42" +
    "\125\uff42\126\uff42\130\uff42\132\uff42\134\uff42\135\uff42\136" +
    "\uff42\137\uff42\140\uff42\141\uff42\142\uff42\143\uff42\144\uff42" +
    "\145\uff42\001\002\000\046\033\145\036\111\042\120\043" +
    "\134\061\072\062\133\066\073\067\131\074\071\103\126" +
    "\132\074\136\103\140\141\141\112\142\101\143\067\144" +
    "\011\145\117\001\002\000\110\024\142\025\115\033\145" +
    "\036\111\042\321\043\134\051\261\061\072\062\133\066" +
    "\073\067\131\071\136\072\114\073\143\074\071\101\123" +
    "\102\130\103\126\104\105\113\107\114\124\117\260\124" +
    "\uffa7\130\150\132\074\134\132\135\065\136\103\137\116" +
    "\140\141\141\112\142\101\143\067\144\011\145\117\001" +
    "\002\000\014\042\257\051\261\117\260\141\013\144\011" +
    "\001\002\000\236\004\uff49\005\uff49\006\uff49\007\uff49\010" +
    "\uff49\011\uff49\012\uff49\013\uff49\014\uff49\015\uff49\016\uff49" +
    "\017\uff49\020\uff49\021\uff49\022\uff49\024\uff49\025\uff49\026" +
    "\uff49\027\uff49\030\uff49\033\uff49\034\uff49\036\uff49\041\uff49" +
    "\042\uff49\043\uff49\044\uff49\045\uff49\046\uff49\047\uff49\057" +
    "\uff49\060\uff49\061\uff49\062\uff49\063\uff49\064\uff49\065\uff49" +
    "\066\uff49\067\uff49\070\uff49\071\uff49\072\uff49\073\uff49\074" +
    "\uff49\075\uff49\076\uff49\077\uff49\101\uff49\102\uff49\103\uff49" +
    "\104\uff49\105\uff49\106\uff49\107\uff49\110\uff49\111\uff49\112" +
    "\uff49\113\uff49\114\uff49\116\uff49\120\uff49\121\uff49\123\uff49" +
    "\124\uff49\125\uff49\126\uff49\130\uff49\132\uff49\134\uff49\135" +
    "\uff49\136\uff49\137\uff49\140\uff49\141\uff49\142\uff49\143\uff49" +
    "\144\uff49\145\uff49\001\002\000\046\033\145\036\111\042" +
    "\120\043\134\061\072\062\133\066\073\067\131\074\071" +
    "\103\126\132\074\136\103\140\141\141\112\142\101\143" +
    "\067\144\011\145\117\001\002\000\004\124\255\001\002" +
    "\000\006\141\013\144\011\001\002\000\236\004\uff4f\005" +
    "\uff4f\006\uff4f\007\uff4f\010\uff4f\011\uff4f\012\uff4f\013\uff4f" +
    "\014\uff4f\015\uff4f\016\uff4f\017\uff4f\020\uff4f\021\uff4f\022" +
    "\uff4f\024\uff4f\025\uff4f\026\uff4f\027\uff4f\030\uff4f\033\uff4f" +
    "\034\uff4f\036\uff4f\041\uff4f\042\uff4f\043\uff4f\044\uff4f\045" +
    "\uff4f\046\uff4f\047\uff4f\057\uff4f\060\uff4f\061\uff4f\062\uff4f" +
    "\063\uff4f\064\uff4f\065\uff4f\066\uff4f\067\uff4f\070\uff4f\071" +
    "\uff4f\072\uff4f\073\uff4f\074\uff4f\075\uff4f\076\uff4f\077\uff4f" +
    "\101\uff4f\102\uff4f\103\uff4f\104\uff4f\105\uff4f\106\uff4f\107" +
    "\uff4f\110\uff4f\111\uff4f\112\uff4f\113\uff4f\114\uff4f\116\uff4f" +
    "\120\uff4f\121\uff4f\123\uff4f\124\uff4f\125\uff4f\126\uff4f\130" +
    "\uff4f\132\uff4f\134\uff4f\135\uff4f\136\uff4f\137\uff4f\140\uff4f" +
    "\141\uff4f\142\uff4f\143\uff4f\144\uff4f\145\uff4f\001\002\000" +
    "\126\024\uff8d\025\uff8d\027\uff8d\033\uff8d\034\uff8d\036\uff8d" +
    "\041\uff8d\042\uff8d\043\uff8d\046\uff8d\061\uff8d\062\uff8d\063" +
    "\uff8d\064\uff8d\066\uff8d\067\uff8d\071\uff8d\072\uff8d\073\uff8d" +
    "\074\uff8d\101\uff8d\102\uff8d\103\uff8d\104\uff8d\113\uff8d\114" +
    "\uff8d\116\uff8d\124\uff8d\125\uff8d\126\uff8d\130\uff8d\132\uff8d" +
    "\134\uff8d\135\uff8d\136\uff8d\137\uff8d\140\uff8d\141\uff8d\142" +
    "\uff8d\143\uff8d\144\uff8d\145\uff8d\001\002\000\046\033\145" +
    "\036\111\042\120\043\134\061\072\062\133\066\073\067" +
    "\131\074\071\103\126\132\074\136\103\140\141\141\112" +
    "\142\101\143\067\144\011\145\117\001\002\000\046\033" +
    "\145\036\111\042\120\043\134\061\072\062\133\066\073" +
    "\067\131\074\071\103\126\132\074\136\103\140\141\141" +
    "\112\142\101\143\067\144\011\145\117\001\002\000\046" +
    "\033\145\036\111\042\120\043\134\061\072\062\133\066" +
    "\073\067\131\074\071\103\126\132\074\136\103\140\141" +
    "\141\112\142\101\143\067\144\011\145\117\001\002\000" +
    "\236\004\uff57\005\uff57\006\uff57\007\uff57\010\uff57\011\uff57" +
    "\012\uff57\013\uff57\014\uff57\015\uff57\016\uff57\017\uff57\020" +
    "\uff57\021\uff57\022\uff57\024\uff57\025\uff57\026\uff57\027\uff57" +
    "\030\uff57\033\uff57\034\uff57\036\uff57\041\uff57\042\uff57\043" +
    "\uff57\044\uff57\045\155\046\uff57\047\uff57\057\uff57\060\uff57" +
    "\061\uff57\062\uff57\063\uff57\064\uff57\065\uff57\066\uff57\067" +
    "\uff57\070\154\071\uff57\072\uff57\073\uff57\074\uff57\075\uff57" +
    "\076\uff57\077\uff57\101\uff57\102\uff57\103\uff57\104\uff57\105" +
    "\uff57\106\uff57\107\uff57\110\uff57\111\uff57\112\uff57\113\uff57" +
    "\114\uff57\116\uff57\120\uff57\121\uff57\123\uff57\124\uff57\125" +
    "\uff57\126\uff57\130\uff57\132\uff57\134\uff57\135\uff57\136\uff57" +
    "\137\uff57\140\uff57\141\uff57\142\uff57\143\uff57\144\uff57\145" +
    "\uff57\001\002\000\006\141\013\144\011\001\002\000\166" +
    "\024\uff6e\025\uff6e\026\235\027\uff6e\033\uff6e\034\uff6e\036" +
    "\uff6e\041\uff6e\042\uff6e\043\uff6e\046\uff6e\047\uff6e\057\uff6e" +
    "\060\uff6e\061\uff6e\062\uff6e\063\uff6e\064\uff6e\065\uff6e\066" +
    "\uff6e\067\uff6e\071\uff6e\072\uff6e\073\uff6e\074\uff6e\075\uff6e" +
    "\076\uff6e\077\uff6e\101\uff6e\102\uff6e\103\uff6e\104\uff6e\105" +
    "\uff6e\106\uff6e\107\uff6e\110\uff6e\111\uff6e\112\uff6e\113\uff6e" +
    "\114\uff6e\116\uff6e\120\uff6e\121\uff6e\124\uff6e\125\uff6e\126" +
    "\uff6e\130\uff6e\132\uff6e\134\uff6e\135\uff6e\136\uff6e\137\uff6e" +
    "\140\uff6e\141\uff6e\142\uff6e\143\uff6e\144\uff6e\145\uff6e\001" +
    "\002\000\230\004\207\005\176\006\175\007\206\010\200" +
    "\011\204\012\213\013\212\014\173\015\210\016\202\017" +
    "\205\020\177\021\203\022\211\024\uff6a\025\uff6a\026\uff6a" +
    "\027\uff6a\030\201\033\uff6a\034\uff6a\036\uff6a\041\uff6a\042" +
    "\uff6a\043\uff6a\044\174\046\uff6a\047\uff6a\057\uff6a\060\uff6a" +
    "\061\uff6a\062\uff6a\063\uff6a\064\uff6a\065\uff6a\066\uff6a\067" +
    "\uff6a\071\uff6a\072\uff6a\073\uff6a\074\uff6a\075\uff6a\076\uff6a" +
    "\077\uff6a\101\uff6a\102\uff6a\103\uff6a\104\uff6a\105\uff6a\106" +
    "\uff6a\107\uff6a\110\uff6a\111\uff6a\112\uff6a\113\uff6a\114\uff6a" +
    "\116\uff6a\120\uff6a\121\uff6a\124\uff6a\125\uff6a\126\uff6a\130" +
    "\uff6a\132\uff6a\134\uff6a\135\uff6a\136\uff6a\137\uff6a\140\uff6a" +
    "\141\uff6a\142\uff6a\143\uff6a\144\uff6a\145\uff6a\001\002\000" +
    "\046\033\145\036\111\042\120\043\134\061\072\062\133" +
    "\066\073\067\131\074\071\103\126\132\074\136\103\140" +
    "\141\141\112\142\101\143\067\144\011\145\117\001\002" +
    "\000\232\004\uff59\005\uff59\006\uff59\007\uff59\010\uff59\011" +
    "\uff59\012\uff59\013\uff59\014\uff59\015\uff59\016\uff59\017\uff59" +
    "\020\uff59\021\uff59\022\uff59\024\uff59\025\uff59\026\uff59\027" +
    "\uff59\030\uff59\033\uff59\034\uff59\036\uff59\041\uff59\042\uff59" +
    "\043\uff59\044\uff59\046\uff59\047\uff59\057\uff59\060\uff59\061" +
    "\uff59\062\uff59\063\uff59\064\uff59\065\uff59\066\uff59\067\uff59" +
    "\071\uff59\072\uff59\073\uff59\074\uff59\075\uff59\076\uff59\077" +
    "\uff59\101\uff59\102\uff59\103\uff59\104\uff59\105\uff59\106\uff59" +
    "\107\uff59\110\uff59\111\uff59\112\uff59\113\uff59\114\uff59\116" +
    "\uff59\120\uff59\121\uff59\123\152\124\uff59\125\uff59\126\uff59" +
    "\130\uff59\132\uff59\134\uff59\135\uff59\136\uff59\137\uff59\140" +
    "\uff59\141\uff59\142\uff59\143\uff59\144\uff59\145\uff59\001\002" +
    "\000\036\033\145\036\111\042\120\062\133\067\131\074" +
    "\071\103\126\132\074\136\103\141\112\142\101\143\067" +
    "\144\011\145\117\001\002\000\236\004\uff56\005\uff56\006" +
    "\uff56\007\uff56\010\uff56\011\uff56\012\uff56\013\uff56\014\uff56" +
    "\015\uff56\016\uff56\017\uff56\020\uff56\021\uff56\022\uff56\024" +
    "\uff56\025\uff56\026\uff56\027\uff56\030\uff56\033\uff56\034\uff56" +
    "\036\uff56\041\uff56\042\uff56\043\uff56\044\uff56\045\155\046" +
    "\uff56\047\uff56\057\uff56\060\uff56\061\uff56\062\uff56\063\uff56" +
    "\064\uff56\065\uff56\066\uff56\067\uff56\070\154\071\uff56\072" +
    "\uff56\073\uff56\074\uff56\075\uff56\076\uff56\077\uff56\101\uff56" +
    "\102\uff56\103\uff56\104\uff56\105\uff56\106\uff56\107\uff56\110" +
    "\uff56\111\uff56\112\uff56\113\uff56\114\uff56\116\uff56\120\uff56" +
    "\121\uff56\123\uff56\124\uff56\125\uff56\126\uff56\130\uff56\132" +
    "\uff56\134\uff56\135\uff56\136\uff56\137\uff56\140\uff56\141\uff56" +
    "\142\uff56\143\uff56\144\uff56\145\uff56\001\002\000\104\024" +
    "\142\025\115\033\145\036\111\042\120\043\134\061\072" +
    "\062\133\066\073\067\131\071\136\072\114\073\143\074" +
    "\071\101\123\102\130\103\126\104\105\113\107\114\124" +
    "\125\uffa3\130\150\132\074\134\132\135\065\136\103\137" +
    "\116\140\141\141\112\142\101\143\067\144\011\145\117" +
    "\001\002\000\036\033\145\036\111\042\156\062\133\067" +
    "\131\074\071\103\126\132\074\136\103\141\112\142\101" +
    "\143\067\144\011\145\117\001\002\000\236\004\uff50\005" +
    "\uff50\006\uff50\007\uff50\010\uff50\011\uff50\012\uff50\013\uff50" +
    "\014\uff50\015\uff50\016\uff50\017\uff50\020\uff50\021\uff50\022" +
    "\uff50\024\uff50\025\uff50\026\uff50\027\uff50\030\uff50\033\uff50" +
    "\034\uff50\036\uff50\041\uff50\042\uff50\043\uff50\044\uff50\045" +
    "\uff50\046\uff50\047\uff50\057\uff50\060\uff50\061\uff50\062\uff50" +
    "\063\uff50\064\uff50\065\uff50\066\uff50\067\uff50\070\uff50\071" +
    "\uff50\072\uff50\073\uff50\074\uff50\075\uff50\076\uff50\077\uff50" +
    "\101\uff50\102\uff50\103\uff50\104\uff50\105\uff50\106\uff50\107" +
    "\uff50\110\uff50\111\uff50\112\uff50\113\uff50\114\uff50\116\uff50" +
    "\120\uff50\121\uff50\123\uff50\124\uff50\125\uff50\126\uff50\130" +
    "\uff50\132\uff50\134\uff50\135\uff50\136\uff50\137\uff50\140\uff50" +
    "\141\uff50\142\uff50\143\uff50\144\uff50\145\uff50\001\002\000" +
    "\236\004\uff51\005\uff51\006\uff51\007\uff51\010\uff51\011\uff51" +
    "\012\uff51\013\uff51\014\uff51\015\uff51\016\uff51\017\uff51\020" +
    "\uff51\021\uff51\022\uff51\024\uff51\025\uff51\026\uff51\027\uff51" +
    "\030\uff51\033\uff51\034\uff51\036\uff51\041\uff51\042\uff51\043" +
    "\uff51\044\uff51\045\uff51\046\uff51\047\uff51\057\uff51\060\uff51" +
    "\061\uff51\062\uff51\063\uff51\064\uff51\065\uff51\066\uff51\067" +
    "\uff51\070\uff51\071\uff51\072\uff51\073\uff51\074\uff51\075\uff51" +
    "\076\uff51\077\uff51\101\uff51\102\uff51\103\uff51\104\uff51\105" +
    "\uff51\106\uff51\107\uff51\110\uff51\111\uff51\112\uff51\113\uff51" +
    "\114\uff51\116\uff51\120\uff51\121\uff51\123\uff51\124\uff51\125" +
    "\uff51\126\uff51\130\uff51\132\uff51\134\uff51\135\uff51\136\uff51" +
    "\137\uff51\140\uff51\141\uff51\142\uff51\143\uff51\144\uff51\145" +
    "\uff51\001\002\000\006\041\164\125\uffa2\001\002\000\006" +
    "\041\uffa1\125\uffa1\001\002\000\004\125\163\001\002\000" +
    "\236\004\uff54\005\uff54\006\uff54\007\uff54\010\uff54\011\uff54" +
    "\012\uff54\013\uff54\014\uff54\015\uff54\016\uff54\017\uff54\020" +
    "\uff54\021\uff54\022\uff54\024\uff54\025\uff54\026\uff54\027\uff54" +
    "\030\uff54\033\uff54\034\uff54\036\uff54\041\uff54\042\uff54\043" +
    "\uff54\044\uff54\045\uff54\046\uff54\047\uff54\057\uff54\060\uff54" +
    "\061\uff54\062\uff54\063\uff54\064\uff54\065\uff54\066\uff54\067" +
    "\uff54\070\uff54\071\uff54\072\uff54\073\uff54\074\uff54\075\uff54" +
    "\076\uff54\077\uff54\101\uff54\102\uff54\103\uff54\104\uff54\105" +
    "\uff54\106\uff54\107\uff54\110\uff54\111\uff54\112\uff54\113\uff54" +
    "\114\uff54\116\uff54\120\uff54\121\uff54\123\uff54\124\uff54\125" +
    "\uff54\126\uff54\130\uff54\132\uff54\134\uff54\135\uff54\136\uff54" +
    "\137\uff54\140\uff54\141\uff54\142\uff54\143\uff54\144\uff54\145" +
    "\uff54\001\002\000\102\024\142\025\115\033\145\036\111" +
    "\042\120\043\134\061\072\062\133\066\073\067\131\071" +
    "\136\072\114\073\143\074\071\101\123\102\130\103\126" +
    "\104\105\113\107\114\124\130\150\132\074\134\132\135" +
    "\065\136\103\137\116\140\141\141\112\142\101\143\067" +
    "\144\011\145\117\001\002\000\006\041\uffa0\125\uffa0\001" +
    "\002\000\162\024\uff83\025\uff83\027\uff83\033\uff83\034\uff83" +
    "\036\uff83\041\uff83\042\uff83\043\uff83\046\uff83\047\uff83\057" +
    "\uff83\060\uff83\061\uff83\062\uff83\063\uff83\064\uff83\065\uff83" +
    "\066\uff83\067\uff83\071\uff83\072\uff83\073\uff83\074\uff83\075" +
    "\uff83\076\uff83\077\170\101\uff83\102\uff83\103\uff83\104\uff83" +
    "\105\uff83\106\uff83\107\uff83\110\uff83\111\uff83\112\uff83\113" +
    "\uff83\114\uff83\116\uff83\120\167\124\uff83\125\uff83\126\uff83" +
    "\130\uff83\132\uff83\134\uff83\135\uff83\136\uff83\137\uff83\140" +
    "\uff83\141\uff83\142\uff83\143\uff83\144\uff83\145\uff83\001\002" +
    "\000\046\033\145\036\111\042\120\043\134\061\072\062" +
    "\133\066\073\067\131\074\071\103\126\132\074\136\103" +
    "\140\141\141\112\142\101\143\067\144\011\145\117\001" +
    "\002\000\046\033\145\036\111\042\120\043\134\061\072" +
    "\062\133\066\073\067\131\074\071\103\126\132\074\136" +
    "\103\140\141\141\112\142\101\143\067\144\011\145\117" +
    "\001\002\000\162\024\uff74\025\uff74\027\uff74\033\uff74\034" +
    "\uff74\036\uff74\041\uff74\042\uff74\043\uff74\046\uff74\047\uff74" +
    "\057\uff74\060\uff74\061\uff74\062\uff74\063\uff74\064\uff74\065" +
    "\uff74\066\uff74\067\uff74\071\uff74\072\uff74\073\uff74\074\uff74" +
    "\075\uff74\076\uff74\077\uff74\101\uff74\102\uff74\103\uff74\104" +
    "\uff74\105\uff74\106\uff74\107\uff74\110\uff74\111\uff74\112\uff74" +
    "\113\uff74\114\uff74\116\uff74\120\uff74\124\uff74\125\uff74\126" +
    "\uff74\130\uff74\132\uff74\134\uff74\135\uff74\136\uff74\137\uff74" +
    "\140\uff74\141\uff74\142\uff74\143\uff74\144\uff74\145\uff74\001" +
    "\002\000\162\024\uff75\025\uff75\027\uff75\033\uff75\034\uff75" +
    "\036\uff75\041\uff75\042\uff75\043\uff75\046\uff75\047\uff75\057" +
    "\uff75\060\uff75\061\uff75\062\uff75\063\uff75\064\uff75\065\uff75" +
    "\066\uff75\067\uff75\071\uff75\072\uff75\073\uff75\074\uff75\075" +
    "\uff75\076\uff75\077\uff75\101\uff75\102\uff75\103\uff75\104\uff75" +
    "\105\uff75\106\uff75\107\uff75\110\uff75\111\uff75\112\uff75\113" +
    "\uff75\114\uff75\116\uff75\120\uff75\124\uff75\125\uff75\126\uff75" +
    "\130\uff75\132\uff75\134\uff75\135\uff75\136\uff75\137\uff75\140" +
    "\uff75\141\uff75\142\uff75\143\uff75\144\uff75\145\uff75\001\002" +
    "\000\036\033\145\036\111\042\120\062\133\067\131\074" +
    "\071\103\126\132\074\136\103\141\112\142\101\143\067" +
    "\144\011\145\117\001\002\000\036\033\145\036\111\042" +
    "\120\062\133\067\131\074\071\103\126\132\074\136\103" +
    "\141\112\142\101\143\067\144\011\145\117\001\002\000" +
    "\036\033\145\036\111\042\120\062\133\067\131\074\071" +
    "\103\126\132\074\136\103\141\112\142\101\143\067\144" +
    "\011\145\117\001\002\000\036\033\145\036\111\042\120" +
    "\062\133\067\131\074\071\103\126\132\074\136\103\141" +
    "\112\142\101\143\067\144\011\145\117\001\002\000\036" +
    "\033\145\036\111\042\120\062\133\067\131\074\071\103" +
    "\126\132\074\136\103\141\112\142\101\143\067\144\011" +
    "\145\117\001\002\000\036\033\145\036\111\042\120\062" +
    "\133\067\131\074\071\103\126\132\074\136\103\141\112" +
    "\142\101\143\067\144\011\145\117\001\002\000\036\033" +
    "\145\036\111\042\120\062\133\067\131\074\071\103\126" +
    "\132\074\136\103\141\112\142\101\143\067\144\011\145" +
    "\117\001\002\000\036\033\145\036\111\042\120\062\133" +
    "\067\131\074\071\103\126\132\074\136\103\141\112\142" +
    "\101\143\067\144\011\145\117\001\002\000\036\033\145" +
    "\036\111\042\120\062\133\067\131\074\071\103\126\132" +
    "\074\136\103\141\112\142\101\143\067\144\011\145\117" +
    "\001\002\000\036\033\145\036\111\042\120\062\133\067" +
    "\131\074\071\103\126\132\074\136\103\141\112\142\101" +
    "\143\067\144\011\145\117\001\002\000\036\033\145\036" +
    "\111\042\120\062\133\067\131\074\071\103\126\132\074" +
    "\136\103\141\112\142\101\143\067\144\011\145\117\001" +
    "\002\000\036\033\145\036\111\042\120\062\133\067\131" +
    "\074\071\103\126\132\074\136\103\141\112\142\101\143" +
    "\067\144\011\145\117\001\002\000\036\033\145\036\111" +
    "\042\120\062\133\067\131\074\071\103\126\132\074\136" +
    "\103\141\112\142\101\143\067\144\011\145\117\001\002" +
    "\000\036\033\145\036\111\042\120\062\133\067\131\074" +
    "\071\103\126\132\074\136\103\141\112\142\101\143\067" +
    "\144\011\145\117\001\002\000\036\033\145\036\111\042" +
    "\120\062\133\067\131\074\071\103\126\132\074\136\103" +
    "\141\112\142\101\143\067\144\011\145\117\001\002\000" +
    "\036\033\145\036\111\042\120\062\133\067\131\074\071" +
    "\103\126\132\074\136\103\141\112\142\101\143\067\144" +
    "\011\145\117\001\002\000\036\033\145\036\111\042\120" +
    "\062\133\067\131\074\071\103\126\132\074\136\103\141" +
    "\112\142\101\143\067\144\011\145\117\001\002\000\166" +
    "\024\uff62\025\uff62\026\uff62\027\uff62\033\uff62\034\uff62\036" +
    "\uff62\041\uff62\042\uff62\043\uff62\046\uff62\047\uff62\057\uff62" +
    "\060\uff62\061\uff62\062\uff62\063\uff62\064\uff62\065\uff62\066" +
    "\uff62\067\uff62\071\uff62\072\uff62\073\uff62\074\uff62\075\uff62" +
    "\076\uff62\077\uff62\101\uff62\102\uff62\103\uff62\104\uff62\105" +
    "\uff62\106\uff62\107\uff62\110\uff62\111\uff62\112\uff62\113\uff62" +
    "\114\uff62\116\uff62\120\uff62\121\uff62\124\uff62\125\uff62\126" +
    "\uff62\130\uff62\132\uff62\134\uff62\135\uff62\136\uff62\137\uff62" +
    "\140\uff62\141\uff62\142\uff62\143\uff62\144\uff62\145\uff62\001" +
    "\002\000\166\024\uff61\025\uff61\026\uff61\027\uff61\033\uff61" +
    "\034\uff61\036\uff61\041\uff61\042\uff61\043\uff61\046\uff61\047" +
    "\uff61\057\uff61\060\uff61\061\uff61\062\uff61\063\uff61\064\uff61" +
    "\065\uff61\066\uff61\067\uff61\071\uff61\072\uff61\073\uff61\074" +
    "\uff61\075\uff61\076\uff61\077\uff61\101\uff61\102\uff61\103\uff61" +
    "\104\uff61\105\uff61\106\uff61\107\uff61\110\uff61\111\uff61\112" +
    "\uff61\113\uff61\114\uff61\116\uff61\120\uff61\121\uff61\124\uff61" +
    "\125\uff61\126\uff61\130\uff61\132\uff61\134\uff61\135\uff61\136" +
    "\uff61\137\uff61\140\uff61\141\uff61\142\uff61\143\uff61\144\uff61" +
    "\145\uff61\001\002\000\166\024\uff5a\025\uff5a\026\uff5a\027" +
    "\uff5a\033\uff5a\034\uff5a\036\uff5a\041\uff5a\042\uff5a\043\uff5a" +
    "\046\uff5a\047\uff5a\057\uff5a\060\uff5a\061\uff5a\062\uff5a\063" +
    "\uff5a\064\uff5a\065\uff5a\066\uff5a\067\uff5a\071\uff5a\072\uff5a" +
    "\073\uff5a\074\uff5a\075\uff5a\076\uff5a\077\uff5a\101\uff5a\102" +
    "\uff5a\103\uff5a\104\uff5a\105\uff5a\106\uff5a\107\uff5a\110\uff5a" +
    "\111\uff5a\112\uff5a\113\uff5a\114\uff5a\116\uff5a\120\uff5a\121" +
    "\uff5a\124\uff5a\125\uff5a\126\uff5a\130\uff5a\132\uff5a\134\uff5a" +
    "\135\uff5a\136\uff5a\137\uff5a\140\uff5a\141\uff5a\142\uff5a\143" +
    "\uff5a\144\uff5a\145\uff5a\001\002\000\166\024\uff5f\025\uff5f" +
    "\026\uff5f\027\uff5f\033\uff5f\034\uff5f\036\uff5f\041\uff5f\042" +
    "\uff5f\043\uff5f\046\uff5f\047\uff5f\057\uff5f\060\uff5f\061\uff5f" +
    "\062\uff5f\063\uff5f\064\uff5f\065\uff5f\066\uff5f\067\uff5f\071" +
    "\uff5f\072\uff5f\073\uff5f\074\uff5f\075\uff5f\076\uff5f\077\uff5f" +
    "\101\uff5f\102\uff5f\103\uff5f\104\uff5f\105\uff5f\106\uff5f\107" +
    "\uff5f\110\uff5f\111\uff5f\112\uff5f\113\uff5f\114\uff5f\116\uff5f" +
    "\120\uff5f\121\uff5f\124\uff5f\125\uff5f\126\uff5f\130\uff5f\132" +
    "\uff5f\134\uff5f\135\uff5f\136\uff5f\137\uff5f\140\uff5f\141\uff5f" +
    "\142\uff5f\143\uff5f\144\uff5f\145\uff5f\001\002\000\166\024" +
    "\uff68\025\uff68\026\uff68\027\uff68\033\uff68\034\uff68\036\uff68" +
    "\041\uff68\042\uff68\043\uff68\046\uff68\047\uff68\057\uff68\060" +
    "\uff68\061\uff68\062\uff68\063\uff68\064\uff68\065\uff68\066\uff68" +
    "\067\uff68\071\uff68\072\uff68\073\uff68\074\uff68\075\uff68\076" +
    "\uff68\077\uff68\101\uff68\102\uff68\103\uff68\104\uff68\105\uff68" +
    "\106\uff68\107\uff68\110\uff68\111\uff68\112\uff68\113\uff68\114" +
    "\uff68\116\uff68\120\uff68\121\uff68\124\uff68\125\uff68\126\uff68" +
    "\130\uff68\132\uff68\134\uff68\135\uff68\136\uff68\137\uff68\140" +
    "\uff68\141\uff68\142\uff68\143\uff68\144\uff68\145\uff68\001\002" +
    "\000\166\024\uff65\025\uff65\026\uff65\027\uff65\033\uff65\034" +
    "\uff65\036\uff65\041\uff65\042\uff65\043\uff65\046\uff65\047\uff65" +
    "\057\uff65\060\uff65\061\uff65\062\uff65\063\uff65\064\uff65\065" +
    "\uff65\066\uff65\067\uff65\071\uff65\072\uff65\073\uff65\074\uff65" +
    "\075\uff65\076\uff65\077\uff65\101\uff65\102\uff65\103\uff65\104" +
    "\uff65\105\uff65\106\uff65\107\uff65\110\uff65\111\uff65\112\uff65" +
    "\113\uff65\114\uff65\116\uff65\120\uff65\121\uff65\124\uff65\125" +
    "\uff65\126\uff65\130\uff65\132\uff65\134\uff65\135\uff65\136\uff65" +
    "\137\uff65\140\uff65\141\uff65\142\uff65\143\uff65\144\uff65\145" +
    "\uff65\001\002\000\166\024\uff5d\025\uff5d\026\uff5d\027\uff5d" +
    "\033\uff5d\034\uff5d\036\uff5d\041\uff5d\042\uff5d\043\uff5d\046" +
    "\uff5d\047\uff5d\057\uff5d\060\uff5d\061\uff5d\062\uff5d\063\uff5d" +
    "\064\uff5d\065\uff5d\066\uff5d\067\uff5d\071\uff5d\072\uff5d\073" +
    "\uff5d\074\uff5d\075\uff5d\076\uff5d\077\uff5d\101\uff5d\102\uff5d" +
    "\103\uff5d\104\uff5d\105\uff5d\106\uff5d\107\uff5d\110\uff5d\111" +
    "\uff5d\112\uff5d\113\uff5d\114\uff5d\116\uff5d\120\uff5d\121\uff5d" +
    "\124\uff5d\125\uff5d\126\uff5d\130\uff5d\132\uff5d\134\uff5d\135" +
    "\uff5d\136\uff5d\137\uff5d\140\uff5d\141\uff5d\142\uff5d\143\uff5d" +
    "\144\uff5d\145\uff5d\001\002\000\166\024\uff63\025\uff63\026" +
    "\uff63\027\uff63\033\uff63\034\uff63\036\uff63\041\uff63\042\uff63" +
    "\043\uff63\046\uff63\047\uff63\057\uff63\060\uff63\061\uff63\062" +
    "\uff63\063\uff63\064\uff63\065\uff63\066\uff63\067\uff63\071\uff63" +
    "\072\uff63\073\uff63\074\uff63\075\uff63\076\uff63\077\uff63\101" +
    "\uff63\102\uff63\103\uff63\104\uff63\105\uff63\106\uff63\107\uff63" +
    "\110\uff63\111\uff63\112\uff63\113\uff63\114\uff63\116\uff63\120" +
    "\uff63\121\uff63\124\uff63\125\uff63\126\uff63\130\uff63\132\uff63" +
    "\134\uff63\135\uff63\136\uff63\137\uff63\140\uff63\141\uff63\142" +
    "\uff63\143\uff63\144\uff63\145\uff63\001\002\000\166\024\uff5b" +
    "\025\uff5b\026\uff5b\027\uff5b\033\uff5b\034\uff5b\036\uff5b\041" +
    "\uff5b\042\uff5b\043\uff5b\046\uff5b\047\uff5b\057\uff5b\060\uff5b" +
    "\061\uff5b\062\uff5b\063\uff5b\064\uff5b\065\uff5b\066\uff5b\067" +
    "\uff5b\071\uff5b\072\uff5b\073\uff5b\074\uff5b\075\uff5b\076\uff5b" +
    "\077\uff5b\101\uff5b\102\uff5b\103\uff5b\104\uff5b\105\uff5b\106" +
    "\uff5b\107\uff5b\110\uff5b\111\uff5b\112\uff5b\113\uff5b\114\uff5b" +
    "\116\uff5b\120\uff5b\121\uff5b\124\uff5b\125\uff5b\126\uff5b\130" +
    "\uff5b\132\uff5b\134\uff5b\135\uff5b\136\uff5b\137\uff5b\140\uff5b" +
    "\141\uff5b\142\uff5b\143\uff5b\144\uff5b\145\uff5b\001\002\000" +
    "\166\024\uff5e\025\uff5e\026\uff5e\027\uff5e\033\uff5e\034\uff5e" +
    "\036\uff5e\041\uff5e\042\uff5e\043\uff5e\046\uff5e\047\uff5e\057" +
    "\uff5e\060\uff5e\061\uff5e\062\uff5e\063\uff5e\064\uff5e\065\uff5e" +
    "\066\uff5e\067\uff5e\071\uff5e\072\uff5e\073\uff5e\074\uff5e\075" +
    "\uff5e\076\uff5e\077\uff5e\101\uff5e\102\uff5e\103\uff5e\104\uff5e" +
    "\105\uff5e\106\uff5e\107\uff5e\110\uff5e\111\uff5e\112\uff5e\113" +
    "\uff5e\114\uff5e\116\uff5e\120\uff5e\121\uff5e\124\uff5e\125\uff5e" +
    "\126\uff5e\130\uff5e\132\uff5e\134\uff5e\135\uff5e\136\uff5e\137" +
    "\uff5e\140\uff5e\141\uff5e\142\uff5e\143\uff5e\144\uff5e\145\uff5e" +
    "\001\002\000\166\024\uff69\025\uff69\026\uff69\027\uff69\033" +
    "\uff69\034\uff69\036\uff69\041\uff69\042\uff69\043\uff69\046\uff69" +
    "\047\uff69\057\uff69\060\uff69\061\uff69\062\uff69\063\uff69\064" +
    "\uff69\065\uff69\066\uff69\067\uff69\071\uff69\072\uff69\073\uff69" +
    "\074\uff69\075\uff69\076\uff69\077\uff69\101\uff69\102\uff69\103" +
    "\uff69\104\uff69\105\uff69\106\uff69\107\uff69\110\uff69\111\uff69" +
    "\112\uff69\113\uff69\114\uff69\116\uff69\120\uff69\121\uff69\124" +
    "\uff69\125\uff69\126\uff69\130\uff69\132\uff69\134\uff69\135\uff69" +
    "\136\uff69\137\uff69\140\uff69\141\uff69\142\uff69\143\uff69\144" +
    "\uff69\145\uff69\001\002\000\166\024\uff64\025\uff64\026\uff64" +
    "\027\uff64\033\uff64\034\uff64\036\uff64\041\uff64\042\uff64\043" +
    "\uff64\046\uff64\047\uff64\057\uff64\060\uff64\061\uff64\062\uff64" +
    "\063\uff64\064\uff64\065\uff64\066\uff64\067\uff64\071\uff64\072" +
    "\uff64\073\uff64\074\uff64\075\uff64\076\uff64\077\uff64\101\uff64" +
    "\102\uff64\103\uff64\104\uff64\105\uff64\106\uff64\107\uff64\110" +
    "\uff64\111\uff64\112\uff64\113\uff64\114\uff64\116\uff64\120\uff64" +
    "\121\uff64\124\uff64\125\uff64\126\uff64\130\uff64\132\uff64\134" +
    "\uff64\135\uff64\136\uff64\137\uff64\140\uff64\141\uff64\142\uff64" +
    "\143\uff64\144\uff64\145\uff64\001\002\000\166\024\uff5c\025" +
    "\uff5c\026\uff5c\027\uff5c\033\uff5c\034\uff5c\036\uff5c\041\uff5c" +
    "\042\uff5c\043\uff5c\046\uff5c\047\uff5c\057\uff5c\060\uff5c\061" +
    "\uff5c\062\uff5c\063\uff5c\064\uff5c\065\uff5c\066\uff5c\067\uff5c" +
    "\071\uff5c\072\uff5c\073\uff5c\074\uff5c\075\uff5c\076\uff5c\077" +
    "\uff5c\101\uff5c\102\uff5c\103\uff5c\104\uff5c\105\uff5c\106\uff5c" +
    "\107\uff5c\110\uff5c\111\uff5c\112\uff5c\113\uff5c\114\uff5c\116" +
    "\uff5c\120\uff5c\121\uff5c\124\uff5c\125\uff5c\126\uff5c\130\uff5c" +
    "\132\uff5c\134\uff5c\135\uff5c\136\uff5c\137\uff5c\140\uff5c\141" +
    "\uff5c\142\uff5c\143\uff5c\144\uff5c\145\uff5c\001\002\000\166" +
    "\024\uff67\025\uff67\026\uff67\027\uff67\033\uff67\034\uff67\036" +
    "\uff67\041\uff67\042\uff67\043\uff67\046\uff67\047\uff67\057\uff67" +
    "\060\uff67\061\uff67\062\uff67\063\uff67\064\uff67\065\uff67\066" +
    "\uff67\067\uff67\071\uff67\072\uff67\073\uff67\074\uff67\075\uff67" +
    "\076\uff67\077\uff67\101\uff67\102\uff67\103\uff67\104\uff67\105" +
    "\uff67\106\uff67\107\uff67\110\uff67\111\uff67\112\uff67\113\uff67" +
    "\114\uff67\116\uff67\120\uff67\121\uff67\124\uff67\125\uff67\126" +
    "\uff67\130\uff67\132\uff67\134\uff67\135\uff67\136\uff67\137\uff67" +
    "\140\uff67\141\uff67\142\uff67\143\uff67\144\uff67\145\uff67\001" +
    "\002\000\166\024\uff66\025\uff66\026\uff66\027\uff66\033\uff66" +
    "\034\uff66\036\uff66\041\uff66\042\uff66\043\uff66\046\uff66\047" +
    "\uff66\057\uff66\060\uff66\061\uff66\062\uff66\063\uff66\064\uff66" +
    "\065\uff66\066\uff66\067\uff66\071\uff66\072\uff66\073\uff66\074" +
    "\uff66\075\uff66\076\uff66\077\uff66\101\uff66\102\uff66\103\uff66" +
    "\104\uff66\105\uff66\106\uff66\107\uff66\110\uff66\111\uff66\112" +
    "\uff66\113\uff66\114\uff66\116\uff66\120\uff66\121\uff66\124\uff66" +
    "\125\uff66\126\uff66\130\uff66\132\uff66\134\uff66\135\uff66\136" +
    "\uff66\137\uff66\140\uff66\141\uff66\142\uff66\143\uff66\144\uff66" +
    "\145\uff66\001\002\000\232\004\uff58\005\uff58\006\uff58\007" +
    "\uff58\010\uff58\011\uff58\012\uff58\013\uff58\014\uff58\015\uff58" +
    "\016\uff58\017\uff58\020\uff58\021\uff58\022\uff58\024\uff58\025" +
    "\uff58\026\uff58\027\uff58\030\uff58\033\uff58\034\uff58\036\uff58" +
    "\041\uff58\042\uff58\043\uff58\044\uff58\046\uff58\047\uff58\057" +
    "\uff58\060\uff58\061\uff58\062\uff58\063\uff58\064\uff58\065\uff58" +
    "\066\uff58\067\uff58\071\uff58\072\uff58\073\uff58\074\uff58\075" +
    "\uff58\076\uff58\077\uff58\101\uff58\102\uff58\103\uff58\104\uff58" +
    "\105\uff58\106\uff58\107\uff58\110\uff58\111\uff58\112\uff58\113" +
    "\uff58\114\uff58\116\uff58\120\uff58\121\uff58\123\152\124\uff58" +
    "\125\uff58\126\uff58\130\uff58\132\uff58\134\uff58\135\uff58\136" +
    "\uff58\137\uff58\140\uff58\141\uff58\142\uff58\143\uff58\144\uff58" +
    "\145\uff58\001\002\000\166\024\uff60\025\uff60\026\uff60\027" +
    "\uff60\033\uff60\034\uff60\036\uff60\041\uff60\042\uff60\043\uff60" +
    "\046\uff60\047\uff60\057\uff60\060\uff60\061\uff60\062\uff60\063" +
    "\uff60\064\uff60\065\uff60\066\uff60\067\uff60\071\uff60\072\uff60" +
    "\073\uff60\074\uff60\075\uff60\076\uff60\077\uff60\101\uff60\102" +
    "\uff60\103\uff60\104\uff60\105\uff60\106\uff60\107\uff60\110\uff60" +
    "\111\uff60\112\uff60\113\uff60\114\uff60\116\uff60\120\uff60\121" +
    "\uff60\124\uff60\125\uff60\126\uff60\130\uff60\132\uff60\134\uff60" +
    "\135\uff60\136\uff60\137\uff60\140\uff60\141\uff60\142\uff60\143" +
    "\uff60\144\uff60\145\uff60\001\002\000\036\033\145\036\111" +
    "\042\120\062\133\067\131\074\071\103\126\132\074\136" +
    "\103\141\112\142\101\143\067\144\011\145\117\001\002" +
    "\000\166\024\uff6b\025\uff6b\026\uff6b\027\uff6b\033\uff6b\034" +
    "\uff6b\036\uff6b\041\uff6b\042\uff6b\043\uff6b\046\uff6b\047\uff6b" +
    "\057\uff6b\060\uff6b\061\uff6b\062\uff6b\063\uff6b\064\uff6b\065" +
    "\uff6b\066\uff6b\067\uff6b\071\uff6b\072\uff6b\073\uff6b\074\uff6b" +
    "\075\uff6b\076\uff6b\077\uff6b\101\uff6b\102\uff6b\103\uff6b\104" +
    "\uff6b\105\uff6b\106\uff6b\107\uff6b\110\uff6b\111\uff6b\112\uff6b" +
    "\113\uff6b\114\uff6b\116\uff6b\120\uff6b\121\uff6b\124\uff6b\125" +
    "\uff6b\126\uff6b\130\uff6b\132\uff6b\134\uff6b\135\uff6b\136\uff6b" +
    "\137\uff6b\140\uff6b\141\uff6b\142\uff6b\143\uff6b\144\uff6b\145" +
    "\uff6b\001\002\000\236\004\uff44\005\uff44\006\uff44\007\uff44" +
    "\010\uff44\011\uff44\012\uff44\013\uff44\014\uff44\015\uff44\016" +
    "\uff44\017\uff44\020\uff44\021\uff44\022\uff44\024\uff44\025\uff44" +
    "\026\uff44\027\uff44\030\uff44\033\uff44\034\uff44\036\uff44\041" +
    "\uff44\042\uff44\043\uff44\044\uff44\045\uff44\046\uff44\047\uff44" +
    "\057\uff44\060\uff44\061\uff44\062\uff44\063\uff44\064\uff44\065" +
    "\uff44\066\uff44\067\uff44\070\uff44\071\uff44\072\uff44\073\uff44" +
    "\074\uff44\075\uff44\076\uff44\077\uff44\101\uff44\102\uff44\103" +
    "\uff44\104\uff44\105\uff44\106\uff44\107\uff44\110\uff44\111\uff44" +
    "\112\uff44\113\uff44\114\uff44\116\uff44\120\uff44\121\uff44\123" +
    "\uff44\124\uff44\125\uff44\126\uff44\130\uff44\132\uff44\134\uff44" +
    "\135\uff44\136\uff44\137\uff44\140\uff44\141\uff44\142\uff44\143" +
    "\uff44\144\uff44\145\uff44\001\002\000\162\024\uff85\025\uff85" +
    "\027\uff85\033\uff85\034\uff85\036\uff85\041\uff85\042\uff85\043" +
    "\uff85\046\uff85\047\uff85\057\uff85\060\uff85\061\uff85\062\uff85" +
    "\063\uff85\064\uff85\065\uff85\066\uff85\067\uff85\071\uff85\072" +
    "\uff85\073\uff85\074\uff85\075\uff85\076\uff85\077\170\101\uff85" +
    "\102\uff85\103\uff85\104\uff85\105\uff85\106\uff85\107\uff85\110" +
    "\uff85\111\uff85\112\uff85\113\uff85\114\uff85\116\uff85\120\167" +
    "\124\uff85\125\uff85\126\uff85\130\uff85\132\uff85\134\uff85\135" +
    "\uff85\136\uff85\137\uff85\140\uff85\141\uff85\142\uff85\143\uff85" +
    "\144\uff85\145\uff85\001\002\000\162\024\uff88\025\uff88\027" +
    "\uff88\033\uff88\034\uff88\036\uff88\041\uff88\042\uff88\043\uff88" +
    "\046\uff88\047\uff88\057\uff88\060\uff88\061\uff88\062\uff88\063" +
    "\uff88\064\uff88\065\uff88\066\uff88\067\uff88\071\uff88\072\uff88" +
    "\073\uff88\074\uff88\075\uff88\076\uff88\077\170\101\uff88\102" +
    "\uff88\103\uff88\104\uff88\105\uff88\106\uff88\107\uff88\110\uff88" +
    "\111\uff88\112\uff88\113\uff88\114\uff88\116\uff88\120\167\124" +
    "\uff88\125\uff88\126\uff88\130\uff88\132\uff88\134\uff88\135\uff88" +
    "\136\uff88\137\uff88\140\uff88\141\uff88\142\uff88\143\uff88\144" +
    "\uff88\145\uff88\001\002\000\162\024\uff71\025\uff71\027\uff71" +
    "\033\uff71\034\uff71\036\uff71\041\uff71\042\uff71\043\uff71\046" +
    "\uff71\047\uff71\057\uff71\060\uff71\061\uff71\062\uff71\063\uff71" +
    "\064\uff71\065\uff71\066\uff71\067\uff71\071\uff71\072\uff71\073" +
    "\uff71\074\uff71\075\uff71\076\uff71\077\uff71\101\uff71\102\uff71" +
    "\103\uff71\104\uff71\105\uff71\106\uff71\107\uff71\110\uff71\111" +
    "\uff71\112\uff71\113\uff71\114\uff71\116\uff71\120\uff71\124\uff71" +
    "\125\uff71\126\uff71\130\uff71\132\uff71\134\uff71\135\uff71\136" +
    "\uff71\137\uff71\140\uff71\141\uff71\142\uff71\143\uff71\144\uff71" +
    "\145\uff71\001\002\000\004\047\245\001\002\000\114\024" +
    "\uff9e\025\uff9e\033\uff9e\034\uff9e\036\uff9e\041\uff9e\042\uff9e" +
    "\043\uff9e\061\uff9e\062\uff9e\066\uff9e\067\uff9e\071\uff9e\072" +
    "\uff9e\073\uff9e\074\uff9e\101\uff9e\102\uff9e\103\uff9e\104\uff9e" +
    "\113\uff9e\114\uff9e\124\uff9e\125\uff9e\126\uff9e\130\uff9e\132" +
    "\uff9e\134\uff9e\135\uff9e\136\uff9e\137\uff9e\140\uff9e\141\uff9e" +
    "\142\uff9e\143\uff9e\144\uff9e\145\uff9e\001\002\000\102\024" +
    "\142\025\115\033\145\036\111\042\120\043\134\061\072" +
    "\062\133\066\073\067\131\071\136\072\114\073\143\074" +
    "\071\101\123\102\130\103\126\104\105\113\107\114\124" +
    "\130\150\132\074\134\132\135\065\136\103\137\116\140" +
    "\141\141\112\142\101\143\067\144\011\145\117\001\002" +
    "\000\010\034\251\041\250\067\062\001\002\000\114\024" +
    "\uffac\025\uffac\033\uffac\034\uffac\036\uffac\041\uffac\042\uffac" +
    "\043\uffac\061\uffac\062\uffac\066\uffac\067\uffac\071\uffac\072" +
    "\uffac\073\uffac\074\uffac\101\uffac\102\uffac\103\uffac\104\uffac" +
    "\113\uffac\114\uffac\124\uffac\125\uffac\126\uffac\130\uffac\132" +
    "\uffac\134\uffac\135\uffac\136\uffac\137\uffac\140\uffac\141\uffac" +
    "\142\uffac\143\uffac\144\uffac\145\uffac\001\002\000\006\141" +
    "\013\144\011\001\002\000\102\024\142\025\115\033\145" +
    "\036\111\042\120\043\134\061\072\062\133\066\073\067" +
    "\131\071\136\072\114\073\143\074\071\101\123\102\130" +
    "\103\126\104\105\113\107\114\124\130\150\132\074\134" +
    "\132\135\065\136\103\137\116\140\141\141\112\142\101" +
    "\143\067\144\011\145\117\001\002\000\114\024\uffa4\025" +
    "\uffa4\033\uffa4\034\uffa4\036\uffa4\041\uffa4\042\uffa4\043\uffa4" +
    "\061\uffa4\062\uffa4\066\uffa4\067\uffa4\071\uffa4\072\uffa4\073" +
    "\uffa4\074\uffa4\101\uffa4\102\uffa4\103\uffa4\104\uffa4\113\uffa4" +
    "\114\uffa4\124\uffa4\125\uffa4\126\uffa4\130\uffa4\132\uffa4\134" +
    "\uffa4\135\uffa4\136\uffa4\137\uffa4\140\uffa4\141\uffa4\142\uffa4" +
    "\143\uffa4\144\uffa4\145\uffa4\001\002\000\114\024\uffa5\025" +
    "\uffa5\033\uffa5\034\uffa5\036\uffa5\041\uffa5\042\uffa5\043\uffa5" +
    "\061\uffa5\062\uffa5\066\uffa5\067\uffa5\071\uffa5\072\uffa5\073" +
    "\uffa5\074\uffa5\101\uffa5\102\uffa5\103\uffa5\104\uffa5\113\uffa5" +
    "\114\uffa5\124\uffa5\125\uffa5\126\uffa5\130\uffa5\132\uffa5\134" +
    "\uffa5\135\uffa5\136\uffa5\137\uffa5\140\uffa5\141\uffa5\142\uffa5" +
    "\143\uffa5\144\uffa5\145\uffa5\001\002\000\114\024\uffab\025" +
    "\uffab\033\uffab\034\uffab\036\uffab\041\uffab\042\uffab\043\uffab" +
    "\061\uffab\062\uffab\066\uffab\067\uffab\071\uffab\072\uffab\073" +
    "\uffab\074\uffab\101\uffab\102\uffab\103\uffab\104\uffab\113\uffab" +
    "\114\uffab\124\uffab\125\uffab\126\uffab\130\uffab\132\uffab\134" +
    "\uffab\135\uffab\136\uffab\137\uffab\140\uffab\141\uffab\142\uffab" +
    "\143\uffab\144\uffab\145\uffab\001\002\000\260\002\uffa8\004" +
    "\uffa8\005\uffa8\006\uffa8\007\uffa8\010\uffa8\011\uffa8\012\uffa8" +
    "\013\uffa8\014\uffa8\015\uffa8\016\uffa8\017\uffa8\020\uffa8\021" +
    "\uffa8\022\uffa8\023\uffa8\024\uffa8\025\uffa8\026\uffa8\027\uffa8" +
    "\030\uffa8\032\uffa8\033\uffa8\034\uffa8\036\uffa8\037\uffa8\041" +
    "\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8\046\uffa8\047\uffa8" +
    "\054\uffa8\056\uffa8\057\uffa8\060\uffa8\061\uffa8\062\uffa8\063" +
    "\uffa8\064\uffa8\065\uffa8\066\uffa8\067\uffa8\070\uffa8\071\uffa8" +
    "\072\uffa8\073\uffa8\074\uffa8\075\uffa8\076\uffa8\077\uffa8\101" +
    "\uffa8\102\uffa8\103\uffa8\104\uffa8\105\uffa8\106\uffa8\107\uffa8" +
    "\110\uffa8\111\uffa8\112\uffa8\113\uffa8\114\uffa8\116\uffa8\120" +
    "\uffa8\121\uffa8\122\uffa8\123\uffa8\124\uffa8\125\uffa8\126\uffa8" +
    "\127\uffa8\130\uffa8\131\uffa8\132\uffa8\134\uffa8\135\uffa8\136" +
    "\uffa8\137\uffa8\140\uffa8\141\uffa8\142\uffa8\143\uffa8\144\uffa8" +
    "\145\uffa8\001\002\000\162\024\uff6f\025\uff6f\027\uff6f\033" +
    "\uff6f\034\uff6f\036\uff6f\041\uff6f\042\uff6f\043\uff6f\046\uff6f" +
    "\047\uff6f\057\uff6f\060\uff6f\061\uff6f\062\uff6f\063\uff6f\064" +
    "\uff6f\065\uff6f\066\uff6f\067\uff6f\071\uff6f\072\uff6f\073\uff6f" +
    "\074\uff6f\075\uff6f\076\uff6f\077\uff6f\101\uff6f\102\uff6f\103" +
    "\uff6f\104\uff6f\105\uff6f\106\uff6f\107\uff6f\110\uff6f\111\uff6f" +
    "\112\uff6f\113\uff6f\114\uff6f\116\uff6f\120\uff6f\124\uff6f\125" +
    "\uff6f\126\uff6f\130\uff6f\132\uff6f\134\uff6f\135\uff6f\136\uff6f" +
    "\137\uff6f\140\uff6f\141\uff6f\142\uff6f\143\uff6f\144\uff6f\145" +
    "\uff6f\001\002\000\006\141\013\144\011\001\002\000\006" +
    "\141\013\144\011\001\002\000\006\141\013\144\011\001" +
    "\002\000\006\040\305\041\023\001\002\000\010\034\251" +
    "\041\265\067\062\001\002\000\114\024\uff9b\025\uff9b\033" +
    "\uff9b\034\uff9b\036\uff9b\041\uff9b\042\uff9b\043\uff9b\061\uff9b" +
    "\062\uff9b\066\uff9b\067\uff9b\071\uff9b\072\uff9b\073\uff9b\074" +
    "\uff9b\101\uff9b\102\uff9b\103\uff9b\104\uff9b\113\uff9b\114\uff9b" +
    "\124\uff9b\125\uff9b\126\uff9b\130\uff9b\132\uff9b\134\uff9b\135" +
    "\uff9b\136\uff9b\137\uff9b\140\uff9b\141\uff9b\142\uff9b\143\uff9b" +
    "\144\uff9b\145\uff9b\001\002\000\014\042\266\051\270\117" +
    "\271\141\013\144\011\001\002\000\006\141\013\144\011" +
    "\001\002\000\006\040\300\041\023\001\002\000\006\141" +
    "\013\144\011\001\002\000\006\141\013\144\011\001\002" +
    "\000\006\040\273\041\023\001\002\000\102\024\142\025" +
    "\115\033\145\036\111\042\120\043\134\061\072\062\133" +
    "\066\073\067\131\071\136\072\114\073\143\074\071\101" +
    "\123\102\130\103\126\104\105\113\107\114\124\130\150" +
    "\132\074\134\132\135\065\136\103\137\116\140\141\141" +
    "\112\142\101\143\067\144\011\145\117\001\002\000\016" +
    "\034\uffb6\041\uffb6\067\uffb6\124\uffb6\125\uffb6\126\uffb6\001" +
    "\002\000\006\040\276\041\023\001\002\000\102\024\142" +
    "\025\115\033\145\036\111\042\120\043\134\061\072\062" +
    "\133\066\073\067\131\071\136\072\114\073\143\074\071" +
    "\101\123\102\130\103\126\104\105\113\107\114\124\130" +
    "\150\132\074\134\132\135\065\136\103\137\116\140\141" +
    "\141\112\142\101\143\067\144\011\145\117\001\002\000" +
    "\016\034\uffb4\041\uffb4\067\uffb4\124\uffb4\125\uffb4\126\uffb4" +
    "\001\002\000\102\024\142\025\115\033\145\036\111\042" +
    "\120\043\134\061\072\062\133\066\073\067\131\071\136" +
    "\072\114\073\143\074\071\101\123\102\130\103\126\104" +
    "\105\113\107\114\124\130\150\132\074\134\132\135\065" +
    "\136\103\137\116\140\141\141\112\142\101\143\067\144" +
    "\011\145\117\001\002\000\016\034\uffb3\041\uffb3\067\uffb3" +
    "\124\uffb3\125\uffb3\126\uffb3\001\002\000\006\040\303\041" +
    "\023\001\002\000\102\024\142\025\115\033\145\036\111" +
    "\042\120\043\134\061\072\062\133\066\073\067\131\071" +
    "\136\072\114\073\143\074\071\101\123\102\130\103\126" +
    "\104\105\113\107\114\124\130\150\132\074\134\132\135" +
    "\065\136\103\137\116\140\141\141\112\142\101\143\067" +
    "\144\011\145\117\001\002\000\016\034\uffb5\041\uffb5\067" +
    "\uffb5\124\uffb5\125\uffb5\126\uffb5\001\002\000\102\024\142" +
    "\025\115\033\145\036\111\042\120\043\134\061\072\062" +
    "\133\066\073\067\131\071\136\072\114\073\143\074\071" +
    "\101\123\102\130\103\126\104\105\113\107\114\124\130" +
    "\150\132\074\134\132\135\065\136\103\137\116\140\141" +
    "\141\112\142\101\143\067\144\011\145\117\001\002\000" +
    "\016\034\uffaf\041\uffaf\067\uffaf\124\uffaf\125\uffaf\126\uffaf" +
    "\001\002\000\006\040\310\041\023\001\002\000\102\024" +
    "\142\025\115\033\145\036\111\042\120\043\134\061\072" +
    "\062\133\066\073\067\131\071\136\072\114\073\143\074" +
    "\071\101\123\102\130\103\126\104\105\113\107\114\124" +
    "\130\150\132\074\134\132\135\065\136\103\137\116\140" +
    "\141\141\112\142\101\143\067\144\011\145\117\001\002" +
    "\000\016\034\uffb0\041\uffb0\067\uffb0\124\uffb0\125\uffb0\126" +
    "\uffb0\001\002\000\006\040\313\041\023\001\002\000\102" +
    "\024\142\025\115\033\145\036\111\042\120\043\134\061" +
    "\072\062\133\066\073\067\131\071\136\072\114\073\143" +
    "\074\071\101\123\102\130\103\126\104\105\113\107\114" +
    "\124\130\150\132\074\134\132\135\065\136\103\137\116" +
    "\140\141\141\112\142\101\143\067\144\011\145\117\001" +
    "\002\000\016\034\uffb2\041\uffb2\067\uffb2\124\uffb2\125\uffb2" +
    "\126\uffb2\001\002\000\006\040\316\041\023\001\002\000" +
    "\102\024\142\025\115\033\145\036\111\042\120\043\134" +
    "\061\072\062\133\066\073\067\131\071\136\072\114\073" +
    "\143\074\071\101\123\102\130\103\126\104\105\113\107" +
    "\114\124\130\150\132\074\134\132\135\065\136\103\137" +
    "\116\140\141\141\112\142\101\143\067\144\011\145\117" +
    "\001\002\000\016\034\uffb1\041\uffb1\067\uffb1\124\uffb1\125" +
    "\uffb1\126\uffb1\001\002\000\230\004\uff43\005\uff43\006\uff43" +
    "\007\uff43\010\uff43\011\uff43\012\uff43\013\uff43\014\uff43\015" +
    "\uff43\016\uff43\017\uff43\020\uff43\021\uff43\022\uff43\024\uff43" +
    "\025\uff43\026\uff43\027\uff43\030\uff43\033\uff43\036\uff43\040" +
    "\uffb8\041\uffb8\042\uff43\043\uff43\044\uff43\045\uff43\047\uff43" +
    "\057\uff43\060\uff43\061\uff43\062\uff43\063\uff43\064\uff43\065" +
    "\uff43\066\uff43\067\uff43\070\uff43\071\uff43\072\uff43\073\uff43" +
    "\074\uff43\075\uff43\076\uff43\077\uff43\101\uff43\102\uff43\103" +
    "\uff43\104\uff43\105\uff43\106\uff43\107\uff43\110\uff43\111\uff43" +
    "\112\uff43\113\uff43\114\uff43\116\uff43\120\uff43\121\uff43\123" +
    "\uff43\124\uff43\130\uff43\132\uff43\134\uff43\135\uff43\136\uff43" +
    "\137\uff43\140\uff43\141\uff43\142\uff43\143\uff43\144\uff43\145" +
    "\uff43\001\002\000\010\070\326\141\013\144\011\001\002" +
    "\000\012\034\251\041\265\067\062\124\324\001\002\000" +
    "\004\124\325\001\002\000\236\004\uff40\005\uff40\006\uff40" +
    "\007\uff40\010\uff40\011\uff40\012\uff40\013\uff40\014\uff40\015" +
    "\uff40\016\uff40\017\uff40\020\uff40\021\uff40\022\uff40\024\uff40" +
    "\025\uff40\026\uff40\027\uff40\030\uff40\033\uff40\034\uff40\036" +
    "\uff40\041\uff40\042\uff40\043\uff40\044\uff40\045\uff40\046\uff40" +
    "\047\uff40\057\uff40\060\uff40\061\uff40\062\uff40\063\uff40\064" +
    "\uff40\065\uff40\066\uff40\067\uff40\070\uff40\071\uff40\072\uff40" +
    "\073\uff40\074\uff40\075\uff40\076\uff40\077\uff40\101\uff40\102" +
    "\uff40\103\uff40\104\uff40\105\uff40\106\uff40\107\uff40\110\uff40" +
    "\111\uff40\112\uff40\113\uff40\114\uff40\116\uff40\120\uff40\121" +
    "\uff40\123\uff40\124\uff40\125\uff40\126\uff40\130\uff40\132\uff40" +
    "\134\uff40\135\uff40\136\uff40\137\uff40\140\uff40\141\uff40\142" +
    "\uff40\143\uff40\144\uff40\145\uff40\001\002\000\236\004\uff41" +
    "\005\uff41\006\uff41\007\uff41\010\uff41\011\uff41\012\uff41\013" +
    "\uff41\014\uff41\015\uff41\016\uff41\017\uff41\020\uff41\021\uff41" +
    "\022\uff41\024\uff41\025\uff41\026\uff41\027\uff41\030\uff41\033" +
    "\uff41\034\uff41\036\uff41\041\uff41\042\uff41\043\uff41\044\uff41" +
    "\045\uff41\046\uff41\047\uff41\057\uff41\060\uff41\061\uff41\062" +
    "\uff41\063\uff41\064\uff41\065\uff41\066\uff41\067\uff41\070\uff41" +
    "\071\uff41\072\uff41\073\uff41\074\uff41\075\uff41\076\uff41\077" +
    "\uff41\101\uff41\102\uff41\103\uff41\104\uff41\105\uff41\106\uff41" +
    "\107\uff41\110\uff41\111\uff41\112\uff41\113\uff41\114\uff41\116" +
    "\uff41\120\uff41\121\uff41\123\uff41\124\uff41\125\uff41\126\uff41" +
    "\130\uff41\132\uff41\134\uff41\135\uff41\136\uff41\137\uff41\140" +
    "\uff41\141\uff41\142\uff41\143\uff41\144\uff41\145\uff41\001\002" +
    "\000\104\024\142\025\115\033\145\036\111\042\120\043" +
    "\134\061\072\062\133\066\073\067\131\071\136\072\114" +
    "\073\143\074\071\101\123\102\130\103\126\104\105\113" +
    "\107\114\124\125\uffa3\130\150\132\074\134\132\135\065" +
    "\136\103\137\116\140\141\141\112\142\101\143\067\144" +
    "\011\145\117\001\002\000\004\125\330\001\002\000\236" +
    "\004\uff53\005\uff53\006\uff53\007\uff53\010\uff53\011\uff53\012" +
    "\uff53\013\uff53\014\uff53\015\uff53\016\uff53\017\uff53\020\uff53" +
    "\021\uff53\022\uff53\024\uff53\025\uff53\026\uff53\027\uff53\030" +
    "\uff53\033\uff53\034\uff53\036\uff53\041\uff53\042\uff53\043\uff53" +
    "\044\uff53\045\uff53\046\uff53\047\uff53\057\uff53\060\uff53\061" +
    "\uff53\062\uff53\063\uff53\064\uff53\065\uff53\066\uff53\067\uff53" +
    "\070\uff53\071\uff53\072\uff53\073\uff53\074\uff53\075\uff53\076" +
    "\uff53\077\uff53\101\uff53\102\uff53\103\uff53\104\uff53\105\uff53" +
    "\106\uff53\107\uff53\110\uff53\111\uff53\112\uff53\113\uff53\114" +
    "\uff53\116\uff53\120\uff53\121\uff53\123\uff53\124\uff53\125\uff53" +
    "\126\uff53\130\uff53\132\uff53\134\uff53\135\uff53\136\uff53\137" +
    "\uff53\140\uff53\141\uff53\142\uff53\143\uff53\144\uff53\145\uff53" +
    "\001\002\000\162\024\uff87\025\uff87\027\uff87\033\uff87\034" +
    "\uff87\036\uff87\041\uff87\042\uff87\043\uff87\046\uff87\047\uff87" +
    "\057\uff87\060\uff87\061\uff87\062\uff87\063\uff87\064\uff87\065" +
    "\uff87\066\uff87\067\uff87\071\uff87\072\uff87\073\uff87\074\uff87" +
    "\075\uff87\076\uff87\077\170\101\uff87\102\uff87\103\uff87\104" +
    "\uff87\105\uff87\106\uff87\107\uff87\110\uff87\111\uff87\112\uff87" +
    "\113\uff87\114\uff87\116\uff87\120\167\124\uff87\125\uff87\126" +
    "\uff87\130\uff87\132\uff87\134\uff87\135\uff87\136\uff87\137\uff87" +
    "\140\uff87\141\uff87\142\uff87\143\uff87\144\uff87\145\uff87\001" +
    "\002\000\004\124\uffa6\001\002\000\162\024\uff84\025\uff84" +
    "\027\uff84\033\uff84\034\uff84\036\uff84\041\uff84\042\uff84\043" +
    "\uff84\046\uff84\047\uff84\057\uff84\060\uff84\061\uff84\062\uff84" +
    "\063\uff84\064\uff84\065\uff84\066\uff84\067\uff84\071\uff84\072" +
    "\uff84\073\uff84\074\uff84\075\uff84\076\uff84\077\170\101\uff84" +
    "\102\uff84\103\uff84\104\uff84\105\uff84\106\uff84\107\uff84\110" +
    "\uff84\111\uff84\112\uff84\113\uff84\114\uff84\116\uff84\120\167" +
    "\124\uff84\125\uff84\126\uff84\130\uff84\132\uff84\134\uff84\135" +
    "\uff84\136\uff84\137\uff84\140\uff84\141\uff84\142\uff84\143\uff84" +
    "\144\uff84\145\uff84\001\002\000\010\034\251\041\265\067" +
    "\062\001\002\000\114\024\uff9c\025\uff9c\033\uff9c\034\uff9c" +
    "\036\uff9c\041\uff9c\042\uff9c\043\uff9c\061\uff9c\062\uff9c\066" +
    "\uff9c\067\uff9c\071\uff9c\072\uff9c\073\uff9c\074\uff9c\101\uff9c" +
    "\102\uff9c\103\uff9c\104\uff9c\113\uff9c\114\uff9c\124\uff9c\125" +
    "\uff9c\126\uff9c\130\uff9c\132\uff9c\134\uff9c\135\uff9c\136\uff9c" +
    "\137\uff9c\140\uff9c\141\uff9c\142\uff9c\143\uff9c\144\uff9c\145" +
    "\uff9c\001\002\000\046\033\145\036\111\042\120\043\134" +
    "\061\072\062\133\066\073\067\131\074\071\103\126\132" +
    "\074\136\103\140\141\141\112\142\101\143\067\144\011" +
    "\145\117\001\002\000\046\033\145\036\111\042\120\043" +
    "\134\061\072\062\133\066\073\067\131\074\071\103\126" +
    "\132\074\136\103\140\141\141\112\142\101\143\067\144" +
    "\011\145\117\001\002\000\046\033\145\036\111\042\120" +
    "\043\134\061\072\062\133\066\073\067\131\074\071\103" +
    "\126\132\074\136\103\140\141\141\112\142\101\143\067" +
    "\144\011\145\117\001\002\000\046\033\145\036\111\042" +
    "\120\043\134\061\072\062\133\066\073\067\131\074\071" +
    "\103\126\132\074\136\103\140\141\141\112\142\101\143" +
    "\067\144\011\145\117\001\002\000\046\033\145\036\111" +
    "\042\120\043\134\061\072\062\133\066\073\067\131\074" +
    "\071\103\126\132\074\136\103\140\141\141\112\142\101" +
    "\143\067\144\011\145\117\001\002\000\046\033\145\036" +
    "\111\042\120\043\134\061\072\062\133\066\073\067\131" +
    "\074\071\103\126\132\074\136\103\140\141\141\112\142" +
    "\101\143\067\144\011\145\117\001\002\000\046\033\145" +
    "\036\111\042\120\043\134\061\072\062\133\066\073\067" +
    "\131\074\071\103\126\132\074\136\103\140\141\141\112" +
    "\142\101\143\067\144\011\145\117\001\002\000\046\033" +
    "\145\036\111\042\120\043\134\061\072\062\133\066\073" +
    "\067\131\074\071\103\126\132\074\136\103\140\141\141" +
    "\112\142\101\143\067\144\011\145\117\001\002\000\046" +
    "\033\145\036\111\042\120\043\134\061\072\062\133\066" +
    "\073\067\131\074\071\103\126\132\074\136\103\140\141" +
    "\141\112\142\101\143\067\144\011\145\117\001\002\000" +
    "\046\033\145\036\111\042\120\043\134\061\072\062\133" +
    "\066\073\067\131\074\071\103\126\132\074\136\103\140" +
    "\141\141\112\142\101\143\067\144\011\145\117\001\002" +
    "\000\046\033\145\036\111\042\120\043\134\061\072\062" +
    "\133\066\073\067\131\074\071\103\126\132\074\136\103" +
    "\140\141\141\112\142\101\143\067\144\011\145\117\001" +
    "\002\000\046\033\145\036\111\042\120\043\134\061\072" +
    "\062\133\066\073\067\131\074\071\103\126\132\074\136" +
    "\103\140\141\141\112\142\101\143\067\144\011\145\117" +
    "\001\002\000\162\024\uff80\025\uff80\027\uff80\033\uff80\034" +
    "\uff80\036\uff80\041\uff80\042\uff80\043\uff80\046\uff80\047\uff80" +
    "\057\uff80\060\uff80\061\uff80\062\uff80\063\uff80\064\uff80\065" +
    "\uff80\066\uff80\067\uff80\071\uff80\072\uff80\073\uff80\074\uff80" +
    "\075\uff80\076\uff80\077\170\101\uff80\102\uff80\103\uff80\104" +
    "\uff80\105\uff80\106\uff80\107\uff80\110\uff80\111\uff80\112\uff80" +
    "\113\uff80\114\uff80\116\uff80\120\167\124\uff80\125\uff80\126" +
    "\uff80\130\uff80\132\uff80\134\uff80\135\uff80\136\uff80\137\uff80" +
    "\140\uff80\141\uff80\142\uff80\143\uff80\144\uff80\145\uff80\001" +
    "\002\000\162\024\uff82\025\uff82\027\uff82\033\uff82\034\uff82" +
    "\036\uff82\041\uff82\042\uff82\043\uff82\046\uff82\047\uff82\057" +
    "\uff82\060\uff82\061\uff82\062\uff82\063\uff82\064\uff82\065\uff82" +
    "\066\uff82\067\uff82\071\uff82\072\uff82\073\uff82\074\uff82\075" +
    "\uff82\076\uff82\077\170\101\uff82\102\uff82\103\uff82\104\uff82" +
    "\105\uff82\106\uff82\107\uff82\110\uff82\111\uff82\112\uff82\113" +
    "\uff82\114\uff82\116\uff82\120\167\124\uff82\125\uff82\126\uff82" +
    "\130\uff82\132\uff82\134\uff82\135\uff82\136\uff82\137\uff82\140" +
    "\uff82\141\uff82\142\uff82\143\uff82\144\uff82\145\uff82\001\002" +
    "\000\162\024\uff7a\025\uff7a\027\uff7a\033\uff7a\034\uff7a\036" +
    "\uff7a\041\uff7a\042\uff7a\043\uff7a\046\uff7a\047\uff7a\057\uff7a" +
    "\060\uff7a\061\uff7a\062\uff7a\063\uff7a\064\uff7a\065\uff7a\066" +
    "\uff7a\067\uff7a\071\uff7a\072\uff7a\073\uff7a\074\uff7a\075\uff7a" +
    "\076\uff7a\077\170\101\uff7a\102\uff7a\103\uff7a\104\uff7a\105" +
    "\uff7a\106\uff7a\107\uff7a\110\uff7a\111\uff7a\112\uff7a\113\uff7a" +
    "\114\uff7a\116\uff7a\120\167\124\uff7a\125\uff7a\126\uff7a\130" +
    "\uff7a\132\uff7a\134\uff7a\135\uff7a\136\uff7a\137\uff7a\140\uff7a" +
    "\141\uff7a\142\uff7a\143\uff7a\144\uff7a\145\uff7a\001\002\000" +
    "\162\024\uff7f\025\uff7f\027\uff7f\033\uff7f\034\uff7f\036\uff7f" +
    "\041\uff7f\042\uff7f\043\uff7f\046\uff7f\047\uff7f\057\uff7f\060" +
    "\uff7f\061\uff7f\062\uff7f\063\uff7f\064\uff7f\065\uff7f\066\uff7f" +
    "\067\uff7f\071\uff7f\072\uff7f\073\uff7f\074\uff7f\075\uff7f\076" +
    "\uff7f\077\170\101\uff7f\102\uff7f\103\uff7f\104\uff7f\105\uff7f" +
    "\106\uff7f\107\uff7f\110\uff7f\111\uff7f\112\uff7f\113\uff7f\114" +
    "\uff7f\116\uff7f\120\167\124\uff7f\125\uff7f\126\uff7f\130\uff7f" +
    "\132\uff7f\134\uff7f\135\uff7f\136\uff7f\137\uff7f\140\uff7f\141" +
    "\uff7f\142\uff7f\143\uff7f\144\uff7f\145\uff7f\001\002\000\162" +
    "\024\uff78\025\uff78\027\uff78\033\uff78\034\uff78\036\uff78\041" +
    "\uff78\042\uff78\043\uff78\046\uff78\047\uff78\057\uff78\060\uff78" +
    "\061\uff78\062\uff78\063\uff78\064\uff78\065\uff78\066\uff78\067" +
    "\uff78\071\uff78\072\uff78\073\uff78\074\uff78\075\uff78\076\uff78" +
    "\077\170\101\uff78\102\uff78\103\uff78\104\uff78\105\uff78\106" +
    "\uff78\107\uff78\110\uff78\111\uff78\112\uff78\113\uff78\114\uff78" +
    "\116\uff78\120\167\124\uff78\125\uff78\126\uff78\130\uff78\132" +
    "\uff78\134\uff78\135\uff78\136\uff78\137\uff78\140\uff78\141\uff78" +
    "\142\uff78\143\uff78\144\uff78\145\uff78\001\002\000\162\024" +
    "\uff79\025\uff79\027\uff79\033\uff79\034\uff79\036\uff79\041\uff79" +
    "\042\uff79\043\uff79\046\uff79\047\uff79\057\uff79\060\uff79\061" +
    "\uff79\062\uff79\063\uff79\064\uff79\065\uff79\066\uff79\067\uff79" +
    "\071\uff79\072\uff79\073\uff79\074\uff79\075\uff79\076\uff79\077" +
    "\170\101\uff79\102\uff79\103\uff79\104\uff79\105\uff79\106\uff79" +
    "\107\uff79\110\uff79\111\uff79\112\uff79\113\uff79\114\uff79\116" +
    "\uff79\120\167\124\uff79\125\uff79\126\uff79\130\uff79\132\uff79" +
    "\134\uff79\135\uff79\136\uff79\137\uff79\140\uff79\141\uff79\142" +
    "\uff79\143\uff79\144\uff79\145\uff79\001\002\000\162\024\uff77" +
    "\025\uff77\027\uff77\033\uff77\034\uff77\036\uff77\041\uff77\042" +
    "\uff77\043\uff77\046\uff77\047\uff77\057\uff77\060\uff77\061\uff77" +
    "\062\uff77\063\uff77\064\uff77\065\uff77\066\uff77\067\uff77\071" +
    "\uff77\072\uff77\073\uff77\074\uff77\075\uff77\076\uff77\077\170" +
    "\101\uff77\102\uff77\103\uff77\104\uff77\105\uff77\106\uff77\107" +
    "\uff77\110\uff77\111\uff77\112\uff77\113\uff77\114\uff77\116\uff77" +
    "\120\167\124\uff77\125\uff77\126\uff77\130\uff77\132\uff77\134" +
    "\uff77\135\uff77\136\uff77\137\uff77\140\uff77\141\uff77\142\uff77" +
    "\143\uff77\144\uff77\145\uff77\001\002\000\162\024\uff7e\025" +
    "\uff7e\027\uff7e\033\uff7e\034\uff7e\036\uff7e\041\uff7e\042\uff7e" +
    "\043\uff7e\046\uff7e\047\uff7e\057\uff7e\060\uff7e\061\uff7e\062" +
    "\uff7e\063\uff7e\064\uff7e\065\uff7e\066\uff7e\067\uff7e\071\uff7e" +
    "\072\uff7e\073\uff7e\074\uff7e\075\uff7e\076\uff7e\077\170\101" +
    "\uff7e\102\uff7e\103\uff7e\104\uff7e\105\uff7e\106\uff7e\107\uff7e" +
    "\110\uff7e\111\uff7e\112\uff7e\113\uff7e\114\uff7e\116\uff7e\120" +
    "\167\124\uff7e\125\uff7e\126\uff7e\130\uff7e\132\uff7e\134\uff7e" +
    "\135\uff7e\136\uff7e\137\uff7e\140\uff7e\141\uff7e\142\uff7e\143" +
    "\uff7e\144\uff7e\145\uff7e\001\002\000\162\024\uff81\025\uff81" +
    "\027\uff81\033\uff81\034\uff81\036\uff81\041\uff81\042\uff81\043" +
    "\uff81\046\uff81\047\uff81\057\uff81\060\uff81\061\uff81\062\uff81" +
    "\063\uff81\064\uff81\065\uff81\066\uff81\067\uff81\071\uff81\072" +
    "\uff81\073\uff81\074\uff81\075\uff81\076\uff81\077\170\101\uff81" +
    "\102\uff81\103\uff81\104\uff81\105\uff81\106\uff81\107\uff81\110" +
    "\uff81\111\uff81\112\uff81\113\uff81\114\uff81\116\uff81\120\167" +
    "\124\uff81\125\uff81\126\uff81\130\uff81\132\uff81\134\uff81\135" +
    "\uff81\136\uff81\137\uff81\140\uff81\141\uff81\142\uff81\143\uff81" +
    "\144\uff81\145\uff81\001\002\000\162\024\uff7d\025\uff7d\027" +
    "\uff7d\033\uff7d\034\uff7d\036\uff7d\041\uff7d\042\uff7d\043\uff7d" +
    "\046\uff7d\047\uff7d\057\uff7d\060\uff7d\061\uff7d\062\uff7d\063" +
    "\uff7d\064\uff7d\065\uff7d\066\uff7d\067\uff7d\071\uff7d\072\uff7d" +
    "\073\uff7d\074\uff7d\075\uff7d\076\uff7d\077\170\101\uff7d\102" +
    "\uff7d\103\uff7d\104\uff7d\105\uff7d\106\uff7d\107\uff7d\110\uff7d" +
    "\111\uff7d\112\uff7d\113\uff7d\114\uff7d\116\uff7d\120\167\124" +
    "\uff7d\125\uff7d\126\uff7d\130\uff7d\132\uff7d\134\uff7d\135\uff7d" +
    "\136\uff7d\137\uff7d\140\uff7d\141\uff7d\142\uff7d\143\uff7d\144" +
    "\uff7d\145\uff7d\001\002\000\162\024\uff7c\025\uff7c\027\uff7c" +
    "\033\uff7c\034\uff7c\036\uff7c\041\uff7c\042\uff7c\043\uff7c\046" +
    "\uff7c\047\uff7c\057\uff7c\060\uff7c\061\uff7c\062\uff7c\063\uff7c" +
    "\064\uff7c\065\uff7c\066\uff7c\067\uff7c\071\uff7c\072\uff7c\073" +
    "\uff7c\074\uff7c\075\uff7c\076\uff7c\077\170\101\uff7c\102\uff7c" +
    "\103\uff7c\104\uff7c\105\uff7c\106\uff7c\107\uff7c\110\uff7c\111" +
    "\uff7c\112\uff7c\113\uff7c\114\uff7c\116\uff7c\120\167\124\uff7c" +
    "\125\uff7c\126\uff7c\130\uff7c\132\uff7c\134\uff7c\135\uff7c\136" +
    "\uff7c\137\uff7c\140\uff7c\141\uff7c\142\uff7c\143\uff7c\144\uff7c" +
    "\145\uff7c\001\002\000\162\024\uff7b\025\uff7b\027\uff7b\033" +
    "\uff7b\034\uff7b\036\uff7b\041\uff7b\042\uff7b\043\uff7b\046\uff7b" +
    "\047\uff7b\057\uff7b\060\uff7b\061\uff7b\062\uff7b\063\uff7b\064" +
    "\uff7b\065\uff7b\066\uff7b\067\uff7b\071\uff7b\072\uff7b\073\uff7b" +
    "\074\uff7b\075\uff7b\076\uff7b\077\170\101\uff7b\102\uff7b\103" +
    "\uff7b\104\uff7b\105\uff7b\106\uff7b\107\uff7b\110\uff7b\111\uff7b" +
    "\112\uff7b\113\uff7b\114\uff7b\116\uff7b\120\167\124\uff7b\125" +
    "\uff7b\126\uff7b\130\uff7b\132\uff7b\134\uff7b\135\uff7b\136\uff7b" +
    "\137\uff7b\140\uff7b\141\uff7b\142\uff7b\143\uff7b\144\uff7b\145" +
    "\uff7b\001\002\000\010\034\251\041\265\067\062\001\002" +
    "\000\114\024\uff98\025\uff98\033\uff98\034\uff98\036\uff98\041" +
    "\uff98\042\uff98\043\uff98\061\uff98\062\uff98\066\uff98\067\uff98" +
    "\071\uff98\072\uff98\073\uff98\074\uff98\101\uff98\102\uff98\103" +
    "\uff98\104\uff98\113\uff98\114\uff98\124\uff98\125\uff98\126\uff98" +
    "\130\uff98\132\uff98\134\uff98\135\uff98\136\uff98\137\uff98\140" +
    "\uff98\141\uff98\142\uff98\143\uff98\144\uff98\145\uff98\001\002" +
    "\000\010\034\251\041\265\067\062\001\002\000\114\024" +
    "\uff9d\025\uff9d\033\uff9d\034\uff9d\036\uff9d\041\uff9d\042\uff9d" +
    "\043\uff9d\061\uff9d\062\uff9d\066\uff9d\067\uff9d\071\uff9d\072" +
    "\uff9d\073\uff9d\074\uff9d\101\uff9d\102\uff9d\103\uff9d\104\uff9d" +
    "\113\uff9d\114\uff9d\124\uff9d\125\uff9d\126\uff9d\130\uff9d\132" +
    "\uff9d\134\uff9d\135\uff9d\136\uff9d\137\uff9d\140\uff9d\141\uff9d" +
    "\142\uff9d\143\uff9d\144\uff9d\145\uff9d\001\002\000\010\034" +
    "\251\041\265\067\062\001\002\000\114\024\uff9a\025\uff9a" +
    "\033\uff9a\034\uff9a\036\uff9a\041\uff9a\042\uff9a\043\uff9a\061" +
    "\uff9a\062\uff9a\066\uff9a\067\uff9a\071\uff9a\072\uff9a\073\uff9a" +
    "\074\uff9a\101\uff9a\102\uff9a\103\uff9a\104\uff9a\113\uff9a\114" +
    "\uff9a\124\uff9a\125\uff9a\126\uff9a\130\uff9a\132\uff9a\134\uff9a" +
    "\135\uff9a\136\uff9a\137\uff9a\140\uff9a\141\uff9a\142\uff9a\143" +
    "\uff9a\144\uff9a\145\uff9a\001\002\000\036\033\145\036\111" +
    "\042\120\062\133\067\131\074\071\103\126\132\074\136" +
    "\103\141\112\142\101\143\067\144\011\145\117\001\002" +
    "\000\166\024\uff6d\025\uff6d\026\235\027\uff6d\033\uff6d\034" +
    "\uff6d\036\uff6d\041\uff6d\042\uff6d\043\uff6d\046\uff6d\047\uff6d" +
    "\057\uff6d\060\uff6d\061\uff6d\062\uff6d\063\uff6d\064\uff6d\065" +
    "\uff6d\066\uff6d\067\uff6d\071\uff6d\072\uff6d\073\uff6d\074\uff6d" +
    "\075\uff6d\076\uff6d\077\uff6d\101\uff6d\102\uff6d\103\uff6d\104" +
    "\uff6d\105\uff6d\106\uff6d\107\uff6d\110\uff6d\111\uff6d\112\uff6d" +
    "\113\uff6d\114\uff6d\116\uff6d\120\uff6d\121\uff6d\124\uff6d\125" +
    "\uff6d\126\uff6d\130\uff6d\132\uff6d\134\uff6d\135\uff6d\136\uff6d" +
    "\137\uff6d\140\uff6d\141\uff6d\142\uff6d\143\uff6d\144\uff6d\145" +
    "\uff6d\001\002\000\236\004\uff4c\005\uff4c\006\uff4c\007\uff4c" +
    "\010\uff4c\011\uff4c\012\uff4c\013\uff4c\014\uff4c\015\uff4c\016" +
    "\uff4c\017\uff4c\020\uff4c\021\uff4c\022\uff4c\024\uff4c\025\uff4c" +
    "\026\uff4c\027\uff4c\030\uff4c\033\uff4c\034\uff4c\036\uff4c\041" +
    "\uff4c\042\uff4c\043\uff4c\044\uff4c\045\uff4c\046\uff4c\047\uff4c" +
    "\057\uff4c\060\uff4c\061\uff4c\062\uff4c\063\uff4c\064\uff4c\065" +
    "\uff4c\066\uff4c\067\uff4c\070\uff4c\071\uff4c\072\uff4c\073\uff4c" +
    "\074\uff4c\075\uff4c\076\uff4c\077\uff4c\101\uff4c\102\uff4c\103" +
    "\uff4c\104\uff4c\105\uff4c\106\uff4c\107\uff4c\110\uff4c\111\uff4c" +
    "\112\uff4c\113\uff4c\114\uff4c\116\uff4c\120\uff4c\121\uff4c\123" +
    "\uff4c\124\uff4c\125\uff4c\126\uff4c\130\uff4c\132\uff4c\134\uff4c" +
    "\135\uff4c\136\uff4c\137\uff4c\140\uff4c\141\uff4c\142\uff4c\143" +
    "\uff4c\144\uff4c\145\uff4c\001\002\000\010\034\251\041\265" +
    "\067\062\001\002\000\114\024\uff99\025\uff99\033\uff99\034" +
    "\uff99\036\uff99\041\uff99\042\uff99\043\uff99\061\uff99\062\uff99" +
    "\066\uff99\067\uff99\071\uff99\072\uff99\073\uff99\074\uff99\101" +
    "\uff99\102\uff99\103\uff99\104\uff99\113\uff99\114\uff99\124\uff99" +
    "\125\uff99\126\uff99\130\uff99\132\uff99\134\uff99\135\uff99\136" +
    "\uff99\137\uff99\140\uff99\141\uff99\142\uff99\143\uff99\144\uff99" +
    "\145\uff99\001\002\000\126\024\uff8a\025\uff8a\027\uff8a\033" +
    "\uff8a\034\uff8a\036\uff8a\041\uff8a\042\uff8a\043\uff8a\046\uff8a" +
    "\061\uff8a\062\uff8a\063\uff8a\064\uff8a\066\uff8a\067\uff8a\071" +
    "\uff8a\072\uff8a\073\uff8a\074\uff8a\101\uff8a\102\uff8a\103\uff8a" +
    "\104\uff8a\113\uff8a\114\uff8a\116\uff8a\124\uff8a\125\uff8a\126" +
    "\uff8a\130\uff8a\132\uff8a\134\uff8a\135\uff8a\136\uff8a\137\uff8a" +
    "\140\uff8a\141\uff8a\142\uff8a\143\uff8a\144\uff8a\145\uff8a\001" +
    "\002\000\236\004\uff4d\005\uff4d\006\uff4d\007\uff4d\010\uff4d" +
    "\011\uff4d\012\uff4d\013\uff4d\014\uff4d\015\uff4d\016\uff4d\017" +
    "\uff4d\020\uff4d\021\uff4d\022\uff4d\024\uff4d\025\uff4d\026\uff4d" +
    "\027\uff4d\030\uff4d\033\uff4d\034\uff4d\036\uff4d\041\uff4d\042" +
    "\uff4d\043\uff4d\044\uff4d\045\uff4d\046\uff4d\047\uff4d\057\uff4d" +
    "\060\uff4d\061\uff4d\062\uff4d\063\uff4d\064\uff4d\065\uff4d\066" +
    "\uff4d\067\uff4d\070\uff4d\071\uff4d\072\uff4d\073\uff4d\074\uff4d" +
    "\075\uff4d\076\uff4d\077\uff4d\101\uff4d\102\uff4d\103\uff4d\104" +
    "\uff4d\105\uff4d\106\uff4d\107\uff4d\110\uff4d\111\uff4d\112\uff4d" +
    "\113\uff4d\114\uff4d\116\uff4d\120\uff4d\121\uff4d\123\uff4d\124" +
    "\uff4d\125\uff4d\126\uff4d\130\uff4d\132\uff4d\134\uff4d\135\uff4d" +
    "\136\uff4d\137\uff4d\140\uff4d\141\uff4d\142\uff4d\143\uff4d\144" +
    "\uff4d\145\uff4d\001\002\000\064\024\142\033\145\036\111" +
    "\042\120\043\134\061\072\062\133\066\073\067\131\073" +
    "\143\074\071\102\130\103\126\104\105\114\124\130\150" +
    "\132\074\135\065\136\103\140\141\141\112\142\101\143" +
    "\067\144\011\145\117\001\002\000\120\024\uff96\025\uff96" +
    "\033\uff96\034\uff96\036\uff96\041\uff96\042\uff96\043\uff96\061" +
    "\uff96\062\uff96\063\u0105\066\uff96\067\uff96\071\uff96\072\uff96" +
    "\073\uff96\074\uff96\101\uff96\102\uff96\103\uff96\104\uff96\113" +
    "\uff96\114\uff96\116\uff96\124\uff96\125\uff96\126\uff96\130\uff96" +
    "\132\uff96\134\uff96\135\uff96\136\uff96\137\uff96\140\uff96\141" +
    "\uff96\142\uff96\143\uff96\144\uff96\145\uff96\001\002\000\064" +
    "\024\142\033\145\036\111\042\120\043\134\061\072\062" +
    "\133\066\073\067\131\073\143\074\071\102\130\103\126" +
    "\104\105\114\124\130\150\132\074\135\065\136\103\140" +
    "\141\141\112\142\101\143\067\144\011\145\117\001\002" +
    "\000\120\024\uff94\025\uff94\033\uff94\034\uff94\036\uff94\041" +
    "\uff94\042\uff94\043\uff94\061\uff94\062\uff94\063\uff94\066\uff94" +
    "\067\uff94\071\uff94\072\uff94\073\uff94\074\uff94\101\uff94\102" +
    "\uff94\103\uff94\104\uff94\113\uff94\114\uff94\116\uff94\124\uff94" +
    "\125\uff94\126\uff94\130\uff94\132\uff94\134\uff94\135\uff94\136" +
    "\uff94\137\uff94\140\uff94\141\uff94\142\uff94\143\uff94\144\uff94" +
    "\145\uff94\001\002\000\236\004\uff4e\005\uff4e\006\uff4e\007" +
    "\uff4e\010\uff4e\011\uff4e\012\uff4e\013\uff4e\014\uff4e\015\uff4e" +
    "\016\uff4e\017\uff4e\020\uff4e\021\uff4e\022\uff4e\024\uff4e\025" +
    "\uff4e\026\uff4e\027\uff4e\030\uff4e\033\uff4e\034\uff4e\036\uff4e" +
    "\041\uff4e\042\uff4e\043\uff4e\044\uff4e\045\uff4e\046\uff4e\047" +
    "\uff4e\057\uff4e\060\uff4e\061\uff4e\062\uff4e\063\uff4e\064\uff4e" +
    "\065\uff4e\066\uff4e\067\uff4e\070\uff4e\071\uff4e\072\uff4e\073" +
    "\uff4e\074\uff4e\075\uff4e\076\uff4e\077\uff4e\101\uff4e\102\uff4e" +
    "\103\uff4e\104\uff4e\105\uff4e\106\uff4e\107\uff4e\110\uff4e\111" +
    "\uff4e\112\uff4e\113\uff4e\114\uff4e\116\uff4e\120\uff4e\121\uff4e" +
    "\123\uff4e\124\uff4e\125\uff4e\126\uff4e\130\uff4e\132\uff4e\134" +
    "\uff4e\135\uff4e\136\uff4e\137\uff4e\140\uff4e\141\uff4e\142\uff4e" +
    "\143\uff4e\144\uff4e\145\uff4e\001\002\000\064\024\142\033" +
    "\145\036\111\042\120\043\134\061\072\062\133\066\073" +
    "\067\131\073\143\074\071\102\130\103\126\104\105\114" +
    "\124\130\150\132\074\135\065\136\103\140\141\141\112" +
    "\142\101\143\067\144\011\145\117\001\002\000\064\024" +
    "\142\033\145\036\111\042\120\043\134\061\072\062\133" +
    "\066\073\067\131\073\143\074\071\102\130\103\126\104" +
    "\105\114\124\130\150\132\074\135\065\136\103\140\141" +
    "\141\112\142\101\143\067\144\011\145\117\001\002\000" +
    "\126\024\uff8c\025\uff8c\027\uff8c\033\uff8c\034\uff8c\036\uff8c" +
    "\041\uff8c\042\uff8c\043\uff8c\046\uff8c\061\uff8c\062\uff8c\063" +
    "\uff8c\064\uff8c\066\uff8c\067\uff8c\071\uff8c\072\uff8c\073\uff8c" +
    "\074\uff8c\101\uff8c\102\uff8c\103\uff8c\104\uff8c\113\uff8c\114" +
    "\uff8c\116\uff8c\124\uff8c\125\uff8c\126\uff8c\130\uff8c\132\uff8c" +
    "\134\uff8c\135\uff8c\136\uff8c\137\uff8c\140\uff8c\141\uff8c\142" +
    "\uff8c\143\uff8c\144\uff8c\145\uff8c\001\002\000\122\024\uff93" +
    "\025\uff93\033\uff93\034\uff93\036\uff93\041\uff93\042\uff93\043" +
    "\uff93\046\u010d\061\uff93\062\uff93\063\uff93\066\uff93\067\uff93" +
    "\071\uff93\072\uff93\073\uff93\074\uff93\101\uff93\102\uff93\103" +
    "\uff93\104\uff93\113\uff93\114\uff93\116\uff93\124\uff93\125\uff93" +
    "\126\uff93\130\uff93\132\uff93\134\uff93\135\uff93\136\uff93\137" +
    "\uff93\140\uff93\141\uff93\142\uff93\143\uff93\144\uff93\145\uff93" +
    "\001\002\000\120\024\uff8e\025\uff8e\033\uff8e\034\uff8e\036" +
    "\uff8e\041\uff8e\042\uff8e\043\uff8e\061\uff8e\062\uff8e\063\uff8e" +
    "\066\uff8e\067\uff8e\071\uff8e\072\uff8e\073\uff8e\074\uff8e\101" +
    "\uff8e\102\uff8e\103\uff8e\104\uff8e\113\uff8e\114\uff8e\116\uff8e" +
    "\124\uff8e\125\uff8e\126\uff8e\130\uff8e\132\uff8e\134\uff8e\135" +
    "\uff8e\136\uff8e\137\uff8e\140\uff8e\141\uff8e\142\uff8e\143\uff8e" +
    "\144\uff8e\145\uff8e\001\002\000\064\024\142\033\145\036" +
    "\111\042\120\043\134\061\072\062\133\066\073\067\131" +
    "\073\143\074\071\102\130\103\126\104\105\114\124\130" +
    "\150\132\074\135\065\136\103\140\141\141\112\142\101" +
    "\143\067\144\011\145\117\001\002\000\122\024\uff90\025" +
    "\uff90\033\uff90\034\uff90\036\uff90\041\uff90\042\uff90\043\uff90" +
    "\046\uff90\061\uff90\062\uff90\063\uff90\066\uff90\067\uff90\071" +
    "\uff90\072\uff90\073\uff90\074\uff90\101\uff90\102\uff90\103\uff90" +
    "\104\uff90\113\uff90\114\uff90\116\uff90\124\uff90\125\uff90\126" +
    "\uff90\130\uff90\132\uff90\134\uff90\135\uff90\136\uff90\137\uff90" +
    "\140\uff90\141\uff90\142\uff90\143\uff90\144\uff90\145\uff90\001" +
    "\002\000\120\024\uff8f\025\uff8f\033\uff8f\034\uff8f\036\uff8f" +
    "\041\uff8f\042\uff8f\043\uff8f\061\uff8f\062\uff8f\063\uff8f\066" +
    "\uff8f\067\uff8f\071\uff8f\072\uff8f\073\uff8f\074\uff8f\101\uff8f" +
    "\102\uff8f\103\uff8f\104\uff8f\113\uff8f\114\uff8f\116\uff8f\124" +
    "\uff8f\125\uff8f\126\uff8f\130\uff8f\132\uff8f\134\uff8f\135\uff8f" +
    "\136\uff8f\137\uff8f\140\uff8f\141\uff8f\142\uff8f\143\uff8f\144" +
    "\uff8f\145\uff8f\001\002\000\162\024\uff70\025\uff70\027\uff70" +
    "\033\uff70\034\uff70\036\uff70\041\uff70\042\uff70\043\uff70\046" +
    "\uff70\047\uff70\057\uff70\060\uff70\061\uff70\062\uff70\063\uff70" +
    "\064\uff70\065\uff70\066\uff70\067\uff70\071\uff70\072\uff70\073" +
    "\uff70\074\uff70\075\uff70\076\uff70\077\uff70\101\uff70\102\uff70" +
    "\103\uff70\104\uff70\105\uff70\106\uff70\107\uff70\110\uff70\111" +
    "\uff70\112\uff70\113\uff70\114\uff70\116\uff70\120\uff70\124\uff70" +
    "\125\uff70\126\uff70\130\uff70\132\uff70\134\uff70\135\uff70\136" +
    "\uff70\137\uff70\140\uff70\141\uff70\142\uff70\143\uff70\144\uff70" +
    "\145\uff70\001\002\000\162\024\uff72\025\uff72\027\uff72\033" +
    "\uff72\034\uff72\036\uff72\041\uff72\042\uff72\043\uff72\046\uff72" +
    "\047\uff72\057\uff72\060\uff72\061\uff72\062\uff72\063\uff72\064" +
    "\uff72\065\uff72\066\uff72\067\uff72\071\uff72\072\uff72\073\uff72" +
    "\074\uff72\075\uff72\076\uff72\077\uff72\101\uff72\102\uff72\103" +
    "\uff72\104\uff72\105\uff72\106\uff72\107\uff72\110\uff72\111\uff72" +
    "\112\uff72\113\uff72\114\uff72\116\uff72\120\uff72\124\uff72\125" +
    "\uff72\126\uff72\130\uff72\132\uff72\134\uff72\135\uff72\136\uff72" +
    "\137\uff72\140\uff72\141\uff72\142\uff72\143\uff72\144\uff72\145" +
    "\uff72\001\002\000\004\126\u0113\001\002\000\236\004\uff45" +
    "\005\uff45\006\uff45\007\uff45\010\uff45\011\uff45\012\uff45\013" +
    "\uff45\014\uff45\015\uff45\016\uff45\017\uff45\020\uff45\021\uff45" +
    "\022\uff45\024\uff45\025\uff45\026\uff45\027\uff45\030\uff45\033" +
    "\uff45\034\uff45\036\uff45\041\uff45\042\uff45\043\uff45\044\uff45" +
    "\045\uff45\046\uff45\047\uff45\057\uff45\060\uff45\061\uff45\062" +
    "\uff45\063\uff45\064\uff45\065\uff45\066\uff45\067\uff45\070\uff45" +
    "\071\uff45\072\uff45\073\uff45\074\uff45\075\uff45\076\uff45\077" +
    "\uff45\101\uff45\102\uff45\103\uff45\104\uff45\105\uff45\106\uff45" +
    "\107\uff45\110\uff45\111\uff45\112\uff45\113\uff45\114\uff45\116" +
    "\uff45\120\uff45\121\uff45\123\uff45\124\uff45\125\uff45\126\uff45" +
    "\130\uff45\132\uff45\134\uff45\135\uff45\136\uff45\137\uff45\140" +
    "\uff45\141\uff45\142\uff45\143\uff45\144\uff45\145\uff45\001\002" +
    "\000\162\024\uff86\025\uff86\027\uff86\033\uff86\034\uff86\036" +
    "\uff86\041\uff86\042\uff86\043\uff86\046\uff86\047\uff86\057\uff86" +
    "\060\uff86\061\uff86\062\uff86\063\uff86\064\uff86\065\uff86\066" +
    "\uff86\067\uff86\071\uff86\072\uff86\073\uff86\074\uff86\075\uff86" +
    "\076\uff86\077\170\101\uff86\102\uff86\103\uff86\104\uff86\105" +
    "\uff86\106\uff86\107\uff86\110\uff86\111\uff86\112\uff86\113\uff86" +
    "\114\uff86\116\uff86\120\167\124\uff86\125\uff86\126\uff86\130" +
    "\uff86\132\uff86\134\uff86\135\uff86\136\uff86\137\uff86\140\uff86" +
    "\141\uff86\142\uff86\143\uff86\144\uff86\145\uff86\001\002\000" +
    "\032\002\ufff3\023\ufff3\032\ufff3\037\ufff3\054\ufff3\056\ufff3" +
    "\073\ufff3\114\ufff3\122\ufff3\127\ufff3\131\ufff3\135\ufff3\001" +
    "\002\000\012\040\u0131\045\uffc7\070\u0133\074\u0132\001\002" +
    "\000\004\045\u0119\001\002\000\032\002\ufff1\023\ufff1\032" +
    "\ufff1\037\ufff1\054\ufff1\056\ufff1\073\ufff1\114\ufff1\122\ufff1" +
    "\127\ufff1\131\ufff1\135\ufff1\001\002\000\006\141\013\144" +
    "\011\001\002\000\010\040\u011b\070\u011d\074\u011c\001\002" +
    "\000\102\024\142\025\115\033\145\036\111\042\120\043" +
    "\134\061\072\062\133\066\073\067\131\071\136\072\114" +
    "\073\143\074\071\101\123\102\130\103\126\104\105\113" +
    "\107\114\124\130\150\132\074\134\132\135\065\136\103" +
    "\137\116\140\141\141\112\142\101\143\067\144\011\145" +
    "\117\001\002\000\016\042\257\051\261\117\260\126\uffae" +
    "\141\013\144\011\001\002\000\016\042\257\051\261\117" +
    "\260\125\uffae\141\013\144\011\001\002\000\004\125\u0120" +
    "\001\002\000\012\041\265\124\uffad\125\uffad\126\uffad\001" +
    "\002\000\004\040\u0121\001\002\000\102\024\142\025\115" +
    "\033\145\036\111\042\120\043\134\061\072\062\133\066" +
    "\073\067\131\071\136\072\114\073\143\074\071\101\123" +
    "\102\130\103\126\104\105\113\107\114\124\130\150\132" +
    "\074\134\132\135\065\136\103\137\116\140\141\141\112" +
    "\142\101\143\067\144\011\145\117\001\002\000\004\067" +
    "\u0123\001\002\000\102\024\142\025\115\033\145\036\111" +
    "\042\120\043\134\061\072\062\133\066\073\067\131\071" +
    "\136\072\114\073\143\074\071\101\123\102\130\103\126" +
    "\104\105\113\107\114\124\130\150\132\074\134\132\135" +
    "\065\136\103\137\116\140\141\141\112\142\101\143\067" +
    "\144\011\145\117\001\002\000\004\124\u0125\001\002\000" +
    "\032\002\uffda\023\uffda\032\uffda\037\uffda\054\uffda\056\uffda" +
    "\073\uffda\114\uffda\122\uffda\127\uffda\131\uffda\135\uffda\001" +
    "\002\000\004\126\u0127\001\002\000\004\040\u0128\001\002" +
    "\000\102\024\142\025\115\033\145\036\111\042\120\043" +
    "\134\061\072\062\133\066\073\067\131\071\136\072\114" +
    "\073\143\074\071\101\123\102\130\103\126\104\105\113" +
    "\107\114\124\130\150\132\074\134\132\135\065\136\103" +
    "\137\116\140\141\141\112\142\101\143\067\144\011\145" +
    "\117\001\002\000\004\067\u012a\001\002\000\102\024\142" +
    "\025\115\033\145\036\111\042\120\043\134\061\072\062" +
    "\133\066\073\067\131\071\136\072\114\073\143\074\071" +
    "\101\123\102\130\103\126\104\105\113\107\114\124\130" +
    "\150\132\074\134\132\135\065\136\103\137\116\140\141" +
    "\141\112\142\101\143\067\144\011\145\117\001\002\000" +
    "\004\124\u012c\001\002\000\032\002\uffdb\023\uffdb\032\uffdb" +
    "\037\uffdb\054\uffdb\056\uffdb\073\uffdb\114\uffdb\122\uffdb\127" +
    "\uffdb\131\uffdb\135\uffdb\001\002\000\004\067\u012e\001\002" +
    "\000\102\024\142\025\115\033\145\036\111\042\120\043" +
    "\134\061\072\062\133\066\073\067\131\071\136\072\114" +
    "\073\143\074\071\101\123\102\130\103\126\104\105\113" +
    "\107\114\124\130\150\132\074\134\132\135\065\136\103" +
    "\137\116\140\141\141\112\142\101\143\067\144\011\145" +
    "\117\001\002\000\004\124\u0130\001\002\000\032\002\uffd9" +
    "\023\uffd9\032\uffd9\037\uffd9\054\uffd9\056\uffd9\073\uffd9\114" +
    "\uffd9\122\uffd9\127\uffd9\131\uffd9\135\uffd9\001\002\000\102" +
    "\024\142\025\115\033\145\036\111\042\120\043\134\061" +
    "\072\062\133\066\073\067\131\071\136\072\114\073\143" +
    "\074\071\101\123\102\130\103\126\104\105\113\107\114" +
    "\124\130\150\132\074\134\132\135\065\136\103\137\116" +
    "\140\141\141\112\142\101\143\067\144\011\145\117\001" +
    "\002\000\016\042\257\051\261\117\260\126\uffae\141\013" +
    "\144\011\001\002\000\016\042\257\051\261\117\260\125" +
    "\uffae\141\013\144\011\001\002\000\004\125\u0135\001\002" +
    "\000\004\040\u0136\001\002\000\102\024\142\025\115\033" +
    "\145\036\111\042\120\043\134\061\072\062\133\066\073" +
    "\067\131\071\136\072\114\073\143\074\071\101\123\102" +
    "\130\103\126\104\105\113\107\114\124\130\150\132\074" +
    "\134\132\135\065\136\103\137\116\140\141\141\112\142" +
    "\101\143\067\144\011\145\117\001\002\000\004\067\u0138" +
    "\001\002\000\102\024\142\025\115\033\145\036\111\042" +
    "\120\043\134\061\072\062\133\066\073\067\131\071\136" +
    "\072\114\073\143\074\071\101\123\102\130\103\126\104" +
    "\105\113\107\114\124\130\150\132\074\134\132\135\065" +
    "\136\103\137\116\140\141\141\112\142\101\143\067\144" +
    "\011\145\117\001\002\000\004\124\u013a\001\002\000\032" +
    "\002\uffdd\023\uffdd\032\uffdd\037\uffdd\054\uffdd\056\uffdd\073" +
    "\uffdd\114\uffdd\122\uffdd\127\uffdd\131\uffdd\135\uffdd\001\002" +
    "\000\004\126\u013c\001\002\000\004\040\u013d\001\002\000" +
    "\102\024\142\025\115\033\145\036\111\042\120\043\134" +
    "\061\072\062\133\066\073\067\131\071\136\072\114\073" +
    "\143\074\071\101\123\102\130\103\126\104\105\113\107" +
    "\114\124\130\150\132\074\134\132\135\065\136\103\137" +
    "\116\140\141\141\112\142\101\143\067\144\011\145\117" +
    "\001\002\000\004\067\u013f\001\002\000\102\024\142\025" +
    "\115\033\145\036\111\042\120\043\134\061\072\062\133" +
    "\066\073\067\131\071\136\072\114\073\143\074\071\101" +
    "\123\102\130\103\126\104\105\113\107\114\124\130\150" +
    "\132\074\134\132\135\065\136\103\137\116\140\141\141" +
    "\112\142\101\143\067\144\011\145\117\001\002\000\004" +
    "\124\u0141\001\002\000\032\002\uffde\023\uffde\032\uffde\037" +
    "\uffde\054\uffde\056\uffde\073\uffde\114\uffde\122\uffde\127\uffde" +
    "\131\uffde\135\uffde\001\002\000\004\067\u0143\001\002\000" +
    "\102\024\142\025\115\033\145\036\111\042\120\043\134" +
    "\061\072\062\133\066\073\067\131\071\136\072\114\073" +
    "\143\074\071\101\123\102\130\103\126\104\105\113\107" +
    "\114\124\130\150\132\074\134\132\135\065\136\103\137" +
    "\116\140\141\141\112\142\101\143\067\144\011\145\117" +
    "\001\002\000\004\124\u0145\001\002\000\032\002\uffdc\023" +
    "\uffdc\032\uffdc\037\uffdc\054\uffdc\056\uffdc\073\uffdc\114\uffdc" +
    "\122\uffdc\127\uffdc\131\uffdc\135\uffdc\001\002\000\004\067" +
    "\062\001\002\000\032\002\ufff6\023\ufff6\032\ufff6\037\ufff6" +
    "\054\ufff6\056\ufff6\073\ufff6\114\ufff6\122\ufff6\127\ufff6\131" +
    "\ufff6\135\ufff6\001\002\000\032\002\ufff5\023\ufff5\032\ufff5" +
    "\037\ufff5\054\ufff5\056\ufff5\073\ufff5\114\ufff5\122\ufff5\127" +
    "\ufff5\131\ufff5\135\ufff5\001\002\000\032\002\ufff0\023\ufff0" +
    "\032\ufff0\037\ufff0\054\ufff0\056\ufff0\073\ufff0\114\ufff0\122" +
    "\ufff0\127\ufff0\131\ufff0\135\ufff0\001\002\000\004\045\u0155" +
    "\001\002\000\012\045\uffc7\067\062\070\u014e\074\u014d\001" +
    "\002\000\032\002\uffd6\023\uffd6\032\uffd6\037\uffd6\054\uffd6" +
    "\056\uffd6\073\uffd6\114\uffd6\122\uffd6\127\uffd6\131\uffd6\135" +
    "\uffd6\001\002\000\016\042\257\051\261\117\260\126\uffae" +
    "\141\013\144\011\001\002\000\016\042\257\051\261\117" +
    "\260\125\uffae\141\013\144\011\001\002\000\004\125\u0150" +
    "\001\002\000\004\067\062\001\002\000\032\002\uffd7\023" +
    "\uffd7\032\uffd7\037\uffd7\054\uffd7\056\uffd7\073\uffd7\114\uffd7" +
    "\122\uffd7\127\uffd7\131\uffd7\135\uffd7\001\002\000\004\126" +
    "\u0153\001\002\000\004\067\062\001\002\000\032\002\uffd8" +
    "\023\uffd8\032\uffd8\037\uffd8\054\uffd8\056\uffd8\073\uffd8\114" +
    "\uffd8\122\uffd8\127\uffd8\131\uffd8\135\uffd8\001\002\000\006" +
    "\141\013\144\011\001\002\000\010\067\062\070\u0159\074" +
    "\u0158\001\002\000\032\002\uffd3\023\uffd3\032\uffd3\037\uffd3" +
    "\054\uffd3\056\uffd3\073\uffd3\114\uffd3\122\uffd3\127\uffd3\131" +
    "\uffd3\135\uffd3\001\002\000\016\042\257\051\261\117\260" +
    "\126\uffae\141\013\144\011\001\002\000\016\042\257\051" +
    "\261\117\260\125\uffae\141\013\144\011\001\002\000\004" +
    "\125\u015b\001\002\000\004\067\062\001\002\000\032\002" +
    "\uffd4\023\uffd4\032\uffd4\037\uffd4\054\uffd4\056\uffd4\073\uffd4" +
    "\114\uffd4\122\uffd4\127\uffd4\131\uffd4\135\uffd4\001\002\000" +
    "\004\126\u015e\001\002\000\004\067\062\001\002\000\032" +
    "\002\uffd5\023\uffd5\032\uffd5\037\uffd5\054\uffd5\056\uffd5\073" +
    "\uffd5\114\uffd5\122\uffd5\127\uffd5\131\uffd5\135\uffd5\001\002" +
    "\000\036\002\uffec\023\uffec\032\uffec\037\uffec\052\u0163\054" +
    "\uffec\055\u0164\056\uffec\073\uffec\114\uffec\122\uffec\127\uffec" +
    "\131\uffec\135\uffec\001\002\000\032\002\uffed\023\uffed\032" +
    "\uffed\037\uffed\054\uffed\056\uffed\073\uffed\114\uffed\122\uffed" +
    "\127\uffed\131\uffed\135\uffed\001\002\000\032\002\uffe7\023" +
    "\uffe7\032\uffe7\037\uffe7\054\uffe7\056\uffe7\073\uffe7\114\uffe7" +
    "\122\uffe7\127\uffe7\131\uffe7\135\uffe7\001\002\000\004\145" +
    "\u0178\001\002\000\006\050\u0165\145\u0167\001\002\000\004" +
    "\145\u0174\001\002\000\036\002\uffec\023\uffec\032\uffec\037" +
    "\uffec\041\u0170\052\u0163\054\uffec\056\uffec\073\uffec\114\uffec" +
    "\122\uffec\127\uffec\131\uffec\135\uffec\001\002\000\046\002" +
    "\uffec\023\uffec\032\uffec\035\u016a\037\uffec\052\u0163\054\uffec" +
    "\056\uffec\066\u0169\073\uffec\114\uffec\122\uffec\127\uffec\131" +
    "\uffec\132\u016d\135\uffec\141\013\144\011\001\002\000\036" +
    "\002\uffe6\023\uffe6\032\uffe6\037\uffe6\041\uffe6\052\uffe6\054" +
    "\uffe6\056\uffe6\073\uffe6\114\uffe6\122\uffe6\127\uffe6\131\uffe6" +
    "\135\uffe6\001\002\000\036\002\uffe1\023\uffe1\032\uffe1\037" +
    "\uffe1\041\uffe1\052\uffe1\054\uffe1\056\uffe1\073\uffe1\114\uffe1" +
    "\122\uffe1\127\uffe1\131\uffe1\135\uffe1\001\002\000\006\050" +
    "\u0165\145\u016f\001\002\000\032\002\uffea\023\uffea\032\uffea" +
    "\037\uffea\054\uffea\056\uffea\073\uffea\114\uffea\122\uffea\127" +
    "\uffea\131\uffea\135\uffea\001\002\000\036\002\uffe3\023\uffe3" +
    "\032\uffe3\037\uffe3\041\uffe3\052\uffe3\054\uffe3\056\uffe3\073" +
    "\uffe3\114\uffe3\122\uffe3\127\uffe3\131\uffe3\135\uffe3\001\002" +
    "\000\036\002\uffdf\023\uffdf\032\uffdf\037\uffdf\041\uffdf\052" +
    "\uffdf\054\uffdf\056\uffdf\073\uffdf\114\uffdf\122\uffdf\127\uffdf" +
    "\131\uffdf\135\uffdf\001\002\000\036\002\uffec\023\uffec\032" +
    "\uffec\037\uffec\041\u0170\052\u0163\054\uffec\056\uffec\073\uffec" +
    "\114\uffec\122\uffec\127\uffec\131\uffec\135\uffec\001\002\000" +
    "\012\066\u0169\132\u016d\141\013\144\011\001\002\000\006" +
    "\050\u0165\145\u016f\001\002\000\032\002\uffe9\023\uffe9\032" +
    "\uffe9\037\uffe9\054\uffe9\056\uffe9\073\uffe9\114\uffe9\122\uffe9" +
    "\127\uffe9\131\uffe9\135\uffe9\001\002\000\036\002\uffe5\023" +
    "\uffe5\032\uffe5\037\uffe5\041\uffe5\052\uffe5\054\uffe5\056\uffe5" +
    "\073\uffe5\114\uffe5\122\uffe5\127\uffe5\131\uffe5\135\uffe5\001" +
    "\002\000\032\002\uffe8\023\uffe8\032\uffe8\037\uffe8\054\uffe8" +
    "\056\uffe8\073\uffe8\114\uffe8\122\uffe8\127\uffe8\131\uffe8\135" +
    "\uffe8\001\002\000\012\066\u0177\132\u0175\141\013\144\011" +
    "\001\002\000\036\002\uffe0\023\uffe0\032\uffe0\037\uffe0\041" +
    "\uffe0\052\uffe0\054\uffe0\056\uffe0\073\uffe0\114\uffe0\122\uffe0" +
    "\127\uffe0\131\uffe0\135\uffe0\001\002\000\036\002\uffe4\023" +
    "\uffe4\032\uffe4\037\uffe4\041\uffe4\052\uffe4\054\uffe4\056\uffe4" +
    "\073\uffe4\114\uffe4\122\uffe4\127\uffe4\131\uffe4\135\uffe4\001" +
    "\002\000\036\002\uffe2\023\uffe2\032\uffe2\037\uffe2\041\uffe2" +
    "\052\uffe2\054\uffe2\056\uffe2\073\uffe2\114\uffe2\122\uffe2\127" +
    "\uffe2\131\uffe2\135\uffe2\001\002\000\032\002\uffeb\023\uffeb" +
    "\032\uffeb\037\uffeb\054\uffeb\056\uffeb\073\uffeb\114\uffeb\122" +
    "\uffeb\127\uffeb\131\uffeb\135\uffeb\001\002\000\036\002\uffec" +
    "\023\uffec\032\uffec\037\uffec\052\u0163\054\uffec\055\u0164\056" +
    "\uffec\073\uffec\114\uffec\122\uffec\127\uffec\131\uffec\135\uffec" +
    "\001\002\000\032\002\uffee\023\uffee\032\uffee\037\uffee\054" +
    "\uffee\056\uffee\073\uffee\114\uffee\122\uffee\127\uffee\131\uffee" +
    "\135\uffee\001\002\000\014\023\uffcf\073\uffcf\114\uffcf\131" +
    "\uffcf\135\uffcf\001\002\000\014\023\uffcc\073\uffcc\114\uffcc" +
    "\131\uffcc\135\uffcc\001\002\000\014\023\uffce\073\uffce\114" +
    "\uffce\131\uffce\135\uffce\001\002\000\014\023\uffd0\073\uffd0" +
    "\114\uffd0\131\uffd0\135\uffd0\001\002\000\006\141\013\144" +
    "\011\001\002\000\014\023\uffd1\073\uffd1\114\uffd1\131\uffd1" +
    "\135\uffd1\001\002\000\012\041\023\053\u0183\065\u0182\067" +
    "\uffc8\001\002\000\010\132\u018d\141\013\144\011\001\002" +
    "\000\010\132\u018a\141\013\144\011\001\002\000\004\067" +
    "\u0185\001\002\000\016\042\257\051\261\117\260\124\uffae" +
    "\141\013\144\011\001\002\000\004\124\u0187\001\002\000" +
    "\034\002\uffaa\023\uffaa\032\uffaa\037\uffaa\054\uffaa\056\uffaa" +
    "\067\062\073\uffaa\114\uffaa\122\uffaa\127\uffaa\131\uffaa\135" +
    "\uffaa\001\002\000\032\002\uffa9\023\uffa9\032\uffa9\037\uffa9" +
    "\054\uffa9\056\uffa9\073\uffa9\114\uffa9\122\uffa9\127\uffa9\131" +
    "\uffa9\135\uffa9\001\002\000\032\002\uffd2\023\uffd2\032\uffd2" +
    "\037\uffd2\054\uffd2\056\uffd2\073\uffd2\114\uffd2\122\uffd2\127" +
    "\uffd2\131\uffd2\135\uffd2\001\002\000\004\067\uffca\001\002" +
    "\000\004\067\uffcb\001\002\000\006\067\uffc0\120\uffc0\001" +
    "\002\000\006\067\uffbf\120\uffbf\001\002\000\006\067\uffc9" +
    "\120\u018f\001\002\000\010\132\u0191\141\013\144\011\001" +
    "\002\000\006\067\uffbe\120\uffbe\001\002\000\006\067\uffbd" +
    "\120\uffbd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u018f\000\006\031\003\060\005\001\001\000\004\040" +
    "\025\001\001\000\006\032\007\033\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\033\014" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\032\020\033\011\034\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\032\024\033\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\037\026" +
    "\043\027\001\001\000\002\001\001\000\006\050\053\053" +
    "\050\001\001\000\006\032\031\033\011\001\001\000\002" +
    "\001\001\000\006\032\047\033\011\001\001\000\014\032" +
    "\036\033\011\054\041\055\035\056\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\032\036" +
    "\033\011\054\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\032\046\033\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\052\u017b\001\001\000\006\032" +
    "\u0178\033\011\001\001\000\006\032\u015f\033\011\001\001" +
    "\000\002\001\001\000\012\032\u014a\033\011\044\u0148\054" +
    "\u0149\001\001\000\010\015\u0146\032\u0145\033\011\001\001" +
    "\000\012\023\u0117\032\u0115\033\011\054\u0116\001\001\000" +
    "\010\015\062\032\060\033\011\001\001\000\004\015\u0114" +
    "\001\001\000\062\002\077\003\136\004\143\005\121\010" +
    "\146\011\107\012\065\014\124\015\126\017\134\024\103" +
    "\025\074\026\105\027\145\032\067\033\011\035\137\036" +
    "\063\041\101\042\112\045\150\046\076\063\120\064\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\003" +
    "\136\004\143\010\146\011\107\015\126\027\145\032\067" +
    "\033\011\036\063\042\112\045\150\046\076\063\u0113\064" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\060\002\077\003\136\004\143\005\121\010" +
    "\146\011\107\012\065\014\u0111\015\126\024\103\025\074" +
    "\026\105\027\145\032\067\033\011\035\137\036\063\041" +
    "\101\042\112\045\150\046\076\063\120\064\075\001\001" +
    "\000\034\003\136\004\143\010\146\011\107\015\126\027" +
    "\145\032\067\033\011\036\u0110\042\112\045\150\046\076" +
    "\064\075\001\001\000\034\003\136\004\143\010\146\011" +
    "\107\015\126\027\145\032\067\033\011\036\u010f\042\112" +
    "\045\150\046\076\064\075\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\003\136\015\126\032\067\033\011\064" +
    "\u0106\001\001\000\002\001\001\000\014\003\136\015\126" +
    "\032\067\033\011\064\u0101\001\001\000\002\001\001\000" +
    "\042\003\136\004\143\005\121\010\146\011\107\015\126" +
    "\027\145\032\067\033\011\035\u0100\036\063\042\112\045" +
    "\150\046\076\063\120\064\075\001\001\000\002\001\001" +
    "\000\012\006\376\032\020\033\011\034\261\001\001\000" +
    "\002\001\001\000\014\003\136\015\126\032\067\033\011" +
    "\064\375\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\006\371\032\020\033\011\034\261\001\001\000\012" +
    "\006\367\032\020\033\011\034\261\001\001\000\012\006" +
    "\365\032\020\033\011\034\261\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\006\333\032\020\033\011\034\261\001\001\000\036" +
    "\003\136\004\143\010\146\011\107\015\126\027\145\032" +
    "\067\033\011\036\063\042\112\045\150\046\076\063\332" +
    "\064\075\001\001\000\062\002\077\003\136\004\143\005" +
    "\121\010\146\011\107\012\065\014\124\015\126\017\331" +
    "\024\103\025\074\026\105\027\145\032\067\033\011\035" +
    "\137\036\063\041\101\042\112\045\150\046\076\063\120" +
    "\064\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\003\136\004\143\010\146\011\107\015\126\027\145" +
    "\032\067\033\011\036\063\042\112\045\150\046\076\063" +
    "\330\064\075\001\001\000\066\002\077\003\136\004\143" +
    "\005\121\006\321\010\146\011\107\012\065\014\124\015" +
    "\126\017\134\024\103\025\074\026\105\027\145\032\317" +
    "\033\011\034\261\035\137\036\063\041\101\042\112\045" +
    "\150\046\076\063\120\064\075\001\001\000\012\006\262" +
    "\032\020\033\011\034\261\001\001\000\002\001\001\000" +
    "\034\003\136\004\143\010\146\011\107\015\126\027\145" +
    "\032\067\033\011\036\255\042\112\045\150\046\076\064" +
    "\075\001\001\000\002\001\001\000\010\030\243\032\242" +
    "\033\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\003\136\004\143\010\146\011\107\015\126\027\145" +
    "\032\067\033\011\036\241\042\112\045\150\046\076\064" +
    "\075\001\001\000\036\003\136\004\143\010\146\011\107" +
    "\015\126\027\145\032\067\033\011\036\063\042\112\045" +
    "\150\046\076\063\240\064\075\001\001\000\036\003\136" +
    "\004\143\010\146\011\107\015\126\027\145\032\067\033" +
    "\011\036\063\042\112\045\150\046\076\063\237\064\075" +
    "\001\001\000\002\001\001\000\006\032\236\033\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\003\136" +
    "\004\143\010\146\011\107\015\126\027\145\032\067\033" +
    "\011\036\063\042\112\045\150\046\076\063\165\064\075" +
    "\001\001\000\002\001\001\000\020\003\136\004\152\011" +
    "\107\015\126\032\067\033\011\064\075\001\001\000\002" +
    "\001\001\000\064\002\077\003\136\004\143\005\121\010" +
    "\146\011\107\012\065\014\160\015\126\021\161\022\157" +
    "\024\103\025\074\026\105\027\145\032\067\033\011\035" +
    "\137\036\063\041\101\042\112\045\150\046\076\063\120" +
    "\064\075\001\001\000\014\003\136\015\126\032\067\033" +
    "\011\064\156\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\060\002\077\003\136\004\143\005\121" +
    "\010\146\011\107\012\065\014\164\015\126\024\103\025" +
    "\074\026\105\027\145\032\067\033\011\035\137\036\063" +
    "\041\101\042\112\045\150\046\076\063\120\064\075\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\003\136" +
    "\004\143\010\146\011\107\015\126\027\145\032\067\033" +
    "\011\036\171\042\112\045\150\046\076\064\075\001\001" +
    "\000\034\003\136\004\143\010\146\011\107\015\126\027" +
    "\145\032\067\033\011\036\170\042\112\045\150\046\076" +
    "\064\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\003\136\004\143\010\146\011\107\015\126\032\067" +
    "\033\011\045\150\046\233\064\075\001\001\000\022\003" +
    "\136\004\143\011\107\015\126\032\067\033\011\045\232" +
    "\064\075\001\001\000\026\003\136\004\143\010\146\011" +
    "\107\015\126\032\067\033\011\045\150\046\231\064\075" +
    "\001\001\000\026\003\136\004\143\010\146\011\107\015" +
    "\126\032\067\033\011\045\150\046\230\064\075\001\001" +
    "\000\026\003\136\004\143\010\146\011\107\015\126\032" +
    "\067\033\011\045\150\046\227\064\075\001\001\000\026" +
    "\003\136\004\143\010\146\011\107\015\126\032\067\033" +
    "\011\045\150\046\226\064\075\001\001\000\026\003\136" +
    "\004\143\010\146\011\107\015\126\032\067\033\011\045" +
    "\150\046\225\064\075\001\001\000\026\003\136\004\143" +
    "\010\146\011\107\015\126\032\067\033\011\045\150\046" +
    "\224\064\075\001\001\000\026\003\136\004\143\010\146" +
    "\011\107\015\126\032\067\033\011\045\150\046\223\064" +
    "\075\001\001\000\026\003\136\004\143\010\146\011\107" +
    "\015\126\032\067\033\011\045\150\046\222\064\075\001" +
    "\001\000\026\003\136\004\143\010\146\011\107\015\126" +
    "\032\067\033\011\045\150\046\221\064\075\001\001\000" +
    "\026\003\136\004\143\010\146\011\107\015\126\032\067" +
    "\033\011\045\150\046\220\064\075\001\001\000\026\003" +
    "\136\004\143\010\146\011\107\015\126\032\067\033\011" +
    "\045\150\046\217\064\075\001\001\000\026\003\136\004" +
    "\143\010\146\011\107\015\126\032\067\033\011\045\150" +
    "\046\216\064\075\001\001\000\026\003\136\004\143\010" +
    "\146\011\107\015\126\032\067\033\011\045\150\046\215" +
    "\064\075\001\001\000\026\003\136\004\143\010\146\011" +
    "\107\015\126\032\067\033\011\045\150\046\214\064\075" +
    "\001\001\000\026\003\136\004\143\010\146\011\107\015" +
    "\126\032\067\033\011\045\150\046\213\064\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\003\136\004\143\010\146\011\107" +
    "\015\126\032\067\033\011\045\150\046\235\064\075\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\060\002\077\003\136\004\143\005\121" +
    "\010\146\011\107\012\065\014\245\015\126\024\103\025" +
    "\074\026\105\027\145\032\067\033\011\035\137\036\063" +
    "\041\101\042\112\045\150\046\076\063\120\064\075\001" +
    "\001\000\006\015\251\020\246\001\001\000\002\001\001" +
    "\000\010\030\253\032\242\033\011\001\001\000\060\002" +
    "\077\003\136\004\143\005\121\010\146\011\107\012\065" +
    "\014\252\015\126\024\103\025\074\026\105\027\145\032" +
    "\067\033\011\035\137\036\063\041\101\042\112\045\150" +
    "\046\076\063\120\064\075\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\032\020\033\011\034\314\001\001\000" +
    "\010\032\020\033\011\034\311\001\001\000\010\032\020" +
    "\033\011\034\306\001\001\000\002\001\001\000\006\015" +
    "\251\020\263\001\001\000\002\001\001\000\010\032\020" +
    "\033\011\034\266\001\001\000\010\032\020\033\011\034" +
    "\301\001\001\000\002\001\001\000\010\032\020\033\011" +
    "\034\274\001\001\000\010\032\020\033\011\034\271\001" +
    "\001\000\002\001\001\000\060\002\077\003\136\004\143" +
    "\005\121\010\146\011\107\012\065\014\273\015\126\024" +
    "\103\025\074\026\105\027\145\032\067\033\011\035\137" +
    "\036\063\041\101\042\112\045\150\046\076\063\120\064" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\060" +
    "\002\077\003\136\004\143\005\121\010\146\011\107\012" +
    "\065\014\276\015\126\024\103\025\074\026\105\027\145" +
    "\032\067\033\011\035\137\036\063\041\101\042\112\045" +
    "\150\046\076\063\120\064\075\001\001\000\002\001\001" +
    "\000\060\002\077\003\136\004\143\005\121\010\146\011" +
    "\107\012\065\014\300\015\126\024\103\025\074\026\105" +
    "\027\145\032\067\033\011\035\137\036\063\041\101\042" +
    "\112\045\150\046\076\063\120\064\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\060\002\077\003\136\004" +
    "\143\005\121\010\146\011\107\012\065\014\303\015\126" +
    "\024\103\025\074\026\105\027\145\032\067\033\011\035" +
    "\137\036\063\041\101\042\112\045\150\046\076\063\120" +
    "\064\075\001\001\000\002\001\001\000\060\002\077\003" +
    "\136\004\143\005\121\010\146\011\107\012\065\014\305" +
    "\015\126\024\103\025\074\026\105\027\145\032\067\033" +
    "\011\035\137\036\063\041\101\042\112\045\150\046\076" +
    "\063\120\064\075\001\001\000\002\001\001\000\002\001" +
    "\001\000\060\002\077\003\136\004\143\005\121\010\146" +
    "\011\107\012\065\014\310\015\126\024\103\025\074\026" +
    "\105\027\145\032\067\033\011\035\137\036\063\041\101" +
    "\042\112\045\150\046\076\063\120\064\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\060\002\077\003\136" +
    "\004\143\005\121\010\146\011\107\012\065\014\313\015" +
    "\126\024\103\025\074\026\105\027\145\032\067\033\011" +
    "\035\137\036\063\041\101\042\112\045\150\046\076\063" +
    "\120\064\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\060\002\077\003\136\004\143\005\121\010\146\011" +
    "\107\012\065\014\316\015\126\024\103\025\074\026\105" +
    "\027\145\032\067\033\011\035\137\036\063\041\101\042" +
    "\112\045\150\046\076\063\120\064\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\032\020\033\011\034" +
    "\314\001\001\000\006\015\251\020\322\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\064\002" +
    "\077\003\136\004\143\005\121\010\146\011\107\012\065" +
    "\014\160\015\126\021\326\022\157\024\103\025\074\026" +
    "\105\027\145\032\067\033\011\035\137\036\063\041\101" +
    "\042\112\045\150\046\076\063\120\064\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\015\251\020\334\001" +
    "\001\000\002\001\001\000\036\003\136\004\143\010\146" +
    "\011\107\015\126\027\145\032\067\033\011\036\063\042" +
    "\112\045\150\046\076\063\364\064\075\001\001\000\036" +
    "\003\136\004\143\010\146\011\107\015\126\027\145\032" +
    "\067\033\011\036\063\042\112\045\150\046\076\063\363" +
    "\064\075\001\001\000\036\003\136\004\143\010\146\011" +
    "\107\015\126\027\145\032\067\033\011\036\063\042\112" +
    "\045\150\046\076\063\362\064\075\001\001\000\036\003" +
    "\136\004\143\010\146\011\107\015\126\027\145\032\067" +
    "\033\011\036\063\042\112\045\150\046\076\063\361\064" +
    "\075\001\001\000\036\003\136\004\143\010\146\011\107" +
    "\015\126\027\145\032\067\033\011\036\063\042\112\045" +
    "\150\046\076\063\360\064\075\001\001\000\036\003\136" +
    "\004\143\010\146\011\107\015\126\027\145\032\067\033" +
    "\011\036\063\042\112\045\150\046\076\063\357\064\075" +
    "\001\001\000\036\003\136\004\143\010\146\011\107\015" +
    "\126\027\145\032\067\033\011\036\063\042\112\045\150" +
    "\046\076\063\356\064\075\001\001\000\036\003\136\004" +
    "\143\010\146\011\107\015\126\027\145\032\067\033\011" +
    "\036\063\042\112\045\150\046\076\063\355\064\075\001" +
    "\001\000\036\003\136\004\143\010\146\011\107\015\126" +
    "\027\145\032\067\033\011\036\063\042\112\045\150\046" +
    "\076\063\354\064\075\001\001\000\036\003\136\004\143" +
    "\010\146\011\107\015\126\027\145\032\067\033\011\036" +
    "\063\042\112\045\150\046\076\063\353\064\075\001\001" +
    "\000\036\003\136\004\143\010\146\011\107\015\126\027" +
    "\145\032\067\033\011\036\063\042\112\045\150\046\076" +
    "\063\352\064\075\001\001\000\036\003\136\004\143\010" +
    "\146\011\107\015\126\027\145\032\067\033\011\036\063" +
    "\042\112\045\150\046\076\063\351\064\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\015\251\020" +
    "\366\001\001\000\002\001\001\000\006\015\251\020\370" +
    "\001\001\000\002\001\001\000\006\015\251\020\372\001" +
    "\001\000\002\001\001\000\030\003\136\004\143\010\146" +
    "\011\107\015\126\027\374\032\067\033\011\045\150\046" +
    "\076\064\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\015\251\020\377\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\054\002\077\003\136" +
    "\004\143\005\121\010\146\011\107\012\u0103\015\126\024" +
    "\103\025\074\026\105\027\145\032\067\033\011\035\137" +
    "\036\063\042\112\045\150\046\076\063\120\064\075\001" +
    "\001\000\002\001\001\000\052\002\077\003\136\004\143" +
    "\005\121\010\146\011\107\015\126\024\u0105\025\074\026" +
    "\105\027\145\032\067\033\011\035\137\036\063\042\112" +
    "\045\150\046\076\063\120\064\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\002\077\003\136\004\143" +
    "\005\121\010\146\011\107\015\126\024\u010b\025\u010a\026" +
    "\105\027\145\032\067\033\011\035\137\036\063\042\112" +
    "\045\150\046\076\063\120\064\075\001\001\000\042\003" +
    "\136\004\143\005\121\010\146\011\107\015\126\027\145" +
    "\032\067\033\011\035\u0109\036\063\042\112\045\150\046" +
    "\076\063\120\064\075\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\050\002\077\003\136\004" +
    "\143\005\121\010\146\011\107\015\126\025\u010d\026\u010e" +
    "\027\145\032\067\033\011\035\137\036\063\042\112\045" +
    "\150\046\076\063\120\064\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\032\u0119\033\011\001\001\000\002\001\001" +
    "\000\060\002\077\003\136\004\143\005\121\010\146\011" +
    "\107\012\065\014\u012c\015\126\024\103\025\074\026\105" +
    "\027\145\032\067\033\011\035\137\036\063\041\101\042" +
    "\112\045\150\046\076\063\120\064\075\001\001\000\014" +
    "\006\u011e\007\u0125\032\020\033\011\034\261\001\001\000" +
    "\014\006\u011e\007\u011d\032\020\033\011\034\261\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\060\002\077\003\136\004\143\005\121\010\146\011\107" +
    "\012\065\014\u0121\015\126\024\103\025\074\026\105\027" +
    "\145\032\067\033\011\035\137\036\063\041\101\042\112" +
    "\045\150\046\076\063\120\064\075\001\001\000\002\001" +
    "\001\000\060\002\077\003\136\004\143\005\121\010\146" +
    "\011\107\012\065\014\u0123\015\126\024\103\025\074\026" +
    "\105\027\145\032\067\033\011\035\137\036\063\041\101" +
    "\042\112\045\150\046\076\063\120\064\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\060\002\077\003\136\004\143\005\121\010" +
    "\146\011\107\012\065\014\u0128\015\126\024\103\025\074" +
    "\026\105\027\145\032\067\033\011\035\137\036\063\041" +
    "\101\042\112\045\150\046\076\063\120\064\075\001\001" +
    "\000\002\001\001\000\060\002\077\003\136\004\143\005" +
    "\121\010\146\011\107\012\065\014\u012a\015\126\024\103" +
    "\025\074\026\105\027\145\032\067\033\011\035\137\036" +
    "\063\041\101\042\112\045\150\046\076\063\120\064\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\060\002\077\003\136\004\143\005\121\010\146" +
    "\011\107\012\065\014\u012e\015\126\024\103\025\074\026" +
    "\105\027\145\032\067\033\011\035\137\036\063\041\101" +
    "\042\112\045\150\046\076\063\120\064\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\060\002\077\003\136" +
    "\004\143\005\121\010\146\011\107\012\065\014\u0141\015" +
    "\126\024\103\025\074\026\105\027\145\032\067\033\011" +
    "\035\137\036\063\041\101\042\112\045\150\046\076\063" +
    "\120\064\075\001\001\000\014\006\u011e\007\u013a\032\020" +
    "\033\011\034\261\001\001\000\014\006\u011e\007\u0133\032" +
    "\020\033\011\034\261\001\001\000\002\001\001\000\002" +
    "\001\001\000\060\002\077\003\136\004\143\005\121\010" +
    "\146\011\107\012\065\014\u0136\015\126\024\103\025\074" +
    "\026\105\027\145\032\067\033\011\035\137\036\063\041" +
    "\101\042\112\045\150\046\076\063\120\064\075\001\001" +
    "\000\002\001\001\000\060\002\077\003\136\004\143\005" +
    "\121\010\146\011\107\012\065\014\u0138\015\126\024\103" +
    "\025\074\026\105\027\145\032\067\033\011\035\137\036" +
    "\063\041\101\042\112\045\150\046\076\063\120\064\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\060\002\077\003\136\004\143" +
    "\005\121\010\146\011\107\012\065\014\u013d\015\126\024" +
    "\103\025\074\026\105\027\145\032\067\033\011\035\137" +
    "\036\063\041\101\042\112\045\150\046\076\063\120\064" +
    "\075\001\001\000\002\001\001\000\060\002\077\003\136" +
    "\004\143\005\121\010\146\011\107\012\065\014\u013f\015" +
    "\126\024\103\025\074\026\105\027\145\032\067\033\011" +
    "\035\137\036\063\041\101\042\112\045\150\046\076\063" +
    "\120\064\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\060\002\077\003\136\004\143\005" +
    "\121\010\146\011\107\012\065\014\u0143\015\126\024\103" +
    "\025\074\026\105\027\145\032\067\033\011\035\137\036" +
    "\063\041\101\042\112\045\150\046\076\063\120\064\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\u0147\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\u014b\001\001\000" +
    "\002\001\001\000\014\006\u011e\007\u0151\032\020\033\011" +
    "\034\261\001\001\000\014\006\u011e\007\u014e\032\020\033" +
    "\011\034\261\001\001\000\002\001\001\000\004\015\u0150" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\u0153\001\001\000\002\001\001\000\006\032\u0155\033\011" +
    "\001\001\000\004\015\u0156\001\001\000\002\001\001\000" +
    "\014\006\u011e\007\u015c\032\020\033\011\034\261\001\001" +
    "\000\014\006\u011e\007\u0159\032\020\033\011\034\261\001" +
    "\001\000\002\001\001\000\004\015\u015b\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\u015e\001\001\000" +
    "\002\001\001\000\006\013\u0161\047\u0160\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\061" +
    "\u0165\062\u0167\001\001\000\002\001\001\000\004\013\u0172" +
    "\001\001\000\010\013\u016a\032\u016b\033\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\061\u016d\062\u0167" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\u0170\001\001\000\006\032\u016b\033\011" +
    "\001\001\000\004\062\u0171\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\032\u0175\033\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\u0161\047\u0179\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\032\020\033\011" +
    "\034\u0180\001\001\000\002\001\001\000\004\051\u0183\001" +
    "\001\000\010\032\u018b\033\011\057\u018d\001\001\000\006" +
    "\032\u018a\033\011\001\001\000\002\001\001\000\014\006" +
    "\u011e\007\u0185\032\020\033\011\034\261\001\001\000\002" +
    "\001\001\000\006\015\u0187\016\u0188\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\032\u018f\033\011\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AlloyParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AlloyParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AlloyParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




  public Unit alloyunit=null;
  public String alloyfile="";

  public Pos alloypos(Symbol x) {
	  if (x==null) return null;
	  if (x.value instanceof Pos) return (Pos)(x.value);
	  if (x.value instanceof Expr) return ((Expr)(x.value)).pos;
	  return null;
  }

  public void syntax_error(Symbol x) {
    Map<Integer,String> ch=new LinkedHashMap<Integer,String>();
    ch.put(AlloySym.ABSTRACT         ,"abstract");
    ch.put(AlloySym.ALL              ,"all");
    ch.put(AlloySym.ALL2             ,"all");
    ch.put(AlloySym.AMPERSAND        ,"\'&\'");
    ch.put(AlloySym.AND              ,"\'&&\'");
    ch.put(AlloySym.ARROW            ,"\'->\'");
    ch.put(AlloySym.AS               ,"as");
    ch.put(AlloySym.ASSERT           ,"assert");
    ch.put(AlloySym.AT               ,"\'@\'");
    ch.put(AlloySym.BAR              ,"\'|\'");
    ch.put(AlloySym.BUT              ,"but");
    ch.put(AlloySym.CARET            ,"\'^\'");
    ch.put(AlloySym.CHECK            ,"check");
    ch.put(AlloySym.COLON            ,"\':\'");
    ch.put(AlloySym.COMMA            ,"\',\'");
    ch.put(AlloySym.DOLLAR           ,"\'$\'");
    ch.put(AlloySym.DOMAIN           ,"\'<:\'");
    ch.put(AlloySym.DOT              ,"\'.\'");
    ch.put(AlloySym.ELSE             ,"else");
    ch.put(AlloySym.EQUALS           ,"\'=\'");
    ch.put(AlloySym.EXACTLY          ,"exactly");
    ch.put(AlloySym.EXPECT           ,"expect");
    ch.put(AlloySym.EXTENDS          ,"extends");
    ch.put(AlloySym.FACT             ,"fact");
    ch.put(AlloySym.FOR              ,"for");
    ch.put(AlloySym.FUN              ,"fun");
    ch.put(AlloySym.GT               ,"\'>\'");
    ch.put(AlloySym.GTE              ,"\'>=\'");
    ch.put(AlloySym.HASH             ,"\'#\'");
    ch.put(AlloySym.ID               ,"IDENTIFIER");
    ch.put(AlloySym.IDEN             ,"iden");
    ch.put(AlloySym.IFF              ,"\'<=>\'");
    ch.put(AlloySym.IMPLIES          ,"\'=>\'");
    ch.put(AlloySym.IN               ,"in");
    ch.put(AlloySym.INT              ,"int");
    ch.put(AlloySym.LBRACE           ,"\'{\'");
    ch.put(AlloySym.LBRACKET         ,"\'[\'");
    ch.put(AlloySym.LET              ,"let");
    ch.put(AlloySym.LONE             ,"lone");
    ch.put(AlloySym.LONE2            ,"lone");
    ch.put(AlloySym.LPAREN           ,"\'(\'");
    ch.put(AlloySym.LT               ,"\'<\'");
    ch.put(AlloySym.LTE              ,"\'=<\'");
    ch.put(AlloySym.MINUS            ,"\'-\'");
    ch.put(AlloySym.MODULE           ,"module");
    ch.put(AlloySym.NO               ,"no");
    ch.put(AlloySym.NO2              ,"no");
    ch.put(AlloySym.NONE             ,"none");
    ch.put(AlloySym.NOT              ,"\'!\'");
    ch.put(AlloySym.NOTEQUALS        ,"\'!=\'");
    ch.put(AlloySym.NOTGT            ,"\'!>\'");
    ch.put(AlloySym.NOTGTE           ,"\'!>=\'");
    ch.put(AlloySym.NOTIN            ,"\'!in\'");
    ch.put(AlloySym.NOTLT            ,"\'!<\'");
    ch.put(AlloySym.NOTLTE           ,"\'!=<\'");
    ch.put(AlloySym.NUMBER           ,"NUMBER");
    ch.put(AlloySym.ONE              ,"one");
    ch.put(AlloySym.ONE2             ,"one");
    ch.put(AlloySym.OPEN             ,"open");
    ch.put(AlloySym.OR               ,"\'||\'");
    ch.put(AlloySym.PLUS             ,"\'+\'");
    ch.put(AlloySym.PLUSPLUS         ,"\'++\'");
    ch.put(AlloySym.PRED             ,"pred");
    ch.put(AlloySym.RANGE            ,"\':>\'");
    ch.put(AlloySym.RBRACE           ,"\'}\'");
    ch.put(AlloySym.RBRACKET         ,"\']\'");
    ch.put(AlloySym.RPAREN           ,"\')\'");
    ch.put(AlloySym.RUN              ,"run");
    ch.put(AlloySym.SET              ,"set");
    ch.put(AlloySym.SIG              ,"sig");
    ch.put(AlloySym.SIGINT           ,"Int");
    ch.put(AlloySym.SLASH            ,"\'/\'");
    ch.put(AlloySym.SOME             ,"some");
    ch.put(AlloySym.SOME2            ,"some");
    ch.put(AlloySym.STAR             ,"\'*\'");
    ch.put(AlloySym.SUM              ,"sum");
    ch.put(AlloySym.SUM2             ,"sum");
    ch.put(AlloySym.THIS             ,"this");
    ch.put(AlloySym.TILDE            ,"\'~\'");
    ch.put(AlloySym.UNIV             ,"univ");
    TreeSet<String> list=new TreeSet<String>();
    Pos p=alloypos(x);
    for(Map.Entry<Integer,String> e:ch.entrySet()) {
        int act=get_action(((Symbol)stack.peek()).parse_state, (int)(e.getKey()) );
        if (act!=0) list.add(e.getValue());
    }
    String ans="";
    for(String e:list) { if (ans.length()!=0) ans+=" "; ans+=e; }
    if (ans.length()!=0)
       throw new ErrorSyntax(p, "Syntax error. There are "+list.size()+" (potentially) legal tokens that can appear here: "+ans);
    else
       throw new ErrorSyntax(p, "Syntax error.");
  }

  public static Unit alloy_parseFile(String name,String prefix) {
    Unit u=new Unit(prefix);
    FileInputStream fis=null;
    InputStreamReader isr=null;
    AlloyFilter s=null;
    while(true) {
      if (name.length()==0) {
        BufferedReader z=new BufferedReader(new InputStreamReader(System.in));
        s=new AlloyFilter("",z);
      }
      else {
        try { fis=new FileInputStream(name); } catch(FileNotFoundException x) { break; }
        try { isr=new InputStreamReader(fis,"ISO8859_1"); } catch(UnsupportedEncodingException x) { break; }
        s=new AlloyFilter(name,isr);
      }
      AlloyParser p=new AlloyParser(s);
      p.alloyunit=u; p.alloyfile=name;
      try {p.parse(); s.close();}
        catch(ErrorInternal e) {throw e;}
        catch(ErrorSyntax e) {throw e;}
        catch(ErrorType e) {throw e;}
        catch(Exception e) {u=null;}
      break;
    }
    // The number of files we can open concurrently is a very scarse OS resource,
    // so we really need to make best effort to close all the input streams.
    try { if (s!=null) s.close(); } catch(IOException x) {u=null;}
    try { if (isr!=null) isr.close(); } catch(IOException x) {u=null;}
    try { if (fis!=null) fis.close(); } catch(IOException x) {u=null;}
    if (u==null) throw new ErrorInternal(null,null,"Failed to parse the file \""+name+"\"");
    return u;
  }

  public static Unit alloy_parseStream(Reader isr) {
    String prefix="";
    Unit u=new Unit(prefix);
    AlloyFilter s=null;
    while(true) {
      s=new AlloyFilter("",isr);
      AlloyParser p=new AlloyParser(s);
      p.alloyunit=u; p.alloyfile="";
      try {p.parse(); s.close();}
        catch(ErrorInternal e) {throw e;}
        catch(ErrorSyntax e) {throw e;}
        catch(ErrorType e) {throw e;}
        catch(Exception e) {u=null;}
      break;
    }
    // The number of files we can open concurrently is a very scarse OS resource,
    // so we really need to make best effort to close all the input streams.
    try { if (s!=null) s.close(); } catch(IOException x) {u=null;}
    try { if (isr!=null) isr.close(); } catch(IOException x) {u=null;}
    if (u==null) throw new ErrorInternal(null,null,"Parser failed to parse this input!");
    return u;
  }

}

/** Autogenerated by CUP. */
class CUP$AlloyParser$actions {
  private final AlloyParser parser;

  /** Constructor */
  CUP$AlloyParser$actions(AlloyParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
@SuppressWarnings("unchecked") public final java_cup.runtime.Symbol CUP$AlloyParser$do_action(
    int                        CUP$AlloyParser$act_num,
    java_cup.runtime.lr_parser CUP$AlloyParser$parser,
    java.util.Stack            CUP$AlloyParser$stack,
    int                        CUP$AlloyParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AlloyParser$result;

      /* select the action based on the action number */
      switch (CUP$AlloyParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // BaseExpr ::= LBRACE Declp RBRACE 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-2)).value;
		List<VarDecl> a = (List<VarDecl>)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		 RESULT=ExprQuant.Op.COMPREHENSION.make(o,a,new ExprSequence(null,new ArrayList<Expr>()),null); 
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",1, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // BaseExpr ::= LBRACE Declp ExprParaOrBar RBRACE 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-3)).value;
		List<VarDecl> a = (List<VarDecl>)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-2)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		 RESULT=ExprQuant.Op.COMPREHENSION.make(o,a,b,null); 
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",1, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // BaseExpr ::= ExprPara 
            {
              Expr RESULT =null;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=x;                                           
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",1, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // BaseExpr ::= Name 
            {
              Expr RESULT =null;
		ExprName x = (ExprName)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=x;                                           
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",1, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // BaseExpr ::= AT Name 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		ExprName x = (ExprName)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=new ExprName(o,"@"+x.name);                  
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",1, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // BaseExpr ::= LPAREN Expr RPAREN 
            {
              Expr RESULT =null;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		 RESULT=x;                                           
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",1, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // BaseExpr ::= THIS 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=new ExprName(o,"this");                      
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",1, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // BaseExpr ::= SIGINT 
            {
              Expr RESULT =null;
		Pos x = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=ExprConstant.Op.SIGINT.make(x);              
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",1, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // BaseExpr ::= UNIV 
            {
              Expr RESULT =null;
		Pos x = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=ExprConstant.Op.UNIV.make(x);                
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",1, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // BaseExpr ::= IDEN 
            {
              Expr RESULT =null;
		Pos x = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=ExprConstant.Op.IDEN.make(x);                
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",1, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // BaseExpr ::= NONE 
            {
              Expr RESULT =null;
		Pos x = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=ExprConstant.Op.NONE.make(x);                
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",1, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // BaseExpr ::= NUMBER 
            {
              Expr RESULT =null;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=x;                                           
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",1, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // UnopExpr ::= CARET UnopExpr 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.CLOSURE    .make(o,b);  
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("UnopExpr",50, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // UnopExpr ::= STAR UnopExpr 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.RCLOSURE   .make(o,b);  
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("UnopExpr",50, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // UnopExpr ::= TILDE UnopExpr 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.TRANSPOSE  .make(o,b);  
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("UnopExpr",50, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // UnopExpr ::= BaseExpr 
            {
              Expr RESULT =null;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=b;                                   
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("UnopExpr",50, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // DotExpr ::= BracketExpr DOT DISJ 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		Pos b = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=new ExprJoin(o,a,new ExprName(b,"disj")); 
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("DotExpr",7, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // DotExpr ::= BracketExpr DOT UnopExpr 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=new ExprJoin(o,a,b                     ); 
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("DotExpr",7, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // DotExpr ::= UnopExpr 
            {
              Expr RESULT =null;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=b;                                        
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("DotExpr",7, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // BracketExpr ::= DISJ LBRACKET Exprs RBRACKET 
            {
              Expr RESULT =null;
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-3)).value;
		List<Expr> b = (List<Expr>)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		 Expr aa=new ExprName(a,"disj"); for(Expr bb:b) aa=new ExprJoin(bb.pos, bb, aa); RESULT=aa; 
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("BracketExpr",2, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // BracketExpr ::= BracketExpr LBRACKET Exprs RBRACKET 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-3)).value;
		List<Expr> b = (List<Expr>)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		 Expr aa=a;                      for(Expr bb:b) aa=new ExprJoin(bb.pos, bb, aa); RESULT=aa; 
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("BracketExpr",2, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // BracketExpr ::= DotExpr 
            {
              Expr RESULT =null;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=b;                                                                                  
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("BracketExpr",2, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // RangeExpr ::= RangeExpr RANGE BracketExpr 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.RANGE.make(o,a,b);     
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("RangeExpr",35, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // RangeExpr ::= BracketExpr 
            {
              Expr RESULT =null;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=b;                                   
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("RangeExpr",35, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // DomainExpr ::= DomainExpr DOMAIN RangeExpr 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.DOMAIN.make(o,a,b);    
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("DomainExpr",6, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // DomainExpr ::= RangeExpr 
            {
              Expr RESULT =null;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=b;                                   
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("DomainExpr",6, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // RelationExpr ::= DomainExpr LONE_ARROW_LONE RelationExpr 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.LONE_ARROW_LONE .make(o,a,b); 
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("RelationExpr",36, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // RelationExpr ::= DomainExpr LONE_ARROW_ONE RelationExpr 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.LONE_ARROW_ONE  .make(o,a,b); 
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("RelationExpr",36, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // RelationExpr ::= DomainExpr LONE_ARROW_SOME RelationExpr 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.LONE_ARROW_SOME .make(o,a,b); 
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("RelationExpr",36, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // RelationExpr ::= DomainExpr LONE_ARROW_ANY RelationExpr 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.LONE_ARROW_ANY  .make(o,a,b); 
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("RelationExpr",36, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // RelationExpr ::= DomainExpr ONE_ARROW_LONE RelationExpr 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.ONE_ARROW_LONE  .make(o,a,b); 
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("RelationExpr",36, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // RelationExpr ::= DomainExpr ONE_ARROW_ONE RelationExpr 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.ONE_ARROW_ONE   .make(o,a,b); 
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("RelationExpr",36, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // RelationExpr ::= DomainExpr ONE_ARROW_SOME RelationExpr 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.ONE_ARROW_SOME  .make(o,a,b); 
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("RelationExpr",36, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // RelationExpr ::= DomainExpr ONE_ARROW_ANY RelationExpr 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.ONE_ARROW_ANY   .make(o,a,b); 
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("RelationExpr",36, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // RelationExpr ::= DomainExpr SOME_ARROW_LONE RelationExpr 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.SOME_ARROW_LONE .make(o,a,b); 
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("RelationExpr",36, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // RelationExpr ::= DomainExpr SOME_ARROW_ONE RelationExpr 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.SOME_ARROW_ONE  .make(o,a,b); 
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("RelationExpr",36, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // RelationExpr ::= DomainExpr SOME_ARROW_SOME RelationExpr 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.SOME_ARROW_SOME .make(o,a,b); 
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("RelationExpr",36, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // RelationExpr ::= DomainExpr SOME_ARROW_ANY RelationExpr 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.SOME_ARROW_ANY  .make(o,a,b); 
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("RelationExpr",36, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // RelationExpr ::= DomainExpr ANY_ARROW_LONE RelationExpr 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.ANY_ARROW_LONE  .make(o,a,b); 
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("RelationExpr",36, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // RelationExpr ::= DomainExpr ANY_ARROW_ONE RelationExpr 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.ANY_ARROW_ONE   .make(o,a,b); 
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("RelationExpr",36, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // RelationExpr ::= DomainExpr ANY_ARROW_SOME RelationExpr 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.ANY_ARROW_SOME  .make(o,a,b); 
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("RelationExpr",36, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // RelationExpr ::= DomainExpr ARROW RelationExpr 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.ARROW           .make(o,a,b); 
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("RelationExpr",36, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // RelationExpr ::= DomainExpr 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=a;                                          
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("RelationExpr",36, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // IntersectExpr ::= IntersectExpr AMPERSAND RelationExpr 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.INTERSECT.make(o,a,b); 
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("IntersectExpr",21, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // IntersectExpr ::= RelationExpr 
            {
              Expr RESULT =null;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=b;                                   
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("IntersectExpr",21, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // OverrideExpr ::= OverrideExpr PLUSPLUS IntersectExpr 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.PLUSPLUS.make(o,a,b);  
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("OverrideExpr",32, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // OverrideExpr ::= IntersectExpr 
            {
              Expr RESULT =null;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=b;                                   
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("OverrideExpr",32, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // NumUnopExpr ::= DOLLAR NumUnopExpr 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.INTTOATOM  .make(o,b);  
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("NumUnopExpr",28, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // NumUnopExpr ::= INT NumUnopExpr 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.SUM        .make(o,b);  
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("NumUnopExpr",28, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // NumUnopExpr ::= SUM NumUnopExpr 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.SUM        .make(o,b);  
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("NumUnopExpr",28, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // NumUnopExpr ::= HASH NumUnopExpr 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.CARDINALITY.make(o,b);  
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("NumUnopExpr",28, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // NumUnopExpr ::= OverrideExpr 
            {
              Expr RESULT =null;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=b;                                   
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("NumUnopExpr",28, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // UnionDiffExpr ::= UnionDiffExpr MINUS NumUnopExpr 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.MINUS.make(o,a,b);     
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExpr",49, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // UnionDiffExpr ::= UnionDiffExpr PLUS NumUnopExpr 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.PLUS.make(o,a,b);      
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExpr",49, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // UnionDiffExpr ::= NumUnopExpr 
            {
              Expr RESULT =null;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=b;                                   
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExpr",49, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // CompareExpr ::= CompareExpr NOTGTE UnionDiffExpr 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.NOT.make(o,ExprBinary.Op.GTE   .make(o,a,b)); 
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("CompareExpr",3, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // CompareExpr ::= CompareExpr NOTLTE UnionDiffExpr 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.NOT.make(o,ExprBinary.Op.LTE   .make(o,a,b)); 
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("CompareExpr",3, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // CompareExpr ::= CompareExpr NOTGT UnionDiffExpr 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.NOT.make(o,ExprBinary.Op.GT    .make(o,a,b)); 
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("CompareExpr",3, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // CompareExpr ::= CompareExpr NOTLT UnionDiffExpr 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.NOT.make(o,ExprBinary.Op.LT    .make(o,a,b)); 
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("CompareExpr",3, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // CompareExpr ::= CompareExpr NOTIN UnionDiffExpr 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.NOT.make(o,ExprBinary.Op.IN    .make(o,a,b)); 
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("CompareExpr",3, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // CompareExpr ::= CompareExpr NOTEQUALS UnionDiffExpr 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.NOT.make(o,ExprBinary.Op.EQUALS.make(o,a,b)); 
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("CompareExpr",3, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // CompareExpr ::= CompareExpr GTE UnionDiffExpr 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.GTE      .make(o,a,b);                       
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("CompareExpr",3, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // CompareExpr ::= CompareExpr LTE UnionDiffExpr 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.LTE      .make(o,a,b);                       
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("CompareExpr",3, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // CompareExpr ::= CompareExpr GT UnionDiffExpr 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.GT       .make(o,a,b);                       
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("CompareExpr",3, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // CompareExpr ::= CompareExpr LT UnionDiffExpr 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.LT       .make(o,a,b);                       
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("CompareExpr",3, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // CompareExpr ::= CompareExpr IN UnionDiffExpr 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.IN       .make(o,a,b);                       
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("CompareExpr",3, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // CompareExpr ::= CompareExpr EQUALS UnionDiffExpr 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.EQUALS   .make(o,a,b);                       
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("CompareExpr",3, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // CompareExpr ::= SET UnionDiffExpr 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=ExprUnary .Op.SETMULT  .make(o,b);                         
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("CompareExpr",3, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // CompareExpr ::= ONE UnionDiffExpr 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=ExprUnary .Op.ONE      .make(o,b);                         
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("CompareExpr",3, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // CompareExpr ::= LONE UnionDiffExpr 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=ExprUnary .Op.LONE     .make(o,b);                         
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("CompareExpr",3, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // CompareExpr ::= SOME UnionDiffExpr 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=ExprUnary .Op.SOME     .make(o,b);                         
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("CompareExpr",3, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // CompareExpr ::= NO UnionDiffExpr 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=ExprUnary .Op.NO       .make(o,b);                         
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("CompareExpr",3, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // CompareExpr ::= ALL UnionDiffExpr 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=ExprUnary .Op.ALL      .make(o,b);                         
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("CompareExpr",3, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // CompareExpr ::= UnionDiffExpr 
            {
              Expr RESULT =null;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=b;                                                         
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("CompareExpr",3, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // NegExpr ::= NOT NegExpr 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=ExprUnary.Op.NOT.make(o,b); 
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("NegExpr",27, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // NegExpr ::= CompareExpr 
            {
              Expr RESULT =null;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=b;                          
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("NegExpr",27, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // AndExpr ::= AndExpr AND NegExpr 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.AND.make(o,a,b);       
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("AndExpr",0, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // AndExpr ::= NegExpr 
            {
              Expr RESULT =null;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=b;                                   
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("AndExpr",0, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ImpliesExprOpen ::= AndExpr IMPLIES ImpliesExpr 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.IMPLIES.make(o,a,b); 
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprOpen",20, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ImpliesExprOpen ::= AndExpr IMPLIES ImpliesExprClose ELSE ImpliesExprOpen 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-4)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-3)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-2)).value;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=new ExprITE(o,a,b,c);              
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprOpen",20, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ImpliesExprClose ::= AndExpr IMPLIES ImpliesExprClose ELSE ImpliesExprClose 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-4)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-3)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-2)).value;
		Expr c = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=new ExprITE(o,a,b,c);              
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprClose",19, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ImpliesExprClose ::= AndExpr 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=a; 
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprClose",19, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ImpliesExpr ::= ImpliesExprOpen 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=a; 
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("ImpliesExpr",18, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ImpliesExpr ::= ImpliesExprClose 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=a; 
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("ImpliesExpr",18, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // EquivExpr ::= EquivExpr IFF ImpliesExpr 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.IFF.make(o,a,b);  
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("EquivExpr",8, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // EquivExpr ::= ImpliesExpr 
            {
              Expr RESULT =null;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=b;                              
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("EquivExpr",8, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // OrExpr ::= OrExpr OR EquivExpr 
            {
              Expr RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-2)).value;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=ExprBinary.Op.OR.make(o,a,b);   
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("OrExpr",31, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // OrExpr ::= EquivExpr 
            {
              Expr RESULT =null;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=b;                              
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("OrExpr",31, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Expr ::= SUM2 Declp ExprParaOrBar 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-2)).value;
		List<VarDecl> a = (List<VarDecl>)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=ExprQuant.Op.SUM .make(o,a,b,null); 
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("Expr",10, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Expr ::= ONE2 Declp ExprParaOrBar 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-2)).value;
		List<VarDecl> a = (List<VarDecl>)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=ExprQuant.Op.ONE .make(o,a,b,null); 
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("Expr",10, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Expr ::= LONE2 Declp ExprParaOrBar 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-2)).value;
		List<VarDecl> a = (List<VarDecl>)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=ExprQuant.Op.LONE.make(o,a,b,null); 
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("Expr",10, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Expr ::= SOME2 Declp ExprParaOrBar 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-2)).value;
		List<VarDecl> a = (List<VarDecl>)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=ExprQuant.Op.SOME.make(o,a,b,null); 
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("Expr",10, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Expr ::= NO2 Declp ExprParaOrBar 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-2)).value;
		List<VarDecl> a = (List<VarDecl>)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=ExprQuant.Op.NO  .make(o,a,b,null); 
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("Expr",10, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Expr ::= ALL2 Declp ExprParaOrBar 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-2)).value;
		List<VarDecl> a = (List<VarDecl>)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=ExprQuant.Op.ALL .make(o,a,b,null); 
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("Expr",10, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Expr ::= LET Let 
            {
              Expr RESULT =null;
		ExprLet x = (ExprLet)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=x;                                  
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("Expr",10, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Expr ::= OrExpr 
            {
              Expr RESULT =null;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=x;                                  
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("Expr",10, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Exprp ::= Exprp COMMA Expr 
            {
              List<Expr> RESULT =null;
		List<Expr> a = (List<Expr>)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-2)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 a.add(b); RESULT=a;                          
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("Exprp",16, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Exprp ::= Expr 
            {
              List<Expr> RESULT =null;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=new ArrayList<Expr>(); RESULT.add(x); 
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("Exprp",16, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Exprs ::= Exprp 
            {
              List<Expr> RESULT =null;
		List<Expr> x = (List<Expr>)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=x;                                    
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("Exprs",15, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Exprs ::= 
            {
              List<Expr> RESULT =null;
		 RESULT=new ArrayList<Expr>();                
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("Exprs",15, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ExprParaOrBar ::= ExprPara 
            {
              Expr RESULT =null;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=x; 
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("ExprParaOrBar",14, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ExprParaOrBar ::= BAR Expr 
            {
              Expr RESULT =null;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=x; 
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("ExprParaOrBar",14, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ExprParas ::= Expr ExprParas 
            {
              List<Expr> RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		List<Expr> b = (List<Expr>)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 b.add(0,a); RESULT=b;          
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("ExprParas",13, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ExprParas ::= 
            {
              List<Expr> RESULT =null;
		 RESULT=new ArrayList<Expr>();  
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("ExprParas",13, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ExprPara ::= LBRACE ExprParas RBRACE 
            {
              Expr RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-2)).value;
		List<Expr> x = (List<Expr>)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		 RESULT=new ExprSequence(o,x);  
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("ExprPara",11, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ExprParaOpt ::= ExprPara 
            {
              Expr RESULT =null;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=x;                      
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("ExprParaOpt",12, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ExprParaOpt ::= 
            {
              Expr RESULT =null;
		 RESULT=null;                   
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("ExprParaOpt",12, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Let ::= Name EQUALS Expr COMMA Let 
            {
              ExprLet RESULT =null;
		ExprName a = (ExprName)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-4)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-2)).value;
		ExprLet x = (ExprLet)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=new ExprLet(a.pos,a.name,b,x); 
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("Let",22, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Let ::= Name EQUALS Expr ExprParaOrBar 
            {
              ExprLet RESULT =null;
		ExprName a = (ExprName)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-3)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		Expr x = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=new ExprLet(a.pos,a.name,b,x); 
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("Let",22, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Decls ::= Declp 
            {
              List<VarDecl> RESULT =null;
		List<VarDecl> x = (List<VarDecl>)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=x;                        
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("Decls",5, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Decls ::= 
            {
              List<VarDecl> RESULT =null;
		 RESULT=new ArrayList<VarDecl>(); 
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("Decls",5, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Declp ::= Names COLON Expr 
            {
              List<VarDecl> RESULT =null;
		List<ExprName> a = (List<ExprName>)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-2)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=new ArrayList<VarDecl>(); RESULT.add(new VarDecl(a,b)); 
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("Declp",4, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Declp ::= EXH Names COLON Expr 
            {
              List<VarDecl> RESULT =null;
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-3)).value;
		 ExprName.hint(k,"exh");                                        
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("Declp",4, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Declp ::= DISJ Names COLON Expr 
            {
              List<VarDecl> RESULT =null;
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-3)).value;
		 ExprName.hint(k,"disj");                                       
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("Declp",4, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Declp ::= PART Names COLON Expr 
            {
              List<VarDecl> RESULT =null;
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-3)).value;
		 ExprName.hint(k,"part");                                       
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("Declp",4, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Declp ::= Declp COMMA Names COLON Expr 
            {
              List<VarDecl> RESULT =null;
		List<VarDecl> x = (List<VarDecl>)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-4)).value;
		List<ExprName> a = (List<ExprName>)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-2)).value;
		Expr b = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=x; RESULT.add(new VarDecl(a,b));                        
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("Declp",4, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Declp ::= Declp COMMA EXH Names COLON Expr 
            {
              List<VarDecl> RESULT =null;
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-3)).value;
		 ExprName.hint(k,"exh");                                        
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("Declp",4, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Declp ::= Declp COMMA DISJ Names COLON Expr 
            {
              List<VarDecl> RESULT =null;
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-3)).value;
		 ExprName.hint(k,"disj");                                       
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("Declp",4, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Declp ::= Declp COMMA PART Names COLON Expr 
            {
              List<VarDecl> RESULT =null;
		Pos k = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-3)).value;
		 ExprName.hint(k,"part");                                       
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("Declp",4, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Names ::= Names COMMA Name 
            {
              List<ExprName> RESULT =null;
		List<ExprName> a = (List<ExprName>)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-2)).value;
		ExprName b = (ExprName)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 a.add(b); RESULT=a;                               
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("Names",26, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Names ::= Name 
            {
              List<ExprName> RESULT =null;
		ExprName x = (ExprName)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=new ArrayList<ExprName>(); RESULT.add(x);  
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("Names",26, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NameHelper ::= NameHelper SLASH ID 
            {
              ExprName RESULT =null;
		ExprName a = (ExprName)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-2)).value;
		ExprName b = (ExprName)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=new ExprName(a.pos, a.name+"/"+b.name); 
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("NameHelper",25, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NameHelper ::= ID 
            {
              ExprName RESULT =null;
		ExprName x = (ExprName)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=x;                                      
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("NameHelper",25, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Name ::= THIS SLASH NameHelper 
            {
              ExprName RESULT =null;
		Pos a = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-2)).value;
		ExprName b = (ExprName)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=new ExprName(a, "this/"+b.name); 
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("Name",24, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Name ::= NameHelper 
            {
              ExprName RESULT =null;
		ExprName x = (ExprName)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=x;                               
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("Name",24, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SigRefu ::= SigRefu PLUS SIGINT 
            {
              List<String> RESULT =null;
		List<String> a = (List<String>)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-2)).value;
		 RESULT=a; RESULT.add(ParaSig.SIGINT_NAME);                                          
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("SigRefu",45, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SigRefu ::= SigRefu PLUS Name 
            {
              List<String> RESULT =null;
		List<String> a = (List<String>)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-2)).value;
		ExprName b = (ExprName)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=a; RESULT.add(b.name);                                                       
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("SigRefu",45, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SigRefu ::= SIGINT 
            {
              List<String> RESULT =null;
		 RESULT=new ArrayList<String>(); RESULT.add(ParaSig.SIGINT_NAME);                    
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("SigRefu",45, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SigRefu ::= Name 
            {
              List<String> RESULT =null;
		ExprName x = (ExprName)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=new ArrayList<String>(); RESULT.add(x.name);                                 
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("SigRefu",45, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SigRefp ::= SigRefp COMMA SigRef 
            {
              List<ExprName> RESULT =null;
		List<ExprName> a = (List<ExprName>)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-2)).value;
		ExprName b = (ExprName)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 a.add(b); RESULT=a;                                                                 
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("SigRefp",43, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SigRefp ::= SigRef 
            {
              List<ExprName> RESULT =null;
		ExprName x = (ExprName)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=new ArrayList<ExprName>(); RESULT.add(x);                                    
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("SigRefp",43, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SigRefs ::= SigRefp 
            {
              List<ExprName> RESULT =null;
		List<ExprName> x = (List<ExprName>)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=x;                                                                           
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("SigRefs",44, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SigRefs ::= 
            {
              List<ExprName> RESULT =null;
		 RESULT=new ArrayList<ExprName>();                                                   
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("SigRefs",44, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SigRef ::= SIGINT 
            {
              ExprName RESULT =null;
		Pos x = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=new ExprName(x, ParaSig.SIGINT_NAME);                                        
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("SigRef",42, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SigRef ::= UNIV 
            {
              ExprName RESULT =null;
		Pos x = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=new ExprName(x, ParaSig.UNIV_NAME);                                          
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("SigRef",42, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SigRef ::= Name 
            {
              ExprName RESULT =null;
		ExprName x = (ExprName)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=x;                                                                           
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("SigRef",42, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SigIn ::= 
            {
              List<String> RESULT =null;
		 RESULT=null;                                                                        
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("SigIn",39, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SigIn ::= IN SigRefu 
            {
              List<String> RESULT =null;
		List<String> b = (List<String>)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=b;                                                                           
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("SigIn",39, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SigIn ::= EXTENDS SIGINT 
            {
              List<String> RESULT =null;
		 RESULT=new ArrayList<String>(); RESULT.add(null); RESULT.add(ParaSig.SIGINT_NAME);  
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("SigIn",39, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SigIn ::= EXTENDS Name 
            {
              List<String> RESULT =null;
		ExprName a = (ExprName)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=new ArrayList<String>(); RESULT.add(null); RESULT.add(a.name);               
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("SigIn",39, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SigQuals ::= SigQuals SigQual 
            {
              Integer RESULT =null;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=(a|b);                                                                       
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("SigQuals",41, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SigQuals ::= 
            {
              Integer RESULT =null;
		 RESULT=0;                                                                           
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("SigQuals",41, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SigQual ::= SOME 
            {
              Integer RESULT =null;
		 RESULT=8;                                                                           
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("SigQual",40, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SigQual ::= ONE 
            {
              Integer RESULT =null;
		 RESULT=4;                                                                           
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("SigQual",40, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SigQual ::= LONE 
            {
              Integer RESULT =null;
		 RESULT=2;                                                                           
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("SigQual",40, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SigQual ::= ABSTRACT 
            {
              Integer RESULT =null;
		 RESULT=1;                                                                           
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("SigQual",40, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Sig ::= SigQuals SIG Names SigIn LBRACE Decls RBRACE ExprParaOpt 
            {
              Object RESULT =null;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-7)).value;
		List<ExprName> b = (List<ExprName>)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-5)).value;
		List<String> c = (List<String>)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-4)).value;
		List<VarDecl> d = (List<VarDecl>)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-2)).value;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		
   for(ExprName bbb:b) {
     String bb=bbb.name;
     if (c==null)
       parser.alloyunit.makeSig(bbb.pos, bb, (a&1)!=0,(a&2)!=0,(a&4)!=0,(a&8)!=0,null,null,d,e);
     else if (c.get(0)==null)
       parser.alloyunit.makeSig(bbb.pos, bb, (a&1)!=0,(a&2)!=0,(a&4)!=0,(a&8)!=0,null,(String)(c.get(1)),d,e);
     else
       parser.alloyunit.makeSig(bbb.pos, bb, (a&1)!=0,(a&2)!=0,(a&4)!=0,(a&8)!=0,c,null,d,e);
   }
 
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("Sig",38, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Predicate ::= SigRef DOT Name ExprPara 
            {
              Object RESULT =null;
		ExprName f = (ExprName)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-3)).value;
		ExprName n = (ExprName)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 parser.alloyunit.makeFun(n.pos,n.name,f   ,new ArrayList<VarDecl>(),null,v); 
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("Predicate",34, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Predicate ::= SigRef DOT Name LBRACKET Decls RBRACKET ExprPara 
            {
              Object RESULT =null;
		ExprName f = (ExprName)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-6)).value;
		ExprName n = (ExprName)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-4)).value;
		List<VarDecl> d = (List<VarDecl>)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-2)).value;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 parser.alloyunit.makeFun(n.pos,n.name,f   ,d                       ,null,v); 
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("Predicate",34, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Predicate ::= SigRef DOT Name LPAREN Decls RPAREN ExprPara 
            {
              Object RESULT =null;
		ExprName f = (ExprName)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-6)).value;
		ExprName n = (ExprName)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-4)).value;
		List<VarDecl> d = (List<VarDecl>)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-2)).value;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 parser.alloyunit.makeFun(n.pos,n.name,f   ,d                       ,null,v); 
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("Predicate",34, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Predicate ::= Name ExprPara 
            {
              Object RESULT =null;
		ExprName n = (ExprName)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 parser.alloyunit.makeFun(n.pos,n.name,null,new ArrayList<VarDecl>(),null,v); 
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("Predicate",34, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Predicate ::= Name LBRACKET Decls RBRACKET ExprPara 
            {
              Object RESULT =null;
		ExprName n = (ExprName)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-4)).value;
		List<VarDecl> d = (List<VarDecl>)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-2)).value;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 parser.alloyunit.makeFun(n.pos,n.name,null,d                       ,null,v); 
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("Predicate",34, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Predicate ::= Name LPAREN Decls RPAREN ExprPara 
            {
              Object RESULT =null;
		ExprName n = (ExprName)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-4)).value;
		List<VarDecl> d = (List<VarDecl>)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-2)).value;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 parser.alloyunit.makeFun(n.pos,n.name,null,d                       ,null,v); 
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("Predicate",34, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Function ::= SigRef DOT Name COLON Expr LBRACE Expr RBRACE 
            {
              Object RESULT =null;
		ExprName f = (ExprName)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-7)).value;
		ExprName n = (ExprName)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-5)).value;
		Expr t = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-3)).value;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		 parser.alloyunit.makeFun(n.pos,n.name,f   ,new ArrayList<VarDecl>(),t,v); 
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("Function",17, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Function ::= SigRef DOT Name LBRACKET Decls RBRACKET COLON Expr LBRACE Expr RBRACE 
            {
              Object RESULT =null;
		ExprName f = (ExprName)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-10)).value;
		ExprName n = (ExprName)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-8)).value;
		List<VarDecl> d = (List<VarDecl>)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-6)).value;
		Expr t = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-3)).value;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		 parser.alloyunit.makeFun(n.pos,n.name,f   ,d                       ,t,v); 
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("Function",17, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Function ::= SigRef DOT Name LPAREN Decls RPAREN COLON Expr LBRACE Expr RBRACE 
            {
              Object RESULT =null;
		ExprName f = (ExprName)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-10)).value;
		ExprName n = (ExprName)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-8)).value;
		List<VarDecl> d = (List<VarDecl>)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-6)).value;
		Expr t = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-3)).value;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		 parser.alloyunit.makeFun(n.pos,n.name,f   ,d                       ,t,v); 
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("Function",17, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Function ::= Name COLON Expr LBRACE Expr RBRACE 
            {
              Object RESULT =null;
		ExprName n = (ExprName)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-5)).value;
		Expr t = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-3)).value;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		 parser.alloyunit.makeFun(n.pos,n.name,null,new ArrayList<VarDecl>(),t,v); 
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("Function",17, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Function ::= Name LBRACKET Decls RBRACKET COLON Expr LBRACE Expr RBRACE 
            {
              Object RESULT =null;
		ExprName n = (ExprName)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-8)).value;
		List<VarDecl> d = (List<VarDecl>)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-6)).value;
		Expr t = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-3)).value;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		 parser.alloyunit.makeFun(n.pos,n.name,null,d                       ,t,v); 
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("Function",17, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Function ::= Name LPAREN Decls RPAREN COLON Expr LBRACE Expr RBRACE 
            {
              Object RESULT =null;
		ExprName n = (ExprName)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-8)).value;
		List<VarDecl> d = (List<VarDecl>)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-6)).value;
		Expr t = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-3)).value;
		Expr v = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		 parser.alloyunit.makeFun(n.pos,n.name,null,d                       ,t,v); 
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("Function",17, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Typescope ::= NUMBER SIGINT 
            {
              List<String> RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		 RESULT=new ArrayList<String>(); RESULT.add( ""+((ExprConstant)a).num()); RESULT.add(ParaSig.SIGINT_NAME);    
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("Typescope",48, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Typescope ::= EXACTLY NUMBER SIGINT 
            {
              List<String> RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		 RESULT=new ArrayList<String>(); RESULT.add("e"+((ExprConstant)a).num()); RESULT.add(ParaSig.SIGINT_NAME);    
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("Typescope",48, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Typescope ::= NUMBER INT 
            {
              List<String> RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		 RESULT=new ArrayList<String>(); RESULT.add( ""+((ExprConstant)a).num()); RESULT.add(ParaSig.BITWIDTH_NAME);  
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("Typescope",48, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Typescope ::= EXACTLY NUMBER INT 
            {
              List<String> RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		 RESULT=new ArrayList<String>(); RESULT.add("e"+((ExprConstant)a).num()); RESULT.add(ParaSig.BITWIDTH_NAME);  
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("Typescope",48, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Typescope ::= NUMBER Name 
            {
              List<String> RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		ExprName b = (ExprName)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=new ArrayList<String>(); RESULT.add( ""+((ExprConstant)a).num()); RESULT.add(b.name);                 
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("Typescope",48, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Typescope ::= EXACTLY NUMBER Name 
            {
              List<String> RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		ExprName b = (ExprName)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=new ArrayList<String>(); RESULT.add("e"+((ExprConstant)a).num()); RESULT.add(b.name);                 
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("Typescope",48, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Typescopes ::= Typescopes COMMA Typescope 
            {
              List<String> RESULT =null;
		List<String> a = (List<String>)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-2)).value;
		List<String> b = (List<String>)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=a; a.addAll(b);  
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("Typescopes",47, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Typescopes ::= Typescope 
            {
              List<String> RESULT =null;
		List<String> a = (List<String>)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=a;               
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("Typescopes",47, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Scope ::= Expects 
            {
              List<String> RESULT =null;
		String c = (String)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=new ArrayList<String>(); RESULT.add("");                         RESULT.add(c);                   
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("Scope",37, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Scope ::= FOR Typescopes Expects 
            {
              List<String> RESULT =null;
		List<String> b = (List<String>)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		String c = (String)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=new ArrayList<String>(); RESULT.add("");                         RESULT.add(c); RESULT.addAll(b); 
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("Scope",37, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Scope ::= FOR NUMBER BUT Typescopes Expects 
            {
              List<String> RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-3)).value;
		List<String> b = (List<String>)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		String c = (String)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=new ArrayList<String>(); RESULT.add(""+((ExprConstant)a).num()); RESULT.add(c); RESULT.addAll(b); 
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("Scope",37, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Scope ::= FOR NUMBER Expects 
            {
              List<String> RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		String c = (String)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=new ArrayList<String>(); RESULT.add(""+((ExprConstant)a).num()); RESULT.add(c);                   
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("Scope",37, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Expects ::= EXPECT NUMBER 
            {
              String RESULT =null;
		Expr a = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 RESULT=""+((ExprConstant)a).num(); 
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("Expects",9, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Expects ::= 
            {
              String RESULT =null;
		 RESULT="";                         
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("Expects",9, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Paragraphs ::= Paragraphs RUN Name Scope 
            {
              Object RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-2)).value;
		ExprName n = (ExprName)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		List<String> s = (List<String>)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		
  int overall = s.get(0).length()>0 ? Integer.parseInt(s.get(0)) : -1;
  int expects = s.get(1).length()>0 ? Integer.parseInt(s.get(1)) : -1;
  Map<String,Integer> scope=new LinkedHashMap<String,Integer>();
  Set<String> exact=new LinkedHashSet<String>();
  for(int i=2; i<s.size()-1; i=i+2) {
    String a=s.get(i);
    String b=s.get(i+1);
    if (a.charAt(0)=='e') { exact.add(b); a=a.substring(1); }
    if (scope.containsKey(b)) throw new ErrorSyntax(o,"The scope of the sig \""+b+"\" cannot be specified more than once!");
    scope.put(b, Integer.parseInt(a));
  }
  parser.alloyunit.makeRuncheck(o, n.name, false, overall,expects,scope,exact);

              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("Paragraphs",33, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Paragraphs ::= Paragraphs CHECK Name Scope 
            {
              Object RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-2)).value;
		ExprName n = (ExprName)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		List<String> s = (List<String>)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		
  int overall = s.get(0).length()>0 ? Integer.parseInt(s.get(0)) : -1;
  int expects = s.get(1).length()>0 ? Integer.parseInt(s.get(1)) : -1;
  Map<String,Integer> scope=new LinkedHashMap<String,Integer>();
  Set<String> exact=new LinkedHashSet<String>();
  for(int i=2; i<s.size()-1; i=i+2) {
    String a=s.get(i);
    String b=s.get(i+1);
    if (a.charAt(0)=='e') { exact.add(b); a=a.substring(1); }
    if (scope.containsKey(b)) throw new ErrorSyntax(o,"The scope of the sig \""+b+"\" cannot be specified more than once!");
    scope.put(b, Integer.parseInt(a));
  }
  parser.alloyunit.makeRuncheck(o, n.name, true, overall,expects,scope,exact);

              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("Paragraphs",33, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Paragraphs ::= 
            {
              Object RESULT =null;

              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("Paragraphs",33, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Paragraphs ::= Paragraphs PRED Predicate 
            {
              Object RESULT =null;

              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("Paragraphs",33, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Paragraphs ::= Paragraphs FUN Function 
            {
              Object RESULT =null;

              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("Paragraphs",33, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Paragraphs ::= Paragraphs Sig 
            {
              Object RESULT =null;

              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("Paragraphs",33, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Paragraphs ::= Paragraphs ASSERT Name ExprPara 
            {
              Object RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-2)).value;
		ExprName n = (ExprName)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 parser.alloyunit.makeAssert (o,n.name,e); 
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("Paragraphs",33, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Paragraphs ::= Paragraphs ASSERT ExprPara 
            {
              Object RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 parser.alloyunit.makeAssert (o,""    ,e); 
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("Paragraphs",33, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Paragraphs ::= Paragraphs FACT Name ExprPara 
            {
              Object RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-2)).value;
		ExprName n = (ExprName)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 parser.alloyunit.makeFact   (o,n.name,e); 
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("Paragraphs",33, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Paragraphs ::= Paragraphs FACT ExprPara 
            {
              Object RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 parser.alloyunit.makeFact   (o,""    ,e); 
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("Paragraphs",33, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Opens ::= Opens Open 
            {
              Object RESULT =null;

              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("Opens",30, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Opens ::= 
            {
              Object RESULT =null;

              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("Opens",30, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Open ::= OPEN Name LBRACKET SigRefs RBRACKET AS Name 
            {
              Object RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-6)).value;
		ExprName a = (ExprName)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-5)).value;
		List<ExprName> b = (List<ExprName>)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-3)).value;
		ExprName c = (ExprName)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 parser.alloyunit.makeOpen(o, a.name, b, c.name);                         
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("Open",29, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Open ::= OPEN Name LBRACKET SigRefs RBRACKET 
            {
              Object RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-4)).value;
		ExprName a = (ExprName)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-3)).value;
		List<ExprName> b = (List<ExprName>)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		 parser.alloyunit.makeOpen(o, a.name, b, "");                             
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("Open",29, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Open ::= OPEN Name AS Name 
            {
              Object RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-3)).value;
		ExprName a = (ExprName)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-2)).value;
		ExprName c = (ExprName)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 parser.alloyunit.makeOpen(o, a.name, new ArrayList<ExprName>(), c.name); 
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("Open",29, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Open ::= OPEN Name 
            {
              Object RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		ExprName a = (ExprName)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.peek()).value;
		 parser.alloyunit.makeOpen(o, a.name, new ArrayList<ExprName>(), "");     
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("Open",29, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Module ::= 
            {
              Object RESULT =null;
		 parser.alloyunit.makeModule(new Pos(parser.alloyfile,1,1), new ArrayList<ExprName>()); 
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("Module",23, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Module ::= MODULE Name LBRACKET Names RBRACKET 
            {
              Object RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-4)).value;
		List<ExprName> b = (List<ExprName>)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		 parser.alloyunit.makeModule(o                            , b                        ); 
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("Module",23, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Module ::= MODULE Name 
            {
              Object RESULT =null;
		Pos o = (Pos)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		 parser.alloyunit.makeModule(o                            , new ArrayList<ExprName>()); 
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("Module",23, RESULT);
            }
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Specification EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AlloyParser$stack.elementAt(CUP$AlloyParser$top-1)).value;
		RESULT = start_val;
              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AlloyParser$parser.done_parsing();
          return CUP$AlloyParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Specification ::= Module Opens Paragraphs 
            {
              Object RESULT =null;

              CUP$AlloyParser$result = parser.getSymbolFactory().newSymbol("Specification",46, RESULT);
            }
          return CUP$AlloyParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

