
package edu.mit.csail.sdg.alloy4.client;

import edu.mit.csail.sdg.alloy4.core.ExprConstant;
import edu.mit.csail.sdg.alloy4.core.ExprName;
import edu.mit.csail.sdg.alloy4.util.ErrorSyntax;
import edu.mit.csail.sdg.alloy4.util.Pos;
import java_cup.runtime.*;

/** Autogenerated by JFlex 1.4.1 */


public final class AlloyLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\64\1\63\1\0\1\64\1\63\13\0\1\61\3\0\1\61"+
    "\2\0\1\64\1\1\1\61\1\2\2\0\1\3\1\61\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\13\1\14\12\60\1\15\1\0\1\16"+
    "\1\17\1\12\1\0\1\20\10\62\1\56\21\62\1\21\1\0\1\22"+
    "\1\23\1\61\1\0\1\30\1\31\1\35\1\40\1\41\1\54\1\57"+
    "\1\43\1\45\1\46\1\44\1\36\1\55\1\37\1\47\1\53\1\62"+
    "\1\34\1\32\1\33\1\42\1\52\1\62\1\50\1\51\1\62\1\24"+
    "\1\25\1\26\1\27\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\22\31\1\32\1\33\1\34\1\35\1\33\1\36"+
    "\1\37\1\14\1\0\1\40\1\41\1\0\1\42\1\43"+
    "\1\20\1\44\1\31\1\45\14\31\1\46\4\31\1\47"+
    "\3\31\1\44\11\31\1\50\1\0\1\51\2\31\1\52"+
    "\1\34\1\53\1\54\1\55\1\56\3\31\1\57\1\31"+
    "\1\60\1\31\1\2\5\31\1\61\2\31\1\62\1\31"+
    "\1\51\1\31\1\63\4\31\1\64\1\65\1\31\1\66"+
    "\2\31\1\67\1\42\1\70\1\31\1\71\1\72\1\73"+
    "\1\74\4\31\1\75\1\76\1\31\1\77\1\100\1\101"+
    "\1\102\3\31\1\103\11\31\1\104\4\31\1\105\2\31"+
    "\1\106\2\31\1\107\1\110\2\31\1\111\1\73\3\31"+
    "\1\100\1\61";

  private static int [] zzUnpackAction() {
    int [] result = new int[188];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\65\0\65\0\152\0\65\0\65\0\65"+
    "\0\237\0\65\0\324\0\u0109\0\u013e\0\u0173\0\u01a8\0\u01dd"+
    "\0\u0212\0\65\0\65\0\65\0\65\0\65\0\u0247\0\65"+
    "\0\65\0\u027c\0\u02b1\0\u02e6\0\u031b\0\u0350\0\u0385\0\u03ba"+
    "\0\u03ef\0\u0424\0\u0459\0\u048e\0\u04c3\0\u04f8\0\u052d\0\u0562"+
    "\0\u0597\0\u05cc\0\u0601\0\u0636\0\65\0\65\0\65\0\u066b"+
    "\0\65\0\65\0\65\0\u06a0\0\65\0\65\0\u06d5\0\65"+
    "\0\65\0\65\0\65\0\u070a\0\u073f\0\u0774\0\u07a9\0\u07de"+
    "\0\u0813\0\u0848\0\u087d\0\u08b2\0\u08e7\0\u091c\0\u0951\0\u0986"+
    "\0\u09bb\0\u09f0\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e"+
    "\0\u0b63\0\u0b98\0\u04c3\0\u0bcd\0\u0c02\0\u0c37\0\u0c6c\0\u0ca1"+
    "\0\u0cd6\0\u0d0b\0\u0d40\0\u0d75\0\65\0\u0daa\0\65\0\u0ddf"+
    "\0\u0e14\0\u04c3\0\u04c3\0\u04c3\0\u04c3\0\u04c3\0\u04c3\0\u0e49"+
    "\0\u0e7e\0\u0eb3\0\u04c3\0\u0ee8\0\u04c3\0\u0f1d\0\u04c3\0\u0f52"+
    "\0\u0f87\0\u0fbc\0\u0ff1\0\u1026\0\u105b\0\u1090\0\u10c5\0\u04c3"+
    "\0\u10fa\0\u04c3\0\u112f\0\u04c3\0\u1164\0\u1199\0\u11ce\0\u1203"+
    "\0\u04c3\0\u04c3\0\u1238\0\u04c3\0\u126d\0\u12a2\0\u04c3\0\u04c3"+
    "\0\u04c3\0\u12d7\0\u04c3\0\u04c3\0\u130c\0\u04c3\0\u1341\0\u1376"+
    "\0\u13ab\0\u13e0\0\u04c3\0\u04c3\0\u1415\0\u04c3\0\u144a\0\u04c3"+
    "\0\u04c3\0\u147f\0\u14b4\0\u14e9\0\u04c3\0\u151e\0\u1553\0\u1588"+
    "\0\u15bd\0\u15f2\0\u1627\0\u165c\0\u1691\0\u16c6\0\u04c3\0\u16fb"+
    "\0\u1730\0\u1765\0\u179a\0\u04c3\0\u17cf\0\u1804\0\u04c3\0\u1839"+
    "\0\u186e\0\u04c3\0\u04c3\0\u18a3\0\u18d8\0\u04c3\0\u04c3\0\u190d"+
    "\0\u1942\0\u1977\0\u04c3\0\u04c3";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[188];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\2\45\1\46\1\45\1\47\3\45"+
    "\1\50\1\51\1\52\1\53\1\45\1\54\1\2\1\45"+
    "\2\55\70\0\1\56\70\0\1\57\66\0\1\60\1\61"+
    "\71\0\1\62\60\0\1\63\57\0\1\64\5\0\1\60"+
    "\62\0\1\65\2\0\1\63\64\0\1\66\1\0\1\67"+
    "\57\0\1\70\3\0\1\71\1\72\72\0\1\73\67\0"+
    "\1\45\1\74\1\75\3\45\1\76\1\77\23\45\32\0"+
    "\12\45\1\100\20\45\32\0\11\45\1\101\1\102\2\45"+
    "\1\103\1\45\1\104\13\45\32\0\13\45\1\105\17\45"+
    "\32\0\12\45\1\106\20\45\32\0\13\45\1\107\17\45"+
    "\32\0\11\45\1\110\5\45\1\111\13\45\32\0\17\45"+
    "\1\112\13\45\32\0\15\45\1\113\15\45\32\0\6\45"+
    "\1\114\11\45\1\115\12\45\32\0\7\45\1\116\23\45"+
    "\32\0\33\45\32\0\7\45\1\117\1\120\13\45\1\121"+
    "\1\122\5\45\32\0\4\45\1\123\2\45\1\124\13\45"+
    "\1\125\7\45\32\0\1\126\3\45\1\127\26\45\32\0"+
    "\1\130\11\45\1\131\4\45\1\132\13\45\32\0\17\45"+
    "\1\133\13\45\32\0\7\45\1\134\23\45\32\0\30\135"+
    "\1\54\2\135\2\0\63\60\1\55\1\60\6\64\1\136"+
    "\56\64\12\0\1\137\102\0\2\45\1\140\30\45\32\0"+
    "\2\45\1\141\30\45\32\0\6\45\1\142\24\45\32\0"+
    "\10\45\1\143\22\45\32\0\3\45\1\144\27\45\32\0"+
    "\3\45\1\145\27\45\32\0\25\45\1\146\5\45\32\0"+
    "\27\45\1\147\3\45\32\0\25\45\1\150\5\45\32\0"+
    "\11\45\1\151\3\45\1\152\15\45\32\0\7\45\1\153"+
    "\23\45\32\0\11\45\1\154\21\45\32\0\3\45\1\155"+
    "\27\45\32\0\7\45\1\156\23\45\32\0\3\45\1\157"+
    "\3\45\1\160\23\45\32\0\2\45\1\161\30\45\32\0"+
    "\2\45\1\162\30\45\32\0\1\163\2\45\1\164\7\45"+
    "\1\165\7\45\1\166\7\45\32\0\15\45\1\167\15\45"+
    "\32\0\3\45\1\170\27\45\32\0\11\45\1\171\21\45"+
    "\32\0\24\45\1\172\6\45\32\0\23\45\1\173\7\45"+
    "\32\0\11\45\1\174\21\45\32\0\11\45\1\175\21\45"+
    "\32\0\4\45\1\176\26\45\32\0\11\45\1\177\21\45"+
    "\32\0\5\45\1\200\25\45\32\0\7\45\1\201\23\45"+
    "\32\0\4\45\1\202\26\45\32\0\10\45\1\203\22\45"+
    "\32\0\3\45\1\204\27\45\2\0\6\64\1\136\5\64"+
    "\1\55\50\64\30\0\3\45\1\205\27\45\32\0\11\45"+
    "\1\206\21\45\32\0\11\45\1\207\21\45\32\0\7\45"+
    "\1\210\23\45\32\0\2\45\1\211\30\45\32\0\5\45"+
    "\1\212\25\45\32\0\11\45\1\213\21\45\32\0\11\45"+
    "\1\214\21\45\32\0\16\45\1\215\14\45\32\0\11\45"+
    "\1\216\21\45\32\0\5\45\1\217\25\45\32\0\11\45"+
    "\1\220\21\45\32\0\1\221\32\45\32\0\11\45\1\222"+
    "\21\45\32\0\22\45\1\223\10\45\32\0\7\45\1\224"+
    "\23\45\32\0\6\45\1\225\24\45\32\0\7\45\1\226"+
    "\23\45\32\0\3\45\1\227\27\45\32\0\10\45\1\230"+
    "\22\45\32\0\3\45\1\231\27\45\32\0\12\45\1\232"+
    "\20\45\32\0\4\45\1\233\26\45\32\0\4\45\1\234"+
    "\26\45\32\0\14\45\1\235\16\45\32\0\17\45\1\236"+
    "\13\45\32\0\3\45\1\237\27\45\32\0\7\45\1\240"+
    "\23\45\32\0\12\45\1\241\20\45\32\0\5\45\1\242"+
    "\25\45\32\0\15\45\1\243\15\45\32\0\15\45\1\244"+
    "\15\45\32\0\6\45\1\245\24\45\32\0\1\246\32\45"+
    "\32\0\3\45\1\247\27\45\32\0\15\45\1\250\15\45"+
    "\32\0\6\45\1\251\24\45\32\0\10\45\1\252\22\45"+
    "\32\0\2\45\1\253\30\45\32\0\3\45\1\254\27\45"+
    "\32\0\11\45\1\255\21\45\32\0\3\45\1\256\27\45"+
    "\32\0\11\45\1\257\21\45\32\0\5\45\1\260\25\45"+
    "\32\0\7\45\1\261\23\45\32\0\21\45\1\262\11\45"+
    "\32\0\2\45\1\263\30\45\32\0\3\45\1\264\27\45"+
    "\32\0\2\45\1\210\30\45\32\0\15\45\1\265\15\45"+
    "\32\0\3\45\1\266\27\45\32\0\3\45\1\267\27\45"+
    "\32\0\15\45\1\270\15\45\32\0\17\45\1\271\13\45"+
    "\32\0\22\45\1\272\10\45\32\0\7\45\1\273\23\45"+
    "\32\0\11\45\1\274\21\45\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6572];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\3\11\1\1\3\11\1\1\1\11\7\1\5\11"+
    "\1\1\2\11\23\1\3\11\1\1\3\11\1\0\2\11"+
    "\1\0\4\11\41\1\1\11\1\0\1\11\135\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[188];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
 public String alloy_filename="";
 private final Pos alloy_here()               { return new Pos(alloy_filename,yycolumn+1,yyline+1); }
 private final Symbol alloy_sym(int type)     { return new Symbol(type, yycolumn+1, yyline+1, alloy_here()); }
 private final Symbol alloy_id(String value)  { return new Symbol(AlloySym.ID, yycolumn+1, yyline+1, new ExprName(alloy_here(),value)); }
 private final Symbol alloy_num(String value) { return new Symbol(AlloySym.NUMBER, yycolumn+1, yyline+1, ExprConstant.Op.NUMBER.make(alloy_here(),value)); }
 //private final Symbol alloy_str(String value) {
 //  value=value.substring(1, value.length()-1);
 //  return new Symbol(AlloySym.STRING, yycolumn+1, yyline+1, value);
 //}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AlloyLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public AlloyLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 148) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
yyline=yycolumn=0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 57: 
          { return alloy_sym(AlloySym.LONE        );
          }
        case 74: break;
        case 38: 
          { return alloy_sym(AlloySym.NO          );
          }
        case 75: break;
        case 9: 
          { return alloy_sym(AlloySym.COMMA       );
          }
        case 76: break;
        case 37: 
          { return alloy_sym(AlloySym.AS          );
          }
        case 77: break;
        case 56: 
          { return alloy_sym(AlloySym.THIS        );
          }
        case 78: break;
        case 13: 
          { return alloy_sym(AlloySym.SLASH       );
          }
        case 79: break;
        case 43: 
          { return alloy_sym(AlloySym.BUT         );
          }
        case 80: break;
        case 59: 
          { return alloy_sym(AlloySym.DISJ        );
          }
        case 81: break;
        case 36: 
          { return alloy_sym(AlloySym.OR          );
          }
        case 82: break;
        case 30: 
          { return alloy_sym(AlloySym.ARROW       );
          }
        case 83: break;
        case 31: 
          { return alloy_sym(AlloySym.GTE         );
          }
        case 84: break;
        case 20: 
          { return alloy_sym(AlloySym.CARET       );
          }
        case 85: break;
        case 41: 
          { return alloy_sym(AlloySym.IFF         );
          }
        case 86: break;
        case 60: 
          { return alloy_sym(AlloySym.ELSE        );
          }
        case 87: break;
        case 3: 
          { return alloy_sym(AlloySym.HASH        );
          }
        case 88: break;
        case 12: 
          { return alloy_sym(AlloySym.DOT         );
          }
        case 89: break;
        case 22: 
          { return alloy_sym(AlloySym.BAR         );
          }
        case 90: break;
        case 69: 
          { return alloy_sym(AlloySym.EXPECT      );
          }
        case 91: break;
        case 8: 
          { return alloy_sym(AlloySym.PLUS        );
          }
        case 92: break;
        case 35: 
          { return alloy_sym(AlloySym.LTE         );
          }
        case 93: break;
        case 51: 
          { return alloy_sym(AlloySym.ONE         );
          }
        case 94: break;
        case 63: 
          { return alloy_sym(AlloySym.OPEN        );
          }
        case 95: break;
        case 25: 
          { return alloy_id  (yytext());
          }
        case 96: break;
        case 11: 
          { return alloy_sym(AlloySym.GT          );
          }
        case 97: break;
        case 70: 
          { return alloy_sym(AlloySym.MODULE      );
          }
        case 98: break;
        case 14: 
          { return alloy_sym(AlloySym.COLON       );
          }
        case 99: break;
        case 45: 
          { return alloy_sym(AlloySym.SUM         );
          }
        case 100: break;
        case 64: 
          { return alloy_sym(AlloySym.PART        );
          }
        case 101: break;
        case 16: 
          { return alloy_sym(AlloySym.EQUALS      );
          }
        case 102: break;
        case 72: 
          { return alloy_sym(AlloySym.EXTENDS     );
          }
        case 103: break;
        case 53: 
          { return alloy_sym(AlloySym.FOR         );
          }
        case 104: break;
        case 62: 
          { return alloy_sym(AlloySym.IDEN        );
          }
        case 105: break;
        case 15: 
          { return alloy_sym(AlloySym.LT          );
          }
        case 106: break;
        case 17: 
          { return alloy_sym(AlloySym.AT          );
          }
        case 107: break;
        case 32: 
          { return alloy_sym(AlloySym.RANGE       );
          }
        case 108: break;
        case 61: 
          { return alloy_sym(AlloySym.UNIV        );
          }
        case 109: break;
        case 2: 
          { return alloy_sym(AlloySym.NOT         );
          }
        case 110: break;
        case 44: 
          { return alloy_sym(AlloySym.SET         );
          }
        case 111: break;
        case 6: 
          { return alloy_sym(AlloySym.RPAREN      );
          }
        case 112: break;
        case 39: 
          { return alloy_sym(AlloySym.IN          );
          }
        case 113: break;
        case 67: 
          { return alloy_sym(AlloySym.CHECK       );
          }
        case 114: break;
        case 28: 
          { return alloy_sym(AlloySym.AND         );
          }
        case 115: break;
        case 55: 
          { return alloy_sym(AlloySym.SOME        );
          }
        case 116: break;
        case 5: 
          { return alloy_sym(AlloySym.LPAREN      );
          }
        case 117: break;
        case 66: 
          { return alloy_sym(AlloySym.FACT        );
          }
        case 118: break;
        case 10: 
          { return alloy_sym(AlloySym.MINUS       );
          }
        case 119: break;
        case 58: 
          { return alloy_sym(AlloySym.NONE        );
          }
        case 120: break;
        case 18: 
          { return alloy_sym(AlloySym.LBRACKET    );
          }
        case 121: break;
        case 19: 
          { return alloy_sym(AlloySym.RBRACKET    );
          }
        case 122: break;
        case 42: 
          { return alloy_sym(AlloySym.ALL         );
          }
        case 123: break;
        case 73: 
          { return alloy_sym(AlloySym.ABSTRACT    );
          }
        case 124: break;
        case 68: 
          { return alloy_sym(AlloySym.ASSERT      );
          }
        case 125: break;
        case 48: 
          { return alloy_sym(AlloySym.LET         );
          }
        case 126: break;
        case 1: 
          { throw new ErrorSyntax(alloy_here(),"The character \'"+yytext()+"\' cannot start a lexical token!");
          }
        case 127: break;
        case 26: 
          { return alloy_num (yytext());
          }
        case 128: break;
        case 4: 
          { return alloy_sym(AlloySym.AMPERSAND   );
          }
        case 129: break;
        case 34: 
          { return alloy_sym(AlloySym.IMPLIES     );
          }
        case 130: break;
        case 23: 
          { return alloy_sym(AlloySym.RBRACE      );
          }
        case 131: break;
        case 71: 
          { return alloy_sym(AlloySym.EXACTLY     );
          }
        case 132: break;
        case 47: 
          { return alloy_sym(AlloySym.RUN         );
          }
        case 133: break;
        case 33: 
          { return alloy_sym(AlloySym.DOMAIN      );
          }
        case 134: break;
        case 54: 
          { return alloy_sym(AlloySym.SIGINT      );
          }
        case 135: break;
        case 24: 
          { return alloy_sym(AlloySym.TILDE       );
          }
        case 136: break;
        case 21: 
          { return alloy_sym(AlloySym.LBRACE      );
          }
        case 137: break;
        case 7: 
          { return alloy_sym(AlloySym.STAR        );
          }
        case 138: break;
        case 29: 
          { return alloy_sym(AlloySym.PLUSPLUS    );
          }
        case 139: break;
        case 52: 
          { return alloy_sym(AlloySym.FUN         );
          }
        case 140: break;
        case 40: 
          { throw new ErrorSyntax(alloy_here(),"An identifier cannot start with a digit!");
          }
        case 141: break;
        case 49: 
          { return alloy_sym(AlloySym.EXH         );
          }
        case 142: break;
        case 50: 
          { return alloy_sym(AlloySym.INT         );
          }
        case 143: break;
        case 46: 
          { return alloy_sym(AlloySym.SIG         );
          }
        case 144: break;
        case 65: 
          { return alloy_sym(AlloySym.PRED        );
          }
        case 145: break;
        case 27: 
          { 
          }
        case 146: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {   return new Symbol(AlloySym.EOF, yycolumn+1, yyline+1, alloy_here());
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
