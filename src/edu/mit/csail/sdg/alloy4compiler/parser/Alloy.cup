/*
 * Alloy Analyzer 4 -- Copyright (c) 2006-2008, Felix Chang
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

/*
 * Warning: this file alone is not enough to correctly parse Alloy4 since the actual
 * language is not LALR(1); instead, we have to pre-process the token stream
 * using CompFilter.java to rearrange/transform the token stream, and then we can
 * parse the transformed token stream using this LALR(1) grammar.  For more information,
 * please refer to CompFilter.java
 */

import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.TreeSet;
import java.util.Map;
import java.util.LinkedHashMap;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.Reader;
import java.io.IOException;
import java.io.StringReader;
import java_cup_11a.runtime.*;
import edu.mit.csail.sdg.alloy4.Err;
import edu.mit.csail.sdg.alloy4.ErrorFatal;
import edu.mit.csail.sdg.alloy4.ErrorSyntax;
import edu.mit.csail.sdg.alloy4.Pos;
import edu.mit.csail.sdg.alloy4.Pair;
import edu.mit.csail.sdg.alloy4.Util;
import edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary;
import edu.mit.csail.sdg.alloy4compiler.ast.ExprConstant;
import edu.mit.csail.sdg.alloy4compiler.ast.ExprUnary;
import edu.mit.csail.sdg.alloy4compiler.ast.ExprQuant;
import edu.mit.csail.sdg.alloy4compiler.ast.Sig;
import edu.mit.csail.sdg.alloy4compiler.ast.Sig.PrimSig;

//===========================================================================//

parser code {:

  public Module alloymodule=null;

  @SuppressWarnings("unchecked")
  @Override public Symbol parse() throws java.lang.Exception {
     int act; // current action code
     Symbol lhs_sym = null; // the Symbol/stack element returned by a reduce
     short handle_size, lhs_sym_num; // information about production being reduced with
     production_tab = production_table();
     action_tab     = action_table();
     reduce_tab     = reduce_table();
     init_actions();
     user_init();
     // start
     cur_token = scan();
     stack.removeAllElements();
     stack.push(getSymbolFactory().startSymbol("START", 0, start_state()));
     tos = 0;
     for (_done_parsing = false; !_done_parsing; ) {
        act = get_action(((Symbol)stack.peek()).parse_state, cur_token.sym);
        if (act > 0) { // "shift"; thus, we shift to the encoded state by pushing it on the stack
           cur_token.parse_state = act-1;
           stack.push(cur_token);
           tos++;
           cur_token = scan();
        } else if (act<0) { // "reduce"
           lhs_sym = do_action((-act)-1, this, stack, tos);
           lhs_sym_num = production_tab[(-act)-1][0];
           handle_size = production_tab[(-act)-1][1];
           for (int i = 0; i < handle_size; i++)  {  stack.pop(); tos--; }
           act = get_reduce(((Symbol)stack.peek()).parse_state, lhs_sym_num);
           lhs_sym.parse_state = act;
           stack.push(lhs_sym);
           tos++;
        } else { // "error"
           syntax_error(cur_token);
           done_parsing();
        }
     }
     return lhs_sym;
  }

  public void syntax_error(Symbol x) throws Err {
    Map<Integer,String> ch=new LinkedHashMap<Integer,String>();
    ch.put(CompSym.ABSTRACT        , "abstract");
    ch.put(CompSym.ALL             , "all");
    ch.put(CompSym.ALL2            , "all");
    ch.put(CompSym.ANY_ARROW_LONE  , "set");
    ch.put(CompSym.ANY_ARROW_ONE   , "set");
    ch.put(CompSym.ANY_ARROW_SOME  , "set");
    ch.put(CompSym.AS              , "as");
    ch.put(CompSym.ASSERT          , "assert");
    ch.put(CompSym.BUT             , "but");
    ch.put(CompSym.CHECK           , "check");
    ch.put(CompSym.DISJ            , "disj");
    ch.put(CompSym.ELSE            , "else");
    ch.put(CompSym.ENUM            , "enum");
    ch.put(CompSym.EXACTLY         , "exactly");
    ch.put(CompSym.EXPECT          , "expect");
    ch.put(CompSym.EXTENDS         , "extends");
    ch.put(CompSym.FACT            , "fact");
    ch.put(CompSym.FOR             , "for");
    ch.put(CompSym.FUN             , "fun");
    ch.put(CompSym.ID              , "NAME");
    ch.put(CompSym.IDEN            , "iden");
    ch.put(CompSym.IN              , "in");
    ch.put(CompSym.INT             , "int");
    ch.put(CompSym.LET             , "let");
    ch.put(CompSym.LONE            , "lone");
    ch.put(CompSym.LONE2           , "lone");
    ch.put(CompSym.LONE_ARROW_ANY  , "lone");
    ch.put(CompSym.LONE_ARROW_LONE , "lone");
    ch.put(CompSym.LONE_ARROW_ONE  , "lone");
    ch.put(CompSym.LONE_ARROW_SOME , "lone");
    ch.put(CompSym.MODULE          , "module");
    ch.put(CompSym.NO              , "no");
    ch.put(CompSym.NO2             , "no");
    ch.put(CompSym.NONE            , "none");
    ch.put(CompSym.NUMBER          , "NUMBER");
    ch.put(CompSym.ONE             , "one");
    ch.put(CompSym.ONE2            , "one");
    ch.put(CompSym.ONE_ARROW_ANY   , "one");
    ch.put(CompSym.ONE_ARROW_LONE  , "one");
    ch.put(CompSym.ONE_ARROW_ONE   , "one");
    ch.put(CompSym.ONE_ARROW_SOME  , "one");
    ch.put(CompSym.OPEN            , "open");
    ch.put(CompSym.PRED            , "pred");
    ch.put(CompSym.PRIVATE         , "private");
    ch.put(CompSym.RUN             , "run");
    ch.put(CompSym.SEQ             , "seq");
    ch.put(CompSym.SET             , "set");
    ch.put(CompSym.SIG             , "sig");
    ch.put(CompSym.SIGINT          , "Int");
    ch.put(CompSym.SOME            , "some");
    ch.put(CompSym.SOME2           , "some");
    ch.put(CompSym.SOME_ARROW_ANY  , "some");
    ch.put(CompSym.SOME_ARROW_LONE , "some");
    ch.put(CompSym.SOME_ARROW_ONE  , "some");
    ch.put(CompSym.SOME_ARROW_SOME , "some");
    ch.put(CompSym.SUM             , "sum");
    ch.put(CompSym.SUM2            , "sum");
    ch.put(CompSym.THIS            , "this");
    ch.put(CompSym.UNIV            , "univ");
    ch.put(CompSym.AMPERSAND       , "&");
    ch.put(CompSym.AND             , "&&");
    ch.put(CompSym.ARROW           , "->");
    ch.put(CompSym.AT              , "@");
    ch.put(CompSym.BAR             , "|");
    ch.put(CompSym.CARET           , "^");
    ch.put(CompSym.COLON           , ":");
    ch.put(CompSym.COMMA           , ",");
    ch.put(CompSym.DOMAIN          , "<:");
    ch.put(CompSym.DOT             , ".");
    ch.put(CompSym.EQUALS          , "=");
    ch.put(CompSym.GT              , ">");
    ch.put(CompSym.GTE             , ">=");
    ch.put(CompSym.HASH            , "#");
    ch.put(CompSym.IFF             , "<=>");
    ch.put(CompSym.IMPLIES         , "->");
    ch.put(CompSym.LBRACE          , "{");
    ch.put(CompSym.LBRACKET        , "[");
    ch.put(CompSym.LPAREN          , "(");
    ch.put(CompSym.LT              , "<");
    ch.put(CompSym.LTE             , "=<");
    ch.put(CompSym.MINUS           , "-");
    ch.put(CompSym.NOT             , "!");
    ch.put(CompSym.NOTEQUALS       , "!");
    ch.put(CompSym.NOTGT           , "!");
    ch.put(CompSym.NOTGTE          , "!");
    ch.put(CompSym.NOTIN           , "!");
    ch.put(CompSym.NOTLT           , "!");
    ch.put(CompSym.NOTLTE          , "!");
    ch.put(CompSym.OR              , "||");
    ch.put(CompSym.PLUS            , "+");
    ch.put(CompSym.PLUSPLUS        , "++");
    ch.put(CompSym.RANGE           , ":>");
    ch.put(CompSym.RBRACE          , "}");
    ch.put(CompSym.RBRACKET        , "]");
    ch.put(CompSym.RPAREN          , ")");
    ch.put(CompSym.SHL             , "<<");
    ch.put(CompSym.SHR             , ">>>");
    ch.put(CompSym.SHA             , ">>");
    ch.put(CompSym.SLASH           , "/");
    ch.put(CompSym.STAR            , "*");
    ch.put(CompSym.TILDE           , "~");
    TreeSet<String> list=new TreeSet<String>();
    Pos p=Pos.UNKNOWN;
    if (x!=null && x.value instanceof Pos) p=(Pos)(x.value);
       else if (x!=null && x.value instanceof Exp) p=((Exp)(x.value)).pos;
       else if (x!=null) p=x.pos;
    if (!stack.empty()) for(Map.Entry<Integer,String> e:ch.entrySet()) {
        int key=e.getKey(), act=get_action(((Symbol)stack.peek()).parse_state, key);
        if (act==0) continue;
        try {
            if (act>0 || alloy_confirm(key)) list.add(e.getValue());
        } catch(Throwable ex) {
            // If the parser is really really confused, alloy_confirm() could fail with array out-of-bound exception, etc.
        }
    }
    String result="There are "+list.size()+" possible tokens that can appear here:\n";
    for(String item:list) result=result+item+" ";
    throw new ErrorSyntax(p, (list.size()!=0)?result:"");
  }

  private boolean alloy_confirm(int key) {
    int state = ((Symbol)stack.peek()).parse_state;
    Stack<Object> newstack=new Stack<Object>(); for(Object x:stack) newstack.push(x);
    while(true) {
      int act = get_action(state, key);
      if (act>0) return true;
      if (act==0) return false;
      int lhs_sym_num = production_tab[(-act)-1][0];
      int handle_size = production_tab[(-act)-1][1];
      for (int i = 0; i < handle_size; i++) { if (newstack.empty()) return false; newstack.pop(); }
      if (newstack.empty()) return false;
      if (newstack.peek() instanceof Symbol) state=((Symbol)newstack.peek()).parse_state;
      state=get_reduce(state, lhs_sym_num);
      newstack.push(null);
    }
  }

  static Module alloy_parseStream (List<Object> seenDollar, Map<String,String> loaded, Map<String,String> fc, Module root,
  int lineOffset, String filename, String prefix) throws Err, FileNotFoundException, IOException {
    Reader isr=null;
    try {
        if (root==null && prefix.length()!=0) throw new ErrorFatal("Internal error (parse subfile with root==null)");
        if (root!=null && prefix.length()==0) throw new ErrorFatal("Internal error (parse topfile with root!=null)");
        Module u = new Module(root, filename, prefix);
        String content = fc!=null ? fc.get(filename) : null;
        if (content==null && loaded!=null) content = loaded.get(filename);
        if (content==null) content = Util.readAll(filename);
        if (loaded!=null) loaded.put(filename,content);
        content = Util.convertLineBreak(content);
        isr=new StringReader(content);
        CompFilter s=new CompFilter(seenDollar, filename, lineOffset, new BufferedReader(isr));
        CompParser p=new CompParser(s);
        p.alloymodule=u;
        try {p.parse();} catch(Throwable ex) {if (ex instanceof Err) throw (Err)ex; throw new ErrorFatal("Parser Exception: "+ex);}
        return u;
    } finally {
        Util.close(isr);
    }
  }

:};

action code {:
    /**
     * This function is needed to handle a difficult parsing ambiguity.
     *
     * <p>
     * "some EXPR", "one EXPR", and "lone EXPR"
     * can be either formulas (saying the EXPR has at least 1, exactly 1, or at most 1 tuple),
     * or multiplicity constraints (saying something else has this multiplicity).
     *
     * <p>
     * So we let the parser generate the former by default.
     * And whenever we construct a Decl "x: y" object,
     * or an binary expression "x in y", or a function return type,
     * we call this method on y to convert it into a multiplicity constraint.
     *
     * <p>
     * This is safe, because in all 3 cases, a formula would be illegal.
     * So the first form is always wrong.
     *
     * <p>
     * And this is sufficient, because those are the only 3 places
     * where a mulitplicity constraint is allowed to appear.
     *
     * @return a newly formed multiplciity constraint (if this.op==SOME or LONE or ONE),
     * otherwise it just returns the original node.
     */
    private Exp mult(Exp x) throws Err {
        if (x instanceof ExpUnary) {
           ExpUnary y=(ExpUnary)x;
           if (y.op==ExprUnary.Op.SOME) return new ExpUnary(y.pos, ExprUnary.Op.SOMEOF, y.sub);
           if (y.op==ExprUnary.Op.LONE) return new ExpUnary(y.pos, ExprUnary.Op.LONEOF, y.sub);
           if (y.op==ExprUnary.Op.ONE)  return new ExpUnary(y.pos, ExprUnary.Op.ONEOF, y.sub);
        }
        return x;
    }
    private void nod(ExpName name) throws Err {
        if (name.name.indexOf('$')>=0) throw new ErrorSyntax(name.pos, "The name cannot contain the '$' symbol.");
    }
    private void nod(List<ExpName> names) throws Err {
        if (names!=null) for(ExpName n:names) if (n.name.indexOf('$')>=0) throw new ErrorSyntax(n.pos, "The name cannot contain the '$' symbol.");
    }
    private Exp t(ExpDot j, Pos close) throws Err {
      if (j.right instanceof ExpName) {
         String n=((ExpName)(j.right)).name;
         if (n.equals("int"))  return new ExpUnary(j.pos, ExprUnary.Op.CAST2INT, j.left);
         if (n.equals("disj")) return new ExpBuiltin(j.pos, close, Util.asList(j.left));
      }
      else if (j.right instanceof ExpBuiltin) {
         ExpBuiltin n=(ExpBuiltin)(j.right);
         List<Exp> args=new ArrayList<Exp>(n.args);
         args.add(j.left);
         return new ExpBuiltin(j.pos, n.closingBracket, args);
      }
      return j;
    }
:};

//===========================================================================//

terminal Pos ARROW;            //  ->
terminal Pos ANY_ARROW_SOME;   //  ->some       // The filter allows whitespace/comment in these 15 "*->*" tokens
terminal Pos ANY_ARROW_ONE;    //  ->one        // The filter allows whitespace/comment in these 15 "*->*" tokens
terminal Pos ANY_ARROW_LONE;   //  ->lone       // The filter allows whitespace/comment in these 15 "*->*" tokens
terminal Pos SOME_ARROW_ANY;   //  some->       // The filter allows whitespace/comment in these 15 "*->*" tokens
terminal Pos SOME_ARROW_SOME;  //  some->some   // The filter allows whitespace/comment in these 15 "*->*" tokens
terminal Pos SOME_ARROW_ONE;   //  some->one    // The filter allows whitespace/comment in these 15 "*->*" tokens
terminal Pos SOME_ARROW_LONE;  //  some->lone   // The filter allows whitespace/comment in these 15 "*->*" tokens
terminal Pos ONE_ARROW_ANY;    //  one->        // The filter allows whitespace/comment in these 15 "*->*" tokens
terminal Pos ONE_ARROW_SOME;   //  one->some    // The filter allows whitespace/comment in these 15 "*->*" tokens
terminal Pos ONE_ARROW_ONE;    //  one->one     // The filter allows whitespace/comment in these 15 "*->*" tokens
terminal Pos ONE_ARROW_LONE;   //  one->lone    // The filter allows whitespace/comment in these 15 "*->*" tokens
terminal Pos LONE_ARROW_ANY;   //  lone->any    // The filter allows whitespace/comment in these 15 "*->*" tokens
terminal Pos LONE_ARROW_SOME;  //  lone->some   // The filter allows whitespace/comment in these 15 "*->*" tokens
terminal Pos LONE_ARROW_ONE;   //  lone->one    // The filter allows whitespace/comment in these 15 "*->*" tokens
terminal Pos LONE_ARROW_LONE;  //  lone->lone   // The filter allows whitespace/comment in these 15 "*->*" tokens

terminal Pos ABSTRACT;         //  abstract
terminal Pos ALL;              //  all      // The filter enables us to disambiguate
terminal Pos ALL2;             //  all      // The filter enables us to disambiguate
terminal Pos AMPERSAND;        //  &
terminal Pos AND;              //  && and
terminal Pos AS;               //  as
terminal Pos ASSERT;           //  assert
terminal Pos AT;               //  @
terminal Pos BAR;              //  |
terminal Pos BUT;              //  but
terminal Pos CARET;            //  ^
terminal Pos CHECK;            //  check
terminal Pos COLON;            //  :
terminal Pos COMMA;            //  ,
terminal Pos DISJ;             //  disj disjoint
terminal Pos DOMAIN;           //  <:
terminal Pos DOT;              //  .
terminal Pos ELSE;             //  else
terminal Pos ENUM;             //  enum
terminal Pos EQUALS;           //  =  ==
terminal Pos EXACTLY;          //  exactly
terminal Pos EXH;              //  exh exhaustive
terminal Pos EXPECT;           //  expect
terminal Pos EXTENDS;          //  extends
terminal Pos FACT;             //  fact
terminal Pos FOR;              //  for
terminal Pos FUN;              //  fun
terminal Pos GT;               //  >
terminal Pos GTE;              //  >=
terminal Pos HASH;             //  #
terminal Pos IDEN;             //  iden
terminal Pos IFF;              //  <=> iff
terminal Pos IMPLIES;          //  => implies
terminal Pos IN;               //  in
terminal Pos INT;              //  int
terminal Pos LBRACE;           //  {
terminal Pos LBRACKET;         //  [
terminal Pos LET;              //  let
terminal Pos LONE2;            //  lone      // The filter enables us to disambiguate
terminal Pos LONE;             //  lone      // The filter enables us to disambiguate
terminal Pos LPAREN;           //  (
terminal Pos LT;               //  <
terminal Pos LTE;              //  <=     =<
terminal Pos MINUS;            //  -
terminal Pos MODULE;           //  module
terminal Pos NO2;              //  no        // The filter enables us to disambiguate
terminal Pos NO;               //  no        // The filter enables us to disambiguate
terminal Pos NONE;             //  none
terminal Pos NOT;              //  !      not
terminal Pos NOTEQUALS;        //  !=     not=    // The filter allows whitespace/comment in between
terminal Pos NOTGT;            //  !>     not>    // The filter allows whitespace/comment in between
terminal Pos NOTGTE;           //  !>=    not>=   // The filter allows whitespace/comment in between
terminal Pos NOTIN;            //  !in    notin   // The filter allows whitespace/comment in between
terminal Pos NOTLT;            //  !<     not<    // The filter allows whitespace/comment in between
terminal Pos NOTLTE;           //  !=<    not=<   // The filter allows whitespace/comment in between
terminal Pos ONE2;             //  one            // The filter enables us to disambiguate
terminal Pos ONE;              //  one            // The filter enables us to disambiguate
terminal Pos OPEN;             //  open
terminal Pos OR;               //  ||     or
terminal Pos PART;             //  part   partition
terminal Pos PLUS;             //  +
terminal Pos PLUSPLUS;         //  ++
terminal Pos PRED;             //  pred
terminal Pos PRIVATE;          //  private
terminal Pos RANGE;            //  :>
terminal Pos RBRACE;           //  }
terminal Pos RBRACKET;         //  ]
terminal Pos RPAREN;           //  )
terminal Pos RUN;              //  run
terminal Pos SEQ;              //  seq
terminal Pos SET;              //  set
terminal Pos SHL;              //  <<
terminal Pos SHR;              //  >>>
terminal Pos SHA;              //  >>
terminal Pos SIG;              //  sig
terminal Pos SIGINT;           //  Int
terminal Pos SLASH;            //  /
terminal Pos SOME2;            //  some      // The filter enables us to disambiguate
terminal Pos SOME;             //  some      // The filter enables us to disambiguate
terminal Pos STAR;             //  *
terminal Pos SUM2;             //  sum       // The filter enables us to disambiguate
terminal Pos SUM;              //  sum       // The filter enables us to disambiguate
terminal Pos THIS;             //  this
terminal Pos TILDE;            //  ~
terminal Pos UNIV;             //  univ

terminal ExpName ID;

terminal ExpConstant NUMBER;

//===========================================================================//

nonterminal Exp                        AndExprA;
nonterminal Exp                        AndExprB;
nonterminal Exp                        BaseExpr;
nonterminal Exp                        Bind;
nonterminal Exp                        BracketExprA;
nonterminal Exp                        BracketExprB;
nonterminal Exp                        CompareExprA;
nonterminal Exp                        CompareExprB;
nonterminal ExpName                    CmdLabel;
nonterminal Decl                       Decla;
nonterminal List<Decl>                 Declp;
nonterminal List<Decl>                 Decls;
nonterminal Exp                        DomainExprA;
nonterminal Exp                        DomainExprB;
nonterminal Exp                        DotExprA;
nonterminal Exp                        DotExprB;
nonterminal Exp                        EquivExprA;
nonterminal Exp                        EquivExprB;
nonterminal ExpConstant                Expects;
nonterminal Exp                        Expr;
nonterminal Exp                        Super;
nonterminal Exp                        SuperOpt;
nonterminal Exp                        SuperP;
nonterminal Exp                        SuperOrBar;
nonterminal List<Exp>                  Exprs;
nonterminal List<Exp>                  Exprp;
nonterminal                            Function;
nonterminal Exp                        ImpliesExprA;
nonterminal Exp                        ImpliesExprB;
nonterminal Exp                        ImpliesExprCloseA;
nonterminal Exp                        ImpliesExprCloseB;
nonterminal Exp                        ImpliesExprOpenA;
nonterminal Exp                        ImpliesExprOpenB;
nonterminal Exp                        IntersectExprA;
nonterminal Exp                        IntersectExprB;
nonterminal Exp                        Let;
nonterminal                            Macro;
nonterminal Exp                        MacroBody;
nonterminal ExpName                    Name;
nonterminal ExpName                    NameHelper;
nonterminal List<ExpName>              Names;
nonterminal Exp                        NegExprA;
nonterminal Exp                        NegExprB;
nonterminal Exp                        NumUnopExprA;
nonterminal Exp                        NumUnopExprB;
nonterminal Exp                        OrExprA;
nonterminal Exp                        OrExprB;
nonterminal Exp                        OverrideExprA;
nonterminal Exp                        OverrideExprB;
nonterminal                            Predicate;
nonterminal Exp                        RangeExprA;
nonterminal Exp                        RangeExprB;
nonterminal Pair<Pos,ExprBinary.Op>    RelOp;
nonterminal Exp                        RelationExprA;
nonterminal Exp                        RelationExprB;
nonterminal List<Pair<Sig,Integer>>    Scope;
nonterminal                            Sig;
nonterminal List<ExpName>              SigIn;
nonterminal List<Pos>                  SigQual;
nonterminal List<Pos>                  SigQuals;
nonterminal ExpName                    SigRef;
nonterminal List<ExpName>              SigRefp;
nonterminal List<ExpName>              SigRefs;
nonterminal List<ExpName>              SigRefu;
nonterminal                            Spec;
nonterminal List<Pair<Sig,Integer>>    Typescopes;
nonterminal Pair<Sig,Integer>          Typescope;
nonterminal Exp                        ShiftExprA;
nonterminal Exp                        ShiftExprB;
nonterminal Exp                        UnionDiffExprA;
nonterminal Exp                        UnionDiffExprB;
nonterminal Exp                        UnopExprA;
nonterminal Exp                        UnopExprB;
nonterminal Pos                        Vis;

//===========================================================================//

Spec ::= Spec MODULE:o Name:n                                                  {: nod(n);         parser.alloymodule.addModelName(o.merge(n.pos) , n.name , new ArrayList<ExpName>()); :};
Spec ::= Spec MODULE:o Name:n LBRACKET SigRefs:b RBRACKET:r                    {: nod(n); nod(b); parser.alloymodule.addModelName(o.merge(r)     , n.name , b                       ); :};
Spec ::= Spec Vis:p OPEN:o Name:a                                              {: nod(a);         parser.alloymodule.addOpen(o.merge(a.pos), p, a, null, null); :};
Spec ::= Spec Vis:p OPEN:o Name:a                               AS Name:c      {: nod(a); nod(c); parser.alloymodule.addOpen(o.merge(c.pos), p, a, null, c);    :};
Spec ::= Spec Vis:p OPEN:o Name:a LBRACKET SigRefs:b RBRACKET:c                {: nod(a);         parser.alloymodule.addOpen(o.merge(c),     p, a, b,    null); :};
Spec ::= Spec Vis:p OPEN:o Name:a LBRACKET SigRefs:b RBRACKET   AS Name:c      {: nod(a); nod(c); parser.alloymodule.addOpen(o.merge(c.pos), p, a, b,    c);    :};
Spec ::= Spec Vis:p ENUM:o Name:a SigIn:i LBRACE Names:n RBRACE:c              {: nod(a);         parser.alloymodule.addEnum(o.merge(c),     p, a, i, n, c);    :};
Spec ::= Spec       FACT:o          Super:e {:         parser.alloymodule.addFact      (o , ""     , e); :};
Spec ::= Spec       FACT:o   Name:n Super:e {: nod(n); parser.alloymodule.addFact      (o , n.name , e); :};
Spec ::= Spec       ASSERT:o        Super:e {:         parser.alloymodule.addAssertion (o , ""     , e); :};
Spec ::= Spec       ASSERT:o Name:n Super:e {: nod(n); parser.alloymodule.addAssertion (o , n.name , e); :};
Spec ::= Spec Sig             ;
Spec ::= Spec Function        ;
Spec ::= Spec Predicate       ;
Spec ::= Spec Macro           ;
Spec ::= ;

Spec ::= Spec CHECK:o CmdLabel:x Super:e  Scope:s  Expects:c {:
  int bitwidth=(-1), maxseq=(-1), overall=(-1), expects=(c==null ? -1 : c.num);
  Pos p=o.merge(c==null ? null : c.pos);
  for(int i=s.size()-1; i>=0; i--) {
    Sig j=s.get(i).a;
    p=p.merge(j.pos);
    if (j.label.equals("univ")) { overall=s.get(i).b; s.remove(i); continue; }
    if (j.label.equals("int"))  { if (bitwidth>=0) throw new ErrorSyntax(j.pos, "The bitwidth cannot be specified more than once."); bitwidth=s.get(i).b; s.remove(i); continue; }
    if (j.label.equals("seq"))  { if (maxseq>=0) throw new ErrorSyntax(j.pos, "The maximum sequence length cannot be specified more than once."); maxseq=s.get(i).b; s.remove(i); continue; }
  }
  parser.alloymodule.addCommand(p, e, true, overall, bitwidth, maxseq, expects, s, x);
:};

Spec ::= Spec CHECK:o CmdLabel:x Name:n  Scope:s Expects:c  {:
  nod(n);
  int bitwidth=(-1), maxseq=(-1), overall=(-1), expects=(c==null ? -1 : c.num);
  Pos p=o.merge(c==null ? null : c.pos).merge(n.pos);
  for(int i=s.size()-1; i>=0; i--) {
    Sig j=s.get(i).a;
    p=p.merge(j.pos);
    if (j.label.equals("univ")) { overall=s.get(i).b; s.remove(i); continue; }
    if (j.label.equals("int"))  { if (bitwidth>=0) throw new ErrorSyntax(j.pos, "The bitwidth cannot be specified more than once."); bitwidth=s.get(i).b; s.remove(i); continue; }
    if (j.label.equals("seq"))  { if (maxseq>=0) throw new ErrorSyntax(j.pos, "The maximum sequence length cannot be specified more than once."); maxseq=s.get(i).b; s.remove(i); continue; }
  }
  parser.alloymodule.addCommand(p, n.name, true, overall, bitwidth, maxseq, expects, s, x);
:};

Spec ::= Spec RUN:o CmdLabel:x Super:e  Scope:s  Expects:c {:
  int bitwidth=(-1), maxseq=(-1), overall=(-1), expects=(c==null ? -1 : c.num);
  Pos p=o.merge(c==null ? null : c.pos);
  for(int i=s.size()-1; i>=0; i--) {
    Sig j=s.get(i).a;
    p=p.merge(j.pos);
    if (j.label.equals("univ")) { overall=s.get(i).b; s.remove(i); continue; }
    if (j.label.equals("int"))  { if (bitwidth>=0) throw new ErrorSyntax(j.pos, "The bitwidth cannot be specified more than once."); bitwidth=s.get(i).b; s.remove(i); continue; }
    if (j.label.equals("seq"))  { if (maxseq>=0) throw new ErrorSyntax(j.pos, "The maximum sequence length cannot be specified more than once."); maxseq=s.get(i).b; s.remove(i); continue; }
  }
  parser.alloymodule.addCommand(p, e, false, overall, bitwidth, maxseq, expects, s, x);
:};

Spec ::= Spec RUN:o CmdLabel:x Name:n  Scope:s  Expects:c {:
  nod(n);
  int bitwidth=(-1), maxseq=(-1), overall=(-1), expects=(c==null ? -1 : c.num);
  Pos p=o.merge(c==null ? null : c.pos).merge(n.pos);
  for(int i=s.size()-1; i>=0; i--) {
    Sig j=s.get(i).a;
    p=p.merge(j.pos);
    if (j.label.equals("univ")) { overall=s.get(i).b; s.remove(i); continue; }
    if (j.label.equals("int"))  { if (bitwidth>=0) throw new ErrorSyntax(j.pos, "The bitwidth cannot be specified more than once."); bitwidth=s.get(i).b; s.remove(i); continue; }
    if (j.label.equals("seq"))  { if (maxseq>=0) throw new ErrorSyntax(j.pos, "The maximum sequence length cannot be specified more than once."); maxseq=s.get(i).b; s.remove(i); continue; }
  }
  parser.alloymodule.addCommand(p, n.name, false, overall, bitwidth, maxseq, expects, s, x);
:};

CmdLabel ::=           {:         RESULT=null; :};
CmdLabel ::= DOT ID:i  {: nod(i); RESULT=i;    :};

Expects    ::=                 {: RESULT=null; :};
Expects    ::= EXPECT NUMBER:a {: RESULT=a;    :};

Scope      ::= FOR NUMBER:a                  {: RESULT=new ArrayList<Pair<Sig,Integer>>(); RESULT.add(new Pair<Sig,Integer>(new PrimSig(a.pos, "univ"), a.num)); :};
Scope      ::= FOR NUMBER:a BUT Typescopes:b {: RESULT=b;                                       b.add(new Pair<Sig,Integer>(new PrimSig(a.pos, "univ"), a.num)); :};
Scope      ::= FOR              Typescopes:b {: RESULT=b;                                                                                                        :};
Scope      ::=                               {: RESULT=new ArrayList<Pair<Sig,Integer>>();                                                                       :};

Typescopes ::= Typescope:a                    {: RESULT=new ArrayList<Pair<Sig,Integer>>(); RESULT.add(a); :};
Typescopes ::= Typescopes:a COMMA Typescope:b {: RESULT=a; a.add(b);                                       :};

Typescope  ::= EXACTLY:e NUMBER:a Name:b    {: nod(b); RESULT=new Pair<Sig,Integer>(new PrimSig(e.merge(b.pos)    , b.name) , (0-a.num)-1 );                                                                            :};
Typescope  ::=           NUMBER:a Name:b    {: nod(b); RESULT=new Pair<Sig,Integer>(new PrimSig(a.pos.merge(b.pos), b.name) ,    a.num    );                                                                            :};
Typescope  ::=           NUMBER:a INT:b     {:         RESULT=new Pair<Sig,Integer>(new PrimSig(a.pos.merge(b)    , "int")  ,    a.num    );                                                                            :};
Typescope  ::=           NUMBER:a SEQ:b     {:         RESULT=new Pair<Sig,Integer>(new PrimSig(a.pos.merge(b)    , "seq")  ,    a.num    );                                                                            :};
Typescope  ::= EXACTLY:e NUMBER   INT:f     {: if (1==1) throw new ErrorSyntax(e.    merge(f), "The exactly keyword is redundant here, since the integer bitwidth has to be exact.");                               :};
Typescope  ::= EXACTLY:e NUMBER   SEQ:f     {: if (1==1) throw new ErrorSyntax(e.    merge(f), "The exactly keyword is redundant here, since the number of sequence index has to be exact.");                       :};
Typescope  ::=           NUMBER:e UNIV:f    {: if (1==1) throw new ErrorSyntax(e.pos.merge(f), "You cannot set a scope on univ.");                                                                                  :};
Typescope  ::= EXACTLY:e NUMBER   UNIV:f    {: if (1==1) throw new ErrorSyntax(e.    merge(f), "You cannot set a scope on univ.");                                                                                  :};
Typescope  ::=           NUMBER:e SIGINT:f  {: if (1==1) throw new ErrorSyntax(e.pos.merge(f), "You can no longer set a scope on Int; the number of Int atoms is always exactly equal to 2^(integer bitwidth).\n"); :};
Typescope  ::= EXACTLY:e NUMBER   SIGINT:f  {: if (1==1) throw new ErrorSyntax(e.    merge(f), "You can no longer set a scope on Int; the number of Int atoms is always exactly equal to 2^(integer bitwidth).\n"); :};
Typescope  ::=           NUMBER:e NONE:f    {: if (1==1) throw new ErrorSyntax(e.pos.merge(f), "You cannot set a scope on none.");                                                                                  :};
Typescope  ::= EXACTLY:e NUMBER   NONE:f    {: if (1==1) throw new ErrorSyntax(e.    merge(f), "You cannot set a scope on none.");                                                                                  :};

Macro ::= Vis:p LET:o              Name:n LPAREN   Names:d RPAREN   MacroBody:v {: nod(n); parser.alloymodule.addMacro(o.merge(v.span()), p, n.name, d     , v); :};
Macro ::= Vis:p LET:o              Name:n LPAREN           RPAREN   MacroBody:v {: nod(n); parser.alloymodule.addMacro(o.merge(v.span()), p, n.name, null  , v); :};
Macro ::= Vis:p LET:o              Name:n LBRACKET Names:d RBRACKET MacroBody:v {: nod(n); parser.alloymodule.addMacro(o.merge(v.span()), p, n.name, d     , v); :};
Macro ::= Vis:p LET:o              Name:n LBRACKET         RBRACKET MacroBody:v {: nod(n); parser.alloymodule.addMacro(o.merge(v.span()), p, n.name, null  , v); :};
Macro ::= Vis:p LET:o              Name:n                           MacroBody:v {: nod(n); parser.alloymodule.addMacro(o.merge(v.span()), p, n.name, null  , v); :};

MacroBody ::= Super:a       {: RESULT=a; :};
MacroBody ::= EQUALS Expr:a {: RESULT=a; :};

Function ::= Vis:p FUN:o              Name:n LPAREN   Decls:d RPAREN   COLON Expr:r Super:v {: nod(n); parser.alloymodule.addFunc(o.merge(v.span()), p, n.name, null, d    , mult(r), v); :};
Function ::= Vis:p FUN:o              Name:n LBRACKET Decls:d RBRACKET COLON Expr:r Super:v {: nod(n); parser.alloymodule.addFunc(o.merge(v.span()), p, n.name, null, d    , mult(r), v); :};
Function ::= Vis:p FUN:o              Name:n                           COLON Expr:r Super:v {: nod(n); parser.alloymodule.addFunc(o.merge(v.span()), p, n.name, null, null , mult(r), v); :};
Function ::= Vis:p FUN:o SigRef:f DOT Name:n LPAREN   Decls:d RPAREN   COLON Expr:r Super:v {: nod(n); parser.alloymodule.addFunc(o.merge(v.span()), p, n.name, f   , d    , mult(r), v); :};
Function ::= Vis:p FUN:o SigRef:f DOT Name:n LBRACKET Decls:d RBRACKET COLON Expr:r Super:v {: nod(n); parser.alloymodule.addFunc(o.merge(v.span()), p, n.name, f   , d    , mult(r), v); :};
Function ::= Vis:p FUN:o SigRef:f DOT Name:n                           COLON Expr:r Super:v {: nod(n); parser.alloymodule.addFunc(o.merge(v.span()), p, n.name, f   , null , mult(r), v); :};

Predicate ::= Vis:p PRED:o              Name:n LPAREN   Decls:d RPAREN   Super:v             {: nod(n); parser.alloymodule.addFunc(o.merge(v.span()), p, n.name, null, d    , null, v); :};
Predicate ::= Vis:p PRED:o              Name:n LBRACKET Decls:d RBRACKET Super:v             {: nod(n); parser.alloymodule.addFunc(o.merge(v.span()), p, n.name, null, d    , null, v); :};
Predicate ::= Vis:p PRED:o              Name:n                           Super:v             {: nod(n); parser.alloymodule.addFunc(o.merge(v.span()), p, n.name, null, null , null, v); :};
Predicate ::= Vis:p PRED:o SigRef:f DOT Name:n LPAREN   Decls:d RPAREN   Super:v             {: nod(n); parser.alloymodule.addFunc(o.merge(v.span()), p, n.name, f   , d    , null, v); :};
Predicate ::= Vis:p PRED:o SigRef:f DOT Name:n LBRACKET Decls:d RBRACKET Super:v             {: nod(n); parser.alloymodule.addFunc(o.merge(v.span()), p, n.name, f   , d    , null, v); :};
Predicate ::= Vis:p PRED:o SigRef:f DOT Name:n                           Super:v             {: nod(n); parser.alloymodule.addFunc(o.merge(v.span()), p, n.name, f   , null , null, v); :};

Vis ::=           {: RESULT=null; :};
Vis ::= PRIVATE:p {: RESULT=p;    :};

Sig ::= SigQuals:a Names:b SigIn:c LBRACE Decls:d RBRACE:o SuperOpt:e
 {:
   ExpName cc = (c!=null && c.size()>0) ? c.remove(c.size()-1) : null;
   for(ExpName bb:b) {
      parser.alloymodule.addSig(null, bb.pos.merge(e==null ? o : e.span()), bb.name, a.get(0), a.get(1), a.get(2), a.get(3), a.get(4), cc, c, d, e);
   }
 :};

SigQual  ::= ABSTRACT:x               {: RESULT=new ArrayList<Pos>(5); RESULT.add(x);    RESULT.add(null); RESULT.add(null); RESULT.add(null); RESULT.add(null); :};
SigQual  ::= LONE:x                   {: RESULT=new ArrayList<Pos>(5); RESULT.add(null); RESULT.add(x);    RESULT.add(null); RESULT.add(null); RESULT.add(null); :};
SigQual  ::= ONE:x                    {: RESULT=new ArrayList<Pos>(5); RESULT.add(null); RESULT.add(null); RESULT.add(x);    RESULT.add(null); RESULT.add(null); :};
SigQual  ::= SOME:x                   {: RESULT=new ArrayList<Pos>(5); RESULT.add(null); RESULT.add(null); RESULT.add(null); RESULT.add(x);    RESULT.add(null); :};
SigQual  ::= PRIVATE:x                {: RESULT=new ArrayList<Pos>(5); RESULT.add(null); RESULT.add(null); RESULT.add(null); RESULT.add(null); RESULT.add(x);    :};

SigQuals ::= SIG                      {: RESULT=new ArrayList<Pos>(5); RESULT.add(null); RESULT.add(null); RESULT.add(null); RESULT.add(null); RESULT.add(null); :};
SigQuals ::= SigQual:b SigQuals:a     {: RESULT=a; for(int i=0;i<5;i++) if (a.get(i)==null) a.set(i,b.get(i)); else if (b.get(i)!=null) throw new ErrorSyntax(b.get(i), "The same qualifer cannot be specified more than once for the same sig."); :};

SigIn    ::= EXTENDS:a SigRef:x       {: RESULT=new ArrayList<ExpName>(2); RESULT.add(x); RESULT.add(new ExpName(a,"extends")); :};
SigIn    ::= IN:a SigRefu:x           {: RESULT=x;  x.add(new ExpName(a,"in"));                                                 :};
SigIn    ::=                          {: RESULT=null;                                                                           :};

SigRef   ::= Name:x                   {: RESULT=x;                                   :};
SigRef   ::= UNIV:x                   {: RESULT=new ExpName(x, "univ");              :};
SigRef   ::= SIGINT:x                 {: RESULT=new ExpName(x, "Int");               :};
SigRef   ::= SEQ:a SLASH SIGINT:b     {: RESULT=new ExpName(a.merge(b), "seq/Int");  :};
SigRef   ::= NONE:x                   {: RESULT=new ExpName(x, "none");              :};

SigRefs  ::=                          {: RESULT=new ArrayList<ExpName>(); :};
SigRefs  ::= SigRefp:x                {: RESULT=x;                        :};

SigRefp  ::= SigRef:x                 {: RESULT=new ArrayList<ExpName>(); RESULT.add(x); :};
SigRefp  ::= SigRefp:a COMMA SigRef:b {: a.add(b); RESULT=a;                             :};

SigRefu  ::= SigRef:x                 {: RESULT=new ArrayList<ExpName>(); RESULT.add(x); :};
SigRefu  ::= SigRefu:a PLUS SigRef:b  {: a.add(b); RESULT=a;                             :};

Name ::= NameHelper:x              {: RESULT=x;                                           :};
Name ::= THIS:a SLASH NameHelper:b {: RESULT=new ExpName(a.merge(b.pos), "this/"+b.name); :};
Name ::= SEQ:a  SLASH NameHelper:b {: RESULT=new ExpName(a.merge(b.pos),  "seq/"+b.name); :};

NameHelper ::= ID:x                     {: RESULT=x;                                                  :};
NameHelper ::= NameHelper:a SLASH ID:b  {: RESULT=new ExpName(a.pos.merge(b.pos), a.name+"/"+b.name); :};

Names ::= Name:x                   {: nod(x); RESULT=new ArrayList<ExpName>(); RESULT.add(x);  :};
Names ::= Names:a COMMA Name:b     {: nod(b); a.add(b); RESULT=a;                              :};

Decla ::=           PART:k Names   COLON        Expr   {: if (1==1) throw ExpName.hint(k,"part");   :};
Decla ::=           EXH:k  Names   COLON        Expr   {: if (1==1) throw ExpName.hint(k,"exh");    :};
Decla ::=           DISJ:k Names:a COLON        Expr:b {: RESULT=new Decl(null, k,    null, a, mult(b)); :};
Decla ::= PRIVATE:p DISJ:k Names:a COLON        Expr:b {: RESULT=new Decl(p,    k,    null, a, mult(b)); :};
Decla ::= PRIVATE:p        Names:a COLON        Expr:b {: RESULT=new Decl(p,    null, null, a, mult(b)); :};
Decla ::=                  Names:a COLON        Expr:b {: RESULT=new Decl(null, null, null, a, mult(b)); :};

Decla ::=           PART:k Names   COLON DISJ   Expr   {: if (1==1) throw ExpName.hint(k,"part");   :};
Decla ::=           EXH:k  Names   COLON DISJ   Expr   {: if (1==1) throw ExpName.hint(k,"exh");    :};
Decla ::=           DISJ:k Names:a COLON DISJ:d Expr:b {: RESULT=new Decl(null, k,    d,    a, mult(b)); :};
Decla ::= PRIVATE:p DISJ:k Names:a COLON DISJ:d Expr:b {: RESULT=new Decl(p,    k,    d,    a, mult(b)); :};
Decla ::= PRIVATE:p        Names:a COLON DISJ:d Expr:b {: RESULT=new Decl(p,    null, d,    a, mult(b)); :};
Decla ::=                  Names:a COLON DISJ:d Expr:b {: RESULT=new Decl(null, null, d,    a, mult(b)); :};

Declp ::= Declp:x COMMA Decla:y {: RESULT=x; RESULT.add(y);                      :};
Declp ::=               Decla:y {: RESULT=new ArrayList<Decl>(); RESULT.add(y);  :};

Decls ::=                        {: RESULT=new ArrayList<Decl>();                :};
Decls ::= Decla:x                {: RESULT=new ArrayList<Decl>(); RESULT.add(x); :};
Decls ::= Decla:x COMMA Decls:y  {: RESULT=y; RESULT.add(0,x);                   :};
Decls ::=         COMMA Decls:y  {: RESULT=y;                                    :};

Let ::= Name:a EQUALS:o Expr:b SuperOrBar:x {:
  nod(a);
  if (a.name.indexOf('/')>=0) throw new ErrorSyntax(a.pos, "Let variable name cannot contain \'/\'");
  if (a.name.indexOf('@')>=0) throw new ErrorSyntax(a.pos, "Let variable name cannot contain \'@\'");
  RESULT = new ExpLet(o, a, b, x);
:};

Let ::= Name:a EQUALS:o Expr:b COMMA Let:x {:
  nod(a);
  if (a.name.indexOf('/')>=0) throw new ErrorSyntax(a.pos, "Let variable name cannot contain \'/\'");
  if (a.name.indexOf('@')>=0) throw new ErrorSyntax(a.pos, "Let variable name cannot contain \'@\'");
  RESULT = new ExpLet(o, a, b, x);
:};

SuperOpt ::=                               {: RESULT=null;                                                 :};
SuperOpt ::= Super:x                       {: RESULT=x;                                                    :};
Super    ::= LBRACE:a SuperP:x RBRACE:b    {: RESULT=new ExpUnary(a.merge(b), ExprUnary.Op.NOOP, x);       :};
Super    ::= LBRACE:a          RBRACE:b    {: RESULT=new ExpConstant(a.merge(b), ExprConstant.Op.TRUE, 0); :};
SuperP   ::= Expr:a                        {: RESULT=a;                                                    :};
SuperP   ::= Expr:a SuperP:b               {: RESULT=new ExpBinary(null, ExprBinary.Op.AND, a, b);         :};

SuperOrBar ::= BAR Expr:x  {: RESULT=x; :};
SuperOrBar ::= Super:x     {: RESULT=x; :};

Exprs ::=                       {: RESULT=new ArrayList<Exp>();                :};
Exprs ::= Exprp:x               {: RESULT=x;                                   :};
Exprp ::= Expr:x                {: RESULT=new ArrayList<Exp>(); RESULT.add(x); :};
Exprp ::= Exprp:a COMMA Expr:b  {: a.add(b); RESULT=a;                         :};

//=============================================================================

Expr ::= OrExprA:x                    {: RESULT=x;                                              :};
Expr ::= OrExprB:x                    {: RESULT=x;                                              :};
Expr ::= Bind:x                       {: RESULT=x;                                              :};
Bind ::= LET     Let:x                {: RESULT=x;                                              :};
Bind ::= ALL2:o  Declp:a SuperOrBar:b {: RESULT=new ExpQuant(o, null, ExprQuant.Op.ALL,  a, b); :};
Bind ::= NO2:o   Declp:a SuperOrBar:b {: RESULT=new ExpQuant(o, null, ExprQuant.Op.NO,   a, b); :};
Bind ::= SOME2:o Declp:a SuperOrBar:b {: RESULT=new ExpQuant(o, null, ExprQuant.Op.SOME, a, b); :};
Bind ::= LONE2:o Declp:a SuperOrBar:b {: RESULT=new ExpQuant(o, null, ExprQuant.Op.LONE, a, b); :};
Bind ::= ONE2:o  Declp:a SuperOrBar:b {: RESULT=new ExpQuant(o, null, ExprQuant.Op.ONE,  a, b); :};
Bind ::= SUM2:o  Declp:a SuperOrBar:b {: RESULT=new ExpQuant(o, null, ExprQuant.Op.SUM,  a, b); :};

OrExprA ::=                EquivExprA:a  {: RESULT=a;                                        :};
OrExprA ::= OrExprB:a OR:o Bind:b        {: RESULT=new ExpBinary(o, ExprBinary.Op.OR, a, b); :};
OrExprB ::=                EquivExprB:b  {: RESULT=b;                                        :};
OrExprB ::= OrExprB:a OR:o EquivExprB:b  {: RESULT=new ExpBinary(o, ExprBinary.Op.OR, a, b); :};

EquivExprA ::=                    ImpliesExprA:b    {: RESULT=b;                                         :};
EquivExprA ::= EquivExprB:a IFF:o Bind:b            {: RESULT=new ExpBinary(o, ExprBinary.Op.IFF, a, b); :};
EquivExprB ::=                    ImpliesExprB:b    {: RESULT=b;                                         :};
EquivExprB ::= EquivExprB:a IFF:o ImpliesExprB:b    {: RESULT=new ExpBinary(o, ExprBinary.Op.IFF, a, b); :};

ImpliesExprA      ::= ImpliesExprCloseA:a            {: RESULT=a; :};
ImpliesExprA      ::= ImpliesExprOpenA:a             {: RESULT=a; :};
ImpliesExprCloseA ::= AndExprA:a                     {: RESULT=a; :};
ImpliesExprCloseA ::= AndExprB:a IMPLIES:o ImpliesExprCloseB:b ELSE ImpliesExprCloseA:c {: RESULT=new ExpITE(o,a,b,c);    :};
ImpliesExprOpenA  ::= AndExprB:a IMPLIES:o ImpliesExprCloseB:b ELSE ImpliesExprOpenA:c  {: RESULT=new ExpITE(o,a,b,c);    :};
ImpliesExprOpenA  ::= AndExprB:a IMPLIES:o ImpliesExprA:b                               {: RESULT=new ExpITE(o,a,b,null); :};

ImpliesExprCloseA ::= AndExprB:a IMPLIES:o ImpliesExprCloseB:b ELSE Bind:c {: RESULT=new ExpITE(o,a,b,c);    :};
ImpliesExprOpenA  ::= AndExprB:a IMPLIES:o Bind:b                          {: RESULT=new ExpITE(o,a,b,null); :};

ImpliesExprB      ::= ImpliesExprCloseB:a            {: RESULT=a; :};
ImpliesExprB      ::= ImpliesExprOpenB:a             {: RESULT=a; :};
ImpliesExprCloseB ::= AndExprB:a                     {: RESULT=a; :};
ImpliesExprCloseB ::= AndExprB:a IMPLIES:o ImpliesExprCloseB:b ELSE ImpliesExprCloseB:c {: RESULT=new ExpITE(o,a,b,c);    :};
ImpliesExprOpenB  ::= AndExprB:a IMPLIES:o ImpliesExprCloseB:b ELSE ImpliesExprOpenB:c  {: RESULT=new ExpITE(o,a,b,c);    :};
ImpliesExprOpenB  ::= AndExprB:a IMPLIES:o ImpliesExprB:b                               {: RESULT=new ExpITE(o,a,b,null); :};

AndExprA ::= NegExprA:a                   {: RESULT=a;                                         :};
AndExprA ::= AndExprB:a AND:o Bind:b      {: RESULT=new ExpBinary(o, ExprBinary.Op.AND, a, b); :};
AndExprB ::=                  NegExprB:b  {: RESULT=b;                                         :};
AndExprB ::= AndExprB:a AND:o NegExprB:b  {: RESULT=new ExpBinary(o, ExprBinary.Op.AND, a, b); :};

NegExprA ::=         CompareExprA:b         {: RESULT=b;                                    :};
NegExprA ::= NOT:o   Bind:b                 {: RESULT=new ExpUnary(o, ExprUnary.Op.NOT, b); :};
NegExprA ::= NOT:o   NegExprA:b             {: RESULT=new ExpUnary(o, ExprUnary.Op.NOT, b); :};
NegExprB ::=         CompareExprB:b         {: RESULT=b;                                    :};
NegExprB ::= NOT:o   NegExprB:b             {: RESULT=new ExpUnary(o, ExprUnary.Op.NOT, b); :};

CompareExprA ::= CompareExprB:a EQUALS:o    ShiftExprA:b    {: RESULT=new ExpBinary(o, ExprBinary.Op.EQUALS,a,b);         :};
CompareExprA ::= CompareExprB:a IN:o        ShiftExprA:b    {: RESULT=new ExpBinary(o, ExprBinary.Op.IN,a,mult(b));       :};
CompareExprA ::= CompareExprB:a LT:o        ShiftExprA:b    {: RESULT=new ExpBinary(o, ExprBinary.Op.LT,a,b);             :};
CompareExprA ::= CompareExprB:a GT:o        ShiftExprA:b    {: RESULT=new ExpBinary(o, ExprBinary.Op.GT,a,b);             :};
CompareExprA ::= CompareExprB:a LTE:o       ShiftExprA:b    {: RESULT=new ExpBinary(o, ExprBinary.Op.LTE,a,b);            :};
CompareExprA ::= CompareExprB:a GTE:o       ShiftExprA:b    {: RESULT=new ExpBinary(o, ExprBinary.Op.GTE,a,b);            :};
CompareExprA ::= CompareExprB:a NOTEQUALS:o ShiftExprA:b    {: RESULT=new ExpBinary(o, ExprBinary.Op.EQUALS,a,b).not();   :};
CompareExprA ::= CompareExprB:a NOTIN:o     ShiftExprA:b    {: RESULT=new ExpBinary(o, ExprBinary.Op.IN,a,mult(b)).not(); :};
CompareExprA ::= CompareExprB:a NOTLT:o     ShiftExprA:b    {: RESULT=new ExpBinary(o, ExprBinary.Op.GTE,a,b);            :};
CompareExprA ::= CompareExprB:a NOTGT:o     ShiftExprA:b    {: RESULT=new ExpBinary(o, ExprBinary.Op.LTE,a,b);            :};
CompareExprA ::= CompareExprB:a NOTLTE:o    ShiftExprA:b    {: RESULT=new ExpBinary(o, ExprBinary.Op.GT,a,b);             :};
CompareExprA ::= CompareExprB:a NOTGTE:o    ShiftExprA:b    {: RESULT=new ExpBinary(o, ExprBinary.Op.LT,a,b);             :};
CompareExprA ::= ALL:o  ShiftExprA                          {: if (1==1) throw new ErrorSyntax(o,"The \"all x\" construct is no longer supported. If you know the range of possible values of x, consider rewriting it as \"x == set_of_all_possible_values\"."); :};
CompareExprA ::= NO:o   ShiftExprA:b                        {: RESULT=new ExpUnary(o, ExprUnary.Op.NO,    b);   :};
CompareExprA ::= SOME:o ShiftExprA:b                        {: RESULT=new ExpUnary(o, ExprUnary.Op.SOME,  b);   :};
CompareExprA ::= LONE:o ShiftExprA:b                        {: RESULT=new ExpUnary(o, ExprUnary.Op.LONE,  b);   :};
CompareExprA ::= ONE:o  ShiftExprA:b                        {: RESULT=new ExpUnary(o, ExprUnary.Op.ONE,   b);   :};
CompareExprA ::= SET:o  ShiftExprA:b                        {: RESULT=new ExpUnary(o, ExprUnary.Op.SETOF, b);   :};
CompareExprA ::= SEQ:o  ShiftExprA:b                        {: RESULT=new ExpBinary(o, ExprBinary.Op.ISSEQ_ARROW_LONE, new ExpName(o,"seq/Int"), b); parser.alloymodule.addSeq(o); :};
CompareExprA ::=        ShiftExprA:b                        {: RESULT=b;                                        :};

CompareExprB ::= CompareExprB:a EQUALS:o    ShiftExprB:b    {: RESULT=new ExpBinary(o, ExprBinary.Op.EQUALS,a,b);         :};
CompareExprB ::= CompareExprB:a IN:o        ShiftExprB:b    {: RESULT=new ExpBinary(o, ExprBinary.Op.IN,a,mult(b));       :};
CompareExprB ::= CompareExprB:a LT:o        ShiftExprB:b    {: RESULT=new ExpBinary(o, ExprBinary.Op.LT,a,b);             :};
CompareExprB ::= CompareExprB:a GT:o        ShiftExprB:b    {: RESULT=new ExpBinary(o, ExprBinary.Op.GT,a,b);             :};
CompareExprB ::= CompareExprB:a LTE:o       ShiftExprB:b    {: RESULT=new ExpBinary(o, ExprBinary.Op.LTE,a,b);            :};
CompareExprB ::= CompareExprB:a GTE:o       ShiftExprB:b    {: RESULT=new ExpBinary(o, ExprBinary.Op.GTE,a,b);            :};
CompareExprB ::= CompareExprB:a NOTEQUALS:o ShiftExprB:b    {: RESULT=new ExpBinary(o, ExprBinary.Op.EQUALS,a,b).not();   :};
CompareExprB ::= CompareExprB:a NOTIN:o     ShiftExprB:b    {: RESULT=new ExpBinary(o, ExprBinary.Op.IN,a,mult(b)).not(); :};
CompareExprB ::= CompareExprB:a NOTLT:o     ShiftExprB:b    {: RESULT=new ExpBinary(o, ExprBinary.Op.GTE,a,b);            :};
CompareExprB ::= CompareExprB:a NOTGT:o     ShiftExprB:b    {: RESULT=new ExpBinary(o, ExprBinary.Op.LTE,a,b);            :};
CompareExprB ::= CompareExprB:a NOTLTE:o    ShiftExprB:b    {: RESULT=new ExpBinary(o, ExprBinary.Op.GT,a,b);             :};
CompareExprB ::= CompareExprB:a NOTGTE:o    ShiftExprB:b    {: RESULT=new ExpBinary(o, ExprBinary.Op.LT,a,b);             :};
CompareExprB ::= ALL:o  ShiftExprB                          {: if (1==1) throw new ErrorSyntax(o,"The \"all x\" construct is no longer supported. If you know the range of possible values of x, consider rewriting it as \"x == set_of_all_possible_values\"."); :};
CompareExprB ::= NO:o   ShiftExprB:b                        {: RESULT=new ExpUnary(o, ExprUnary.Op.NO,    b);   :};
CompareExprB ::= SOME:o ShiftExprB:b                        {: RESULT=new ExpUnary(o, ExprUnary.Op.SOME,  b);   :};
CompareExprB ::= LONE:o ShiftExprB:b                        {: RESULT=new ExpUnary(o, ExprUnary.Op.LONE,  b);   :};
CompareExprB ::= ONE:o  ShiftExprB:b                        {: RESULT=new ExpUnary(o, ExprUnary.Op.ONE,   b);   :};
CompareExprB ::= SET:o  ShiftExprB:b                        {: RESULT=new ExpUnary(o, ExprUnary.Op.SETOF, b);   :};
CompareExprB ::= SEQ:o  ShiftExprB:b                        {: RESULT=new ExpBinary(o, ExprBinary.Op.ISSEQ_ARROW_LONE, new ExpName(o,"seq/Int"), b); parser.alloymodule.addSeq(o); :};
CompareExprB ::=        ShiftExprB:b                        {: RESULT=b;                                        :};

ShiftExprA ::=                    UnionDiffExprA:b        {: RESULT=b;                                                 :};
ShiftExprA ::= ShiftExprB:a SHL:o Bind:b                  {: RESULT=new ExpBinary(o, ExprBinary.Op.SHL, a, b);         :};
ShiftExprA ::= ShiftExprB:a SHR:o Bind:b                  {: RESULT=new ExpBinary(o, ExprBinary.Op.SHR, a, b);         :};
ShiftExprA ::= ShiftExprB:a SHA:o Bind:b                  {: RESULT=new ExpBinary(o, ExprBinary.Op.SHA, a, b);         :};
ShiftExprB ::=                    UnionDiffExprB:b        {: RESULT=b;                                                 :};
ShiftExprB ::= ShiftExprB:a SHL:o UnionDiffExprB:b        {: RESULT=new ExpBinary(o, ExprBinary.Op.SHL, a, b);         :};
ShiftExprB ::= ShiftExprB:a SHR:o UnionDiffExprB:b        {: RESULT=new ExpBinary(o, ExprBinary.Op.SHR, a, b);         :};
ShiftExprB ::= ShiftExprB:a SHA:o UnionDiffExprB:b        {: RESULT=new ExpBinary(o, ExprBinary.Op.SHA, a, b);         :};

UnionDiffExprA ::=                          NumUnopExprA:b        {: RESULT=b;                                                   :};
UnionDiffExprA ::= UnionDiffExprB:a PLUS:o  Bind:b                {: RESULT=new ExpBinary(o, ExprBinary.Op.PLUS,  a, b);         :};
UnionDiffExprA ::= UnionDiffExprB:a MINUS:o Bind:b                {: RESULT=new ExpBinary(o, ExprBinary.Op.MINUS, a, b);         :};
UnionDiffExprB ::=                          NumUnopExprB:b        {: RESULT=b;                                                   :};
UnionDiffExprB ::= UnionDiffExprB:a PLUS:o  NumUnopExprB:b        {: RESULT=new ExpBinary(o, ExprBinary.Op.PLUS,  a, b);         :};
UnionDiffExprB ::= UnionDiffExprB:a MINUS:o NumUnopExprB:b        {: RESULT=new ExpBinary(o, ExprBinary.Op.MINUS, a, b);         :};

NumUnopExprA ::=          OverrideExprA:b                        {: RESULT=b;                                                   :};
NumUnopExprA ::= HASH:o   Bind:b                                 {: RESULT=new ExpUnary(o, ExprUnary.Op.CARDINALITY, b);        :};
NumUnopExprA ::= SUM:o    Bind:b                                 {: RESULT=new ExpUnary(o, ExprUnary.Op.CAST2INT,    b);        :};
NumUnopExprA ::= INT:o    Bind:b                                 {: RESULT=new ExpUnary(o, ExprUnary.Op.CAST2INT,    b);        :};
NumUnopExprA ::= HASH:o   NumUnopExprA:b                         {: RESULT=new ExpUnary(o, ExprUnary.Op.CARDINALITY, b);        :};
NumUnopExprA ::= SUM:o    NumUnopExprA:b                         {: RESULT=new ExpUnary(o, ExprUnary.Op.CAST2INT,    b);        :};
NumUnopExprA ::= INT:o    NumUnopExprA:b                         {: RESULT=new ExpUnary(o, ExprUnary.Op.CAST2INT,    b);        :};
NumUnopExprB ::=          OverrideExprB:b                        {: RESULT=b;                                                   :};
NumUnopExprB ::= HASH:o   NumUnopExprB:b                         {: RESULT=new ExpUnary(o, ExprUnary.Op.CARDINALITY, b);        :};
NumUnopExprB ::= SUM:o    NumUnopExprB:b                         {: RESULT=new ExpUnary(o, ExprUnary.Op.CAST2INT,    b);        :};
NumUnopExprB ::= INT:o    NumUnopExprB:b                         {: RESULT=new ExpUnary(o, ExprUnary.Op.CAST2INT,    b);        :};

OverrideExprA ::=                            IntersectExprA:b     {: RESULT=b;                                                   :};
OverrideExprA ::= OverrideExprB:a PLUSPLUS:o Bind:b               {: RESULT=new ExpBinary(o, ExprBinary.Op.PLUSPLUS, a, b);      :};
OverrideExprB ::=                            IntersectExprB:b     {: RESULT=b;                                                   :};
OverrideExprB ::= OverrideExprB:a PLUSPLUS:o IntersectExprB:b     {: RESULT=new ExpBinary(o, ExprBinary.Op.PLUSPLUS, a, b);      :};

IntersectExprA ::=                              RelationExprA:b   {: RESULT=b;                                                   :};
IntersectExprA ::= IntersectExprB:a AMPERSAND:o Bind:b            {: RESULT=new ExpBinary(o, ExprBinary.Op.INTERSECT, a, b);     :};
IntersectExprB ::=                              RelationExprB:b   {: RESULT=b;                                                   :};
IntersectExprB ::= IntersectExprB:a AMPERSAND:o RelationExprB:b   {: RESULT=new ExpBinary(o, ExprBinary.Op.INTERSECT, a, b);     :};

RelOp ::= ARROW:o           {: RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.ARROW          ); :};
RelOp ::= ANY_ARROW_SOME:o  {: RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.ANY_ARROW_SOME ); :};
RelOp ::= ANY_ARROW_ONE:o   {: RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.ANY_ARROW_ONE  ); :};
RelOp ::= ANY_ARROW_LONE:o  {: RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.ANY_ARROW_LONE ); :};
RelOp ::= SOME_ARROW_ANY:o  {: RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.SOME_ARROW_ANY ); :};
RelOp ::= SOME_ARROW_SOME:o {: RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.SOME_ARROW_SOME); :};
RelOp ::= SOME_ARROW_ONE:o  {: RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.SOME_ARROW_ONE ); :};
RelOp ::= SOME_ARROW_LONE:o {: RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.SOME_ARROW_LONE); :};
RelOp ::= ONE_ARROW_ANY:o   {: RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.ONE_ARROW_ANY  ); :};
RelOp ::= ONE_ARROW_SOME:o  {: RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.ONE_ARROW_SOME ); :};
RelOp ::= ONE_ARROW_ONE:o   {: RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.ONE_ARROW_ONE  ); :};
RelOp ::= ONE_ARROW_LONE:o  {: RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.ONE_ARROW_LONE ); :};
RelOp ::= LONE_ARROW_ANY:o  {: RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.LONE_ARROW_ANY ); :};
RelOp ::= LONE_ARROW_SOME:o {: RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.LONE_ARROW_SOME); :};
RelOp ::= LONE_ARROW_ONE:o  {: RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.LONE_ARROW_ONE ); :};
RelOp ::= LONE_ARROW_LONE:o {: RESULT=new Pair<Pos,ExprBinary.Op>(o, ExprBinary.Op.LONE_ARROW_LONE); :};

RelationExprA ::= DomainExprA:a                         {: RESULT=a;                             :};
RelationExprA ::= DomainExprB:a RelOp:o Bind:b          {: RESULT=new ExpBinary(o.a, o.b, a, b); :};
RelationExprB ::= DomainExprB:a                         {: RESULT=a;                             :};
RelationExprB ::= DomainExprB:a RelOp:o RelationExprB:b {: RESULT=new ExpBinary(o.a, o.b, a, b); :};

DomainExprA ::=                        RangeExprA:b  {: RESULT=b;                                            :};
DomainExprA ::= DomainExprB:a DOMAIN:o Bind:b        {: RESULT=new ExpBinary(o, ExprBinary.Op.DOMAIN, a, b); :};
DomainExprB ::=                        RangeExprB:b  {: RESULT=b;                                            :};
DomainExprB ::= DomainExprB:a DOMAIN:o RangeExprB:b  {: RESULT=new ExpBinary(o, ExprBinary.Op.DOMAIN, a, b); :};

RangeExprA ::=                      BracketExprA:b   {: RESULT=b;                                           :};
RangeExprA ::= RangeExprB:a RANGE:o Bind:b           {: RESULT=new ExpBinary(o, ExprBinary.Op.RANGE, a, b); :};
RangeExprB ::=                      BracketExprB:b   {: RESULT=b;                                           :};
RangeExprB ::= RangeExprB:a RANGE:o BracketExprB:b   {: RESULT=new ExpBinary(o, ExprBinary.Op.RANGE, a, b); :};

BracketExprA ::= DotExprA:b                                 {: RESULT=b;                                                                                                          :};
BracketExprB ::= DotExprB:b                                 {: RESULT=b;                                                                                                          :};
BracketExprB ::= BracketExprB:a LBRACKET Exprs:b RBRACKET:c {: Exp aa=a;                     for(Exp bb:b) aa=t(new ExpDot(aa.span().merge(bb.span()), c, bb, aa), c); RESULT=aa; :};
BracketExprB ::= DISJ:a         LBRACKET Exprs:b RBRACKET:c {: Exp aa=new ExpName(a,"disj"); for(Exp bb:b) aa=t(new ExpDot(aa.span().merge(bb.span()), c, bb, aa), c); RESULT=aa; :};
BracketExprB ::= INT:a          LBRACKET Exprs:b RBRACKET:c {: Exp aa=new ExpName(a,"int");  for(Exp bb:b) aa=t(new ExpDot(aa.span().merge(bb.span()), c, bb, aa), c); RESULT=aa; :};
BracketExprB ::= SUM:a          LBRACKET Exprs:b RBRACKET:c {: Exp aa=new ExpName(a,"int");  for(Exp bb:b) aa=t(new ExpDot(aa.span().merge(bb.span()), c, bb, aa), c); RESULT=aa; :};

DotExprA ::=                      UnopExprA:b {: RESULT=b;                                                      :};
DotExprA ::= BracketExprB:a DOT:o Bind:b      {: RESULT=t(new ExpDot(o, null, a, b),                     null); :};
DotExprB ::=                      UnopExprB:b {: RESULT=b;                                                      :};
DotExprB ::= BracketExprB:a DOT:o UnopExprB:b {: RESULT=t(new ExpDot(o, null, a, b),                     null); :};
DotExprB ::= BracketExprB:a DOT:o DISJ:b      {: RESULT=t(new ExpDot(o, null, a, new ExpName(b,"disj")), null); :};
DotExprB ::= BracketExprB:a DOT:o INT         {: RESULT=new ExpUnary(o, ExprUnary.Op.CAST2INT, a);              :};
DotExprB ::= BracketExprB:a DOT:o SUM         {: RESULT=new ExpUnary(o, ExprUnary.Op.CAST2INT, a);              :};

UnopExprA ::= TILDE:o  Bind:b       {: RESULT=new ExpUnary(o, ExprUnary.Op.TRANSPOSE, b); :};
UnopExprA ::= STAR:o   Bind:b       {: RESULT=new ExpUnary(o, ExprUnary.Op.RCLOSURE,  b); :};
UnopExprA ::= CARET:o  Bind:b       {: RESULT=new ExpUnary(o, ExprUnary.Op.CLOSURE,   b); :};
UnopExprA ::= TILDE:o  UnopExprA:b  {: RESULT=new ExpUnary(o, ExprUnary.Op.TRANSPOSE, b); :};
UnopExprA ::= STAR:o   UnopExprA:b  {: RESULT=new ExpUnary(o, ExprUnary.Op.RCLOSURE,  b); :};
UnopExprA ::= CARET:o  UnopExprA:b  {: RESULT=new ExpUnary(o, ExprUnary.Op.CLOSURE,   b); :};
UnopExprB ::=          BaseExpr:b   {: RESULT=b;                                          :};
UnopExprB ::= TILDE:o  UnopExprB:b  {: RESULT=new ExpUnary(o, ExprUnary.Op.TRANSPOSE, b); :};
UnopExprB ::= STAR:o   UnopExprB:b  {: RESULT=new ExpUnary(o, ExprUnary.Op.RCLOSURE,  b); :};
UnopExprB ::= CARET:o  UnopExprB:b  {: RESULT=new ExpUnary(o, ExprUnary.Op.CLOSURE,   b); :};

BaseExpr ::= NUMBER:x                               {: RESULT=x;                                                                                                 :};
BaseExpr ::= IDEN:o                                 {: RESULT=new ExpName(o, "iden");                                                                            :};
BaseExpr ::= THIS:o                                 {: RESULT=new ExpName(o, "this");                                                                            :};
BaseExpr ::= LPAREN Expr:x RPAREN                   {: RESULT=x;                                                                                                 :};
BaseExpr ::= SigRef:x                               {: RESULT=x;                                                                                                 :};
BaseExpr ::= AT:o Name:x                            {: nod(x); RESULT=new ExpName(o.merge(x.pos), "@"+x.name);                                                           :};
BaseExpr ::= Super:x                                {: RESULT=x;                                                                                                 :};
BaseExpr ::= LBRACE:o Declp:a SuperOrBar:b RBRACE:c {: RESULT=new ExpQuant(o, c, ExprQuant.Op.COMPREHENSION, a, b);                                              :};
BaseExpr ::= LBRACE:o Declp:a              RBRACE:c {: RESULT=new ExpQuant(o, c, ExprQuant.Op.COMPREHENSION, a, new ExpConstant(null, ExprConstant.Op.TRUE, 0)); :};

//=============================================================================
