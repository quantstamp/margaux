
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
//----------------------------------------------------

package edu.mit.csail.sdg.alloy4compiler.parser;

import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.TreeSet;
import java.util.Map;
import java.util.LinkedHashMap;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.Reader;
import java.io.IOException;
import java.io.StringReader;
import java_cup_11a.runtime.*;
import edu.mit.csail.sdg.alloy4.Err;
import edu.mit.csail.sdg.alloy4.ErrorFatal;
import edu.mit.csail.sdg.alloy4.ErrorSyntax;
import edu.mit.csail.sdg.alloy4.Pos;
import edu.mit.csail.sdg.alloy4.Pair;
import edu.mit.csail.sdg.alloy4.Util;
import edu.mit.csail.sdg.alloy4compiler.ast.ExprBinary;
import edu.mit.csail.sdg.alloy4compiler.ast.ExprConstant;
import edu.mit.csail.sdg.alloy4compiler.ast.ExprUnary;
import edu.mit.csail.sdg.alloy4compiler.ast.ExprQuant;

/** Autogenerated by CUP.
  */
final class CompParser extends java_cup_11a.runtime.lr_parser {

  /** Default constructor. */
  public CompParser() {super();}

  /** Constructor which sets the default scanner. */
  public CompParser(java_cup_11a.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CompParser(java_cup_11a.runtime.Scanner s, java_cup_11a.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] =
    unpackFromStrings(new String[] {
    "\000\342\000\002\065\005\000\002\002\004\000\002\036" +
    "\004\000\002\036\007\000\002\036\002\000\002\044\004" +
    "\000\002\044\006\000\002\044\007\000\002\044\011\000" +
    "\002\045\002\000\002\045\004\000\002\050\005\000\002" +
    "\050\006\000\002\050\005\000\002\050\006\000\002\050" +
    "\004\000\002\050\005\000\002\050\005\000\002\050\002" +
    "\000\002\006\002\000\002\006\004\000\002\007\002\000" +
    "\002\007\005\000\002\050\010\000\002\050\010\000\002" +
    "\050\010\000\002\050\010\000\002\016\002\000\002\016" +
    "\004\000\002\054\005\000\002\054\007\000\002\054\005" +
    "\000\002\054\003\000\002\066\003\000\002\066\005\000" +
    "\002\067\005\000\002\067\004\000\002\067\005\000\002" +
    "\067\004\000\002\067\005\000\002\067\004\000\002\067" +
    "\005\000\002\067\004\000\002\067\005\000\002\067\004" +
    "\000\002\067\005\000\002\067\004\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\027\011\000\002\027\011\000\002\027\006\000\002\027" +
    "\013\000\002\027\013\000\002\027\010\000\002\051\007" +
    "\000\002\051\007\000\002\051\004\000\002\051\011\000" +
    "\002\051\011\000\002\051\006\000\002\030\002\000\002" +
    "\030\004\000\002\055\013\000\002\057\003\000\002\057" +
    "\003\000\002\057\003\000\002\057\003\000\002\060\002" +
    "\000\002\060\004\000\002\056\004\000\002\056\004\000" +
    "\002\056\004\000\002\056\004\000\002\056\004\000\002" +
    "\056\002\000\002\061\003\000\002\061\003\000\002\061" +
    "\003\000\002\061\003\000\002\063\002\000\002\063\003" +
    "\000\002\062\003\000\002\062\005\000\002\064\003\000" +
    "\002\064\003\000\002\064\003\000\002\064\003\000\002" +
    "\064\005\000\002\064\005\000\002\064\005\000\002\064" +
    "\005\000\002\037\003\000\002\037\005\000\002\037\005" +
    "\000\002\040\003\000\002\040\005\000\002\041\003\000" +
    "\002\041\005\000\002\010\006\000\002\010\006\000\002" +
    "\010\006\000\002\010\005\000\002\011\005\000\002\011" +
    "\003\000\002\012\002\000\002\012\003\000\002\012\005" +
    "\000\002\012\004\000\002\035\006\000\002\035\007\000" +
    "\002\021\002\000\002\021\003\000\002\020\005\000\002" +
    "\020\004\000\002\022\003\000\002\022\004\000\002\023" +
    "\004\000\002\023\003\000\002\024\002\000\002\024\003" +
    "\000\002\025\003\000\002\025\005\000\002\017\003\000" +
    "\002\017\004\000\002\017\005\000\002\017\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\005\000\002\046\003\000\002\046\005\000\002\015\003" +
    "\000\002\015\005\000\002\031\003\000\002\031\003\000" +
    "\002\032\003\000\002\032\007\000\002\033\007\000\002" +
    "\033\005\000\002\002\003\000\002\002\005\000\002\042" +
    "\003\000\002\042\004\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\004\000\002\005\004\000\002\005\004" +
    "\000\002\005\004\000\002\005\004\000\002\005\004\000" +
    "\002\005\004\000\002\005\003\000\002\070\003\000\002" +
    "\070\005\000\002\070\005\000\002\043\003\000\002\043" +
    "\004\000\002\043\004\000\002\043\004\000\002\047\003" +
    "\000\002\047\005\000\002\034\003\000\002\034\005\000" +
    "\002\053\003\000\002\053\005\000\002\053\005\000\002" +
    "\053\005\000\002\053\005\000\002\053\005\000\002\053" +
    "\005\000\002\053\005\000\002\053\005\000\002\053\005" +
    "\000\002\053\005\000\002\053\005\000\002\053\005\000" +
    "\002\053\005\000\002\053\005\000\002\053\005\000\002" +
    "\053\005\000\002\013\003\000\002\013\005\000\002\052" +
    "\003\000\002\052\005\000\002\004\003\000\002\004\006" +
    "\000\002\004\006\000\002\004\006\000\002\004\006\000" +
    "\002\014\003\000\002\014\005\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\071\003\000\002\071" +
    "\004\000\002\071\004\000\002\071\004\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\005\000\002\003\003\000\002\003\003\000\002" +
    "\003\005\000\002\003\004\000\002\003\003\000\002\003" +
    "\003\000\002\003\006\000\002\003\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table =
    unpackFromStrings(new String[] {
    "\000\u01ab\000\040\002\ufffd\024\ufffd\032\ufffd\037\ufffd\053" +
    "\ufffd\055\ufffd\060\ufffd\072\ufffd\077\005\113\ufffd\114\ufffd" +
    "\121\ufffd\126\ufffd\131\ufffd\135\ufffd\001\002\000\036\002" +
    "\ufff8\024\ufff8\032\ufff8\037\ufff8\053\ufff8\055\ufff8\060\ufff8" +
    "\072\ufff8\113\ufff8\114\ufff8\121\ufff8\126\ufff8\131\ufff8\135" +
    "\ufff8\001\002\000\010\127\014\141\013\144\010\001\002" +
    "\000\004\002\007\001\002\000\004\002\000\001\002\000" +
    "\276\002\uffa0\004\uffa0\005\uffa0\006\uffa0\007\uffa0\010\uffa0" +
    "\011\uffa0\012\uffa0\013\uffa0\014\uffa0\015\uffa0\016\uffa0\017" +
    "\uffa0\020\uffa0\021\uffa0\022\uffa0\023\uffa0\024\uffa0\025\uffa0" +
    "\026\uffa0\027\uffa0\030\uffa0\031\uffa0\032\uffa0\033\uffa0\034" +
    "\uffa0\036\uffa0\037\uffa0\040\uffa0\041\uffa0\042\uffa0\043\uffa0" +
    "\044\uffa0\045\uffa0\046\uffa0\051\uffa0\052\uffa0\053\uffa0\054" +
    "\uffa0\055\uffa0\056\uffa0\057\uffa0\060\uffa0\061\uffa0\062\uffa0" +
    "\063\uffa0\064\uffa0\065\uffa0\066\uffa0\067\uffa0\070\uffa0\071" +
    "\uffa0\072\uffa0\073\uffa0\074\uffa0\075\uffa0\076\uffa0\100\uffa0" +
    "\101\uffa0\102\uffa0\103\uffa0\104\uffa0\105\uffa0\106\uffa0\107" +
    "\uffa0\110\uffa0\111\uffa0\112\uffa0\113\uffa0\114\uffa0\115\uffa0" +
    "\117\uffa0\120\uffa0\121\uffa0\122\uffa0\123\uffa0\124\uffa0\125" +
    "\uffa0\126\uffa0\127\uffa0\130\uffa0\131\uffa0\132\uffa0\133\uffa0" +
    "\134\uffa0\135\uffa0\136\uffa0\137\uffa0\140\uffa0\141\uffa0\142" +
    "\uffa0\143\uffa0\144\uffa0\145\uffa0\001\002\000\040\002\uffff" +
    "\024\uffff\032\uffff\037\uffff\053\uffff\055\uffff\060\uffff\067" +
    "\023\072\uffff\113\uffff\114\uffff\121\uffff\126\uffff\131\uffff" +
    "\135\uffff\001\002\000\276\002\uffa3\004\uffa3\005\uffa3\006" +
    "\uffa3\007\uffa3\010\uffa3\011\uffa3\012\uffa3\013\uffa3\014\uffa3" +
    "\015\uffa3\016\uffa3\017\uffa3\020\uffa3\021\uffa3\022\uffa3\023" +
    "\uffa3\024\uffa3\025\uffa3\026\uffa3\027\uffa3\030\uffa3\031\uffa3" +
    "\032\uffa3\033\uffa3\034\uffa3\036\uffa3\037\uffa3\040\uffa3\041" +
    "\uffa3\042\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3\051\uffa3" +
    "\052\uffa3\053\uffa3\054\uffa3\055\uffa3\056\uffa3\057\uffa3\060" +
    "\uffa3\061\uffa3\062\uffa3\063\uffa3\064\uffa3\065\uffa3\066\uffa3" +
    "\067\uffa3\070\uffa3\071\uffa3\072\uffa3\073\uffa3\074\uffa3\075" +
    "\uffa3\076\uffa3\100\uffa3\101\uffa3\102\uffa3\103\uffa3\104\uffa3" +
    "\105\uffa3\106\uffa3\107\uffa3\110\uffa3\111\uffa3\112\uffa3\113" +
    "\uffa3\114\uffa3\115\uffa3\117\uffa3\120\uffa3\121\uffa3\122\uffa3" +
    "\123\uffa3\124\uffa3\125\uffa3\126\uffa3\127\uffa3\130\uffa3\131" +
    "\uffa3\132\uffa3\133\017\134\uffa3\135\uffa3\136\uffa3\137\uffa3" +
    "\140\uffa3\141\uffa3\142\uffa3\143\uffa3\144\uffa3\145\uffa3\001" +
    "\002\000\004\133\021\001\002\000\004\133\015\001\002" +
    "\000\004\144\010\001\002\000\276\002\uffa1\004\uffa1\005" +
    "\uffa1\006\uffa1\007\uffa1\010\uffa1\011\uffa1\012\uffa1\013\uffa1" +
    "\014\uffa1\015\uffa1\016\uffa1\017\uffa1\020\uffa1\021\uffa1\022" +
    "\uffa1\023\uffa1\024\uffa1\025\uffa1\026\uffa1\027\uffa1\030\uffa1" +
    "\031\uffa1\032\uffa1\033\uffa1\034\uffa1\036\uffa1\037\uffa1\040" +
    "\uffa1\041\uffa1\042\uffa1\043\uffa1\044\uffa1\045\uffa1\046\uffa1" +
    "\051\uffa1\052\uffa1\053\uffa1\054\uffa1\055\uffa1\056\uffa1\057" +
    "\uffa1\060\uffa1\061\uffa1\062\uffa1\063\uffa1\064\uffa1\065\uffa1" +
    "\066\uffa1\067\uffa1\070\uffa1\071\uffa1\072\uffa1\073\uffa1\074" +
    "\uffa1\075\uffa1\076\uffa1\100\uffa1\101\uffa1\102\uffa1\103\uffa1" +
    "\104\uffa1\105\uffa1\106\uffa1\107\uffa1\110\uffa1\111\uffa1\112" +
    "\uffa1\113\uffa1\114\uffa1\115\uffa1\117\uffa1\120\uffa1\121\uffa1" +
    "\122\uffa1\123\uffa1\124\uffa1\125\uffa1\126\uffa1\127\uffa1\130" +
    "\uffa1\131\uffa1\132\uffa1\133\017\134\uffa1\135\uffa1\136\uffa1" +
    "\137\uffa1\140\uffa1\141\uffa1\142\uffa1\143\uffa1\144\uffa1\145" +
    "\uffa1\001\002\000\004\144\020\001\002\000\276\002\uff9f" +
    "\004\uff9f\005\uff9f\006\uff9f\007\uff9f\010\uff9f\011\uff9f\012" +
    "\uff9f\013\uff9f\014\uff9f\015\uff9f\016\uff9f\017\uff9f\020\uff9f" +
    "\021\uff9f\022\uff9f\023\uff9f\024\uff9f\025\uff9f\026\uff9f\027" +
    "\uff9f\030\uff9f\031\uff9f\032\uff9f\033\uff9f\034\uff9f\036\uff9f" +
    "\037\uff9f\040\uff9f\041\uff9f\042\uff9f\043\uff9f\044\uff9f\045" +
    "\uff9f\046\uff9f\051\uff9f\052\uff9f\053\uff9f\054\uff9f\055\uff9f" +
    "\056\uff9f\057\uff9f\060\uff9f\061\uff9f\062\uff9f\063\uff9f\064" +
    "\uff9f\065\uff9f\066\uff9f\067\uff9f\070\uff9f\071\uff9f\072\uff9f" +
    "\073\uff9f\074\uff9f\075\uff9f\076\uff9f\100\uff9f\101\uff9f\102" +
    "\uff9f\103\uff9f\104\uff9f\105\uff9f\106\uff9f\107\uff9f\110\uff9f" +
    "\111\uff9f\112\uff9f\113\uff9f\114\uff9f\115\uff9f\117\uff9f\120" +
    "\uff9f\121\uff9f\122\uff9f\123\uff9f\124\uff9f\125\uff9f\126\uff9f" +
    "\127\uff9f\130\uff9f\131\uff9f\132\uff9f\133\uff9f\134\uff9f\135" +
    "\uff9f\136\uff9f\137\uff9f\140\uff9f\141\uff9f\142\uff9f\143\uff9f" +
    "\144\uff9f\145\uff9f\001\002\000\004\144\010\001\002\000" +
    "\276\002\uffa2\004\uffa2\005\uffa2\006\uffa2\007\uffa2\010\uffa2" +
    "\011\uffa2\012\uffa2\013\uffa2\014\uffa2\015\uffa2\016\uffa2\017" +
    "\uffa2\020\uffa2\021\uffa2\022\uffa2\023\uffa2\024\uffa2\025\uffa2" +
    "\026\uffa2\027\uffa2\030\uffa2\031\uffa2\032\uffa2\033\uffa2\034" +
    "\uffa2\036\uffa2\037\uffa2\040\uffa2\041\uffa2\042\uffa2\043\uffa2" +
    "\044\uffa2\045\uffa2\046\uffa2\051\uffa2\052\uffa2\053\uffa2\054" +
    "\uffa2\055\uffa2\056\uffa2\057\uffa2\060\uffa2\061\uffa2\062\uffa2" +
    "\063\uffa2\064\uffa2\065\uffa2\066\uffa2\067\uffa2\070\uffa2\071" +
    "\uffa2\072\uffa2\073\uffa2\074\uffa2\075\uffa2\076\uffa2\100\uffa2" +
    "\101\uffa2\102\uffa2\103\uffa2\104\uffa2\105\uffa2\106\uffa2\107" +
    "\uffa2\110\uffa2\111\uffa2\112\uffa2\113\uffa2\114\uffa2\115\uffa2" +
    "\117\uffa2\120\uffa2\121\uffa2\122\uffa2\123\uffa2\124\uffa2\125" +
    "\uffa2\126\uffa2\127\uffa2\130\uffa2\131\uffa2\132\uffa2\133\017" +
    "\134\uffa2\135\uffa2\136\uffa2\137\uffa2\140\uffa2\141\uffa2\142" +
    "\uffa2\143\uffa2\144\uffa2\145\uffa2\001\002\000\010\127\014" +
    "\141\013\144\010\001\002\000\016\040\uff9e\041\uff9e\052" +
    "\uff9e\064\uff9e\066\uff9e\124\uff9e\001\002\000\006\041\026" +
    "\124\027\001\002\000\010\127\014\141\013\144\010\001" +
    "\002\000\036\002\ufffe\024\ufffe\032\ufffe\037\ufffe\053\ufffe" +
    "\055\ufffe\060\ufffe\072\ufffe\113\ufffe\114\ufffe\121\ufffe\126" +
    "\ufffe\131\ufffe\135\ufffe\001\002\000\016\040\uff9d\041\uff9d" +
    "\052\uff9d\064\uff9d\066\uff9d\124\uff9d\001\002\000\036\002" +
    "\uffef\024\uffef\032\uffef\037\uffef\053\uffef\055\uffef\060\uffef" +
    "\072\uffef\113\uffef\114\034\121\uffef\126\uffef\131\uffef\135" +
    "\uffef\001\002\000\036\002\ufff7\024\ufff7\032\ufff7\037\ufff7" +
    "\053\ufff7\055\ufff7\060\ufff7\072\ufff7\113\ufff7\114\ufff7\121" +
    "\ufff7\126\ufff7\131\ufff7\135\ufff7\001\002\000\034\002\001" +
    "\024\uffc2\032\060\037\062\053\064\055\056\060\057\072" +
    "\uffc2\113\uffc2\121\065\126\063\131\uffc2\135\uffc2\001\002" +
    "\000\010\127\014\141\013\144\010\001\002\000\042\002" +
    "\ufffc\024\ufffc\031\036\032\ufffc\037\ufffc\053\ufffc\055\ufffc" +
    "\060\ufffc\067\037\072\ufffc\113\ufffc\114\ufffc\121\ufffc\126" +
    "\ufffc\131\ufffc\135\ufffc\001\002\000\010\127\014\141\013" +
    "\144\010\001\002\000\020\102\044\124\uffaf\127\014\132" +
    "\045\141\013\143\043\144\010\001\002\000\004\124\051" +
    "\001\002\000\006\041\uffb3\124\uffb3\001\002\000\006\041" +
    "\047\124\uffae\001\002\000\006\041\uffb2\124\uffb2\001\002" +
    "\000\006\041\uffb0\124\uffb0\001\002\000\006\041\uffb1\124" +
    "\uffb1\001\002\000\006\041\uffad\124\uffad\001\002\000\016" +
    "\102\044\127\014\132\045\141\013\143\043\144\010\001" +
    "\002\000\006\041\uffac\124\uffac\001\002\000\040\002\ufffa" +
    "\024\ufffa\031\052\032\ufffa\037\ufffa\053\ufffa\055\ufffa\060" +
    "\ufffa\072\ufffa\113\ufffa\114\ufffa\121\ufffa\126\ufffa\131\ufffa" +
    "\135\ufffa\001\002\000\010\127\014\141\013\144\010\001" +
    "\002\000\036\002\ufff9\024\ufff9\032\ufff9\037\ufff9\053\ufff9" +
    "\055\ufff9\060\ufff9\072\ufff9\113\ufff9\114\ufff9\121\ufff9\126" +
    "\ufff9\131\ufff9\135\ufff9\001\002\000\036\002\ufffb\024\ufffb" +
    "\032\ufffb\037\ufffb\053\ufffb\055\ufffb\060\ufffb\072\ufffb\113" +
    "\ufffb\114\ufffb\121\ufffb\126\ufffb\131\ufffb\135\ufffb\001\002" +
    "\000\034\002\ufff2\024\ufff2\032\ufff2\037\ufff2\053\ufff2\055" +
    "\ufff2\060\ufff2\072\ufff2\113\ufff2\121\ufff2\126\ufff2\131\ufff2" +
    "\135\ufff2\001\002\000\016\102\072\127\014\132\073\141" +
    "\013\143\071\144\010\001\002\000\010\127\014\141\013" +
    "\144\010\001\002\000\012\066\074\127\014\141\013\144" +
    "\010\001\002\000\014\024\uffbb\072\uffbb\113\uffbb\131\uffbb" +
    "\135\uffbb\001\002\000\016\044\u013c\066\uffee\067\uffee\127" +
    "\uffee\141\uffee\144\uffee\001\002\000\016\044\u013c\066\uffee" +
    "\067\uffee\127\uffee\141\uffee\144\uffee\001\002\000\012\066" +
    "\074\127\014\141\013\144\010\001\002\000\016\102\072" +
    "\127\014\132\073\141\013\143\071\144\010\001\002\000" +
    "\034\002\ufff0\024\ufff0\032\ufff0\037\ufff0\053\ufff0\055\ufff0" +
    "\060\ufff0\072\ufff0\113\ufff0\121\ufff0\126\ufff0\131\ufff0\135" +
    "\ufff0\001\002\000\004\044\u012d\001\002\000\012\044\uffd2" +
    "\066\074\067\077\073\076\001\002\000\004\044\uffd1\001" +
    "\002\000\004\044\uffcf\001\002\000\004\044\uffd0\001\002" +
    "\000\104\025\171\026\146\033\174\036\143\042\151\060" +
    "\121\061\163\065\124\066\161\070\164\071\145\072\170" +
    "\073\123\100\154\101\160\102\157\103\136\112\140\113" +
    "\155\123\331\127\113\130\176\132\125\134\162\135\115" +
    "\136\134\137\147\140\167\141\142\142\132\143\117\144" +
    "\010\145\150\001\002\000\034\002\uffc6\024\uffc6\032\uffc6" +
    "\037\uffc6\053\uffc6\055\uffc6\060\uffc6\072\uffc6\113\uffc6\121" +
    "\uffc6\126\uffc6\131\uffc6\135\uffc6\001\002\000\022\041\106" +
    "\042\100\050\102\116\101\125\uff96\127\014\141\013\144" +
    "\010\001\002\000\022\041\106\042\100\050\102\116\101" +
    "\124\uff96\127\014\141\013\144\010\001\002\000\010\127" +
    "\014\141\013\144\010\001\002\000\010\127\014\141\013" +
    "\144\010\001\002\000\010\127\014\141\013\144\010\001" +
    "\002\000\012\041\u0122\123\uff95\124\uff95\125\uff95\001\002" +
    "\000\006\040\112\041\026\001\002\000\004\124\110\001" +
    "\002\000\026\041\106\042\100\050\102\116\101\123\uff96" +
    "\124\uff96\125\uff96\127\014\141\013\144\010\001\002\000" +
    "\010\123\uff93\124\uff93\125\uff93\001\002\000\004\066\074" +
    "\001\002\000\034\002\uffc7\024\uffc7\032\uffc7\037\uffc7\053" +
    "\uffc7\055\uffc7\060\uffc7\072\uffc7\113\uffc7\121\uffc7\126\uffc7" +
    "\131\uffc7\135\uffc7\001\002\000\102\025\171\026\146\033" +
    "\174\036\143\042\151\060\121\061\163\065\124\066\161" +
    "\070\164\071\145\072\170\073\123\100\154\101\160\102" +
    "\157\103\136\112\140\113\155\127\113\130\176\132\125" +
    "\134\162\135\115\136\134\137\147\140\167\141\142\142" +
    "\132\143\117\144\010\145\150\001\002\000\050\033\174" +
    "\036\143\042\151\060\121\061\163\065\124\066\161\073" +
    "\123\102\157\127\203\132\125\133\221\136\134\140\167" +
    "\141\142\142\132\143\117\144\010\145\150\001\002\000" +
    "\162\025\uff5a\026\uff5a\030\uff5a\033\uff5a\034\uff5a\036\uff5a" +
    "\041\uff5a\042\uff5a\045\uff5a\046\uff5a\056\uff5a\057\uff5a\060" +
    "\uff5a\061\uff5a\062\uff5a\063\uff5a\064\uff5a\065\uff5a\066\uff5a" +
    "\070\uff5a\071\uff5a\072\uff5a\073\uff5a\074\uff5a\075\uff5a\076" +
    "\uff5a\100\uff5a\101\uff5a\102\uff5a\103\uff5a\104\uff5a\105\uff5a" +
    "\106\uff5a\107\uff5a\110\uff5a\111\uff5a\112\uff5a\113\uff5a\115" +
    "\uff5a\117\uff5a\123\uff5a\124\uff5a\125\uff5a\127\uff5a\130\uff5a" +
    "\132\uff5a\134\uff5a\135\uff5a\136\uff5a\137\uff5a\140\uff5a\141" +
    "\uff5a\142\uff5a\143\uff5a\144\uff5a\145\uff5a\001\002\000\046" +
    "\033\174\036\143\042\151\060\121\061\163\065\124\066" +
    "\161\073\123\102\157\127\203\132\125\136\134\140\167" +
    "\141\142\142\132\143\117\144\010\145\150\001\002\000" +
    "\120\025\uff7c\026\uff7c\033\uff7c\034\uff7c\036\uff7c\041\uff7c" +
    "\042\uff7c\060\uff7c\061\uff7c\062\u0111\065\uff7c\066\uff7c\070" +
    "\uff7c\071\uff7c\072\uff7c\073\uff7c\100\uff7c\101\uff7c\102\uff7c" +
    "\103\uff7c\112\uff7c\113\uff7c\115\uff7c\123\uff7c\124\uff7c\125" +
    "\uff7c\127\uff7c\130\uff7c\132\uff7c\134\uff7c\135\uff7c\136\uff7c" +
    "\137\uff7c\140\uff7c\141\uff7c\142\uff7c\143\uff7c\144\uff7c\145" +
    "\uff7c\001\002\000\236\004\uff2a\005\uff2a\006\uff2a\007\uff2a" +
    "\010\uff2a\011\uff2a\012\uff2a\013\uff2a\014\uff2a\015\uff2a\016" +
    "\uff2a\017\uff2a\020\uff2a\021\uff2a\022\uff2a\023\uff2a\025\uff2a" +
    "\026\uff2a\027\uff2a\030\uff2a\033\uff2a\034\uff2a\036\uff2a\041" +
    "\uff2a\042\uff2a\043\uff2a\044\uff2a\045\uff2a\046\uff2a\056\uff2a" +
    "\057\uff2a\060\uff2a\061\uff2a\062\uff2a\063\uff2a\064\uff2a\065" +
    "\uff2a\066\uff2a\067\uff2a\070\uff2a\071\uff2a\072\uff2a\073\uff2a" +
    "\074\uff2a\075\uff2a\076\uff2a\100\uff2a\101\uff2a\102\uff2a\103" +
    "\uff2a\104\uff2a\105\uff2a\106\uff2a\107\uff2a\110\uff2a\111\uff2a" +
    "\112\uff2a\113\uff2a\115\uff2a\117\uff2a\120\uff2a\122\uff2a\123" +
    "\uff2a\124\uff2a\125\uff2a\127\uff2a\130\uff2a\132\uff2a\134\uff2a" +
    "\135\uff2a\136\uff2a\137\uff2a\140\uff2a\141\uff2a\142\uff2a\143" +
    "\uff2a\144\uff2a\145\uff2a\001\002\000\236\004\uff23\005\uff23" +
    "\006\uff23\007\uff23\010\uff23\011\uff23\012\uff23\013\uff23\014" +
    "\uff23\015\uff23\016\uff23\017\uff23\020\uff23\021\uff23\022\uff23" +
    "\023\uff23\025\uff23\026\uff23\027\uff23\030\uff23\033\uff23\034" +
    "\uff23\036\uff23\041\uff23\042\uff23\043\uff23\044\uff23\045\uff23" +
    "\046\uff23\056\uff23\057\uff23\060\uff23\061\uff23\062\uff23\063" +
    "\uff23\064\uff23\065\uff23\066\uff23\067\uff23\070\uff23\071\uff23" +
    "\072\uff23\073\uff23\074\uff23\075\uff23\076\uff23\100\uff23\101" +
    "\uff23\102\uff23\103\uff23\104\uff23\105\uff23\106\uff23\107\uff23" +
    "\110\uff23\111\uff23\112\uff23\113\uff23\115\uff23\117\uff23\120" +
    "\uff23\122\uff23\123\uff23\124\uff23\125\uff23\127\uff23\130\uff23" +
    "\132\uff23\134\uff23\135\uff23\136\uff23\137\uff23\140\uff23\141" +
    "\uff23\142\uff23\143\uff23\144\uff23\145\uff23\001\002\000\046" +
    "\033\174\036\143\042\151\060\121\061\163\065\124\066" +
    "\161\073\123\102\157\127\203\132\125\136\134\140\167" +
    "\141\142\142\132\143\117\144\010\145\150\001\002\000" +
    "\236\004\uff22\005\uff22\006\uff22\007\uff22\010\uff22\011\uff22" +
    "\012\uff22\013\uff22\014\uff22\015\uff22\016\uff22\017\uff22\020" +
    "\uff22\021\uff22\022\uff22\023\uff22\025\uff22\026\uff22\027\uff22" +
    "\030\uff22\033\uff22\034\uff22\036\uff22\041\uff22\042\uff22\043" +
    "\uff22\044\uff22\045\uff22\046\uff22\056\uff22\057\uff22\060\uff22" +
    "\061\uff22\062\uff22\063\uff22\064\uff22\065\uff22\066\uff22\067" +
    "\uff22\070\uff22\071\uff22\072\uff22\073\uff22\074\uff22\075\uff22" +
    "\076\uff22\100\uff22\101\uff22\102\uff22\103\uff22\104\uff22\105" +
    "\uff22\106\uff22\107\uff22\110\uff22\111\uff22\112\uff22\113\uff22" +
    "\115\uff22\117\uff22\120\uff22\122\uff22\123\uff22\124\uff22\125" +
    "\uff22\127\uff22\130\uff22\132\uff22\134\uff22\135\uff22\136\uff22" +
    "\137\uff22\140\uff22\141\uff22\142\uff22\143\uff22\144\uff22\145" +
    "\uff22\001\002\000\102\025\171\026\146\033\174\036\143" +
    "\042\151\060\121\061\163\065\124\066\161\070\164\071" +
    "\145\072\170\073\123\100\154\101\160\102\157\103\136" +
    "\112\140\113\155\127\113\130\176\132\125\134\162\135" +
    "\115\136\134\137\147\140\167\141\142\142\132\143\117" +
    "\144\010\145\150\001\002\000\050\033\174\036\143\042" +
    "\151\060\121\061\163\065\124\066\161\067\226\073\123" +
    "\102\157\127\203\132\125\136\134\140\167\141\142\142" +
    "\132\143\117\144\010\145\150\001\002\000\236\004\uff29" +
    "\005\uff29\006\uff29\007\uff29\010\uff29\011\uff29\012\uff29\013" +
    "\uff29\014\uff29\015\uff29\016\uff29\017\uff29\020\uff29\021\uff29" +
    "\022\uff29\023\uff29\025\uff29\026\uff29\027\uff29\030\uff29\033" +
    "\uff29\034\uff29\036\uff29\041\uff29\042\uff29\043\uff29\044\uff29" +
    "\045\uff29\046\uff29\056\uff29\057\uff29\060\uff29\061\uff29\062" +
    "\uff29\063\uff29\064\uff29\065\uff29\066\uff29\067\uff29\070\uff29" +
    "\071\uff29\072\uff29\073\uff29\074\uff29\075\uff29\076\uff29\100" +
    "\uff29\101\uff29\102\uff29\103\uff29\104\uff29\105\uff29\106\uff29" +
    "\107\uff29\110\uff29\111\uff29\112\uff29\113\uff29\115\uff29\117" +
    "\uff29\120\uff29\122\uff29\123\uff29\124\uff29\125\uff29\127\uff29" +
    "\130\uff29\132\uff29\134\uff29\135\uff29\136\uff29\137\uff29\140" +
    "\uff29\141\uff29\142\uff29\143\uff29\144\uff29\145\uff29\001\002" +
    "\000\120\025\uff78\026\uff78\033\uff78\034\uff78\036\uff78\041" +
    "\uff78\042\uff78\060\uff78\061\uff78\062\uff78\065\uff78\066\uff78" +
    "\070\uff78\071\uff78\072\uff78\073\uff78\100\uff78\101\uff78\102" +
    "\uff78\103\uff78\112\uff78\113\uff78\115\uff78\123\uff78\124\uff78" +
    "\125\uff78\127\uff78\130\uff78\132\uff78\134\uff78\135\uff78\136" +
    "\uff78\137\uff78\140\uff78\141\uff78\142\uff78\143\uff78\144\uff78" +
    "\145\uff78\001\002\000\236\004\uff35\005\uff35\006\uff35\007" +
    "\uff35\010\uff35\011\uff35\012\uff35\013\uff35\014\uff35\015\uff35" +
    "\016\uff35\017\uff35\020\uff35\021\uff35\022\uff35\023\uff35\025" +
    "\uff35\026\uff35\027\uff35\030\uff35\033\uff35\034\uff35\036\uff35" +
    "\041\uff35\042\uff35\043\uff35\044\uff35\045\uff35\046\uff35\056" +
    "\uff35\057\uff35\060\uff35\061\uff35\062\uff35\063\uff35\064\uff35" +
    "\065\uff35\066\uff35\067\uff35\070\uff35\071\uff35\072\uff35\073" +
    "\uff35\074\uff35\075\uff35\076\uff35\100\uff35\101\uff35\102\uff35" +
    "\103\uff35\104\uff35\105\uff35\106\uff35\107\uff35\110\uff35\111" +
    "\uff35\112\uff35\113\uff35\115\uff35\117\uff35\120\uff35\122\uff35" +
    "\123\uff35\124\uff35\125\uff35\127\uff35\130\uff35\132\uff35\134" +
    "\uff35\135\uff35\136\uff35\137\uff35\140\uff35\141\uff35\142\uff35" +
    "\143\uff35\144\uff35\145\uff35\001\002\000\166\025\uff51\026" +
    "\uff51\027\uff51\030\uff51\033\uff51\034\uff51\036\uff51\041\uff51" +
    "\042\uff51\045\uff51\046\uff51\056\uff51\057\uff51\060\uff51\061" +
    "\uff51\062\uff51\063\uff51\064\uff51\065\uff51\066\uff51\070\uff51" +
    "\071\uff51\072\uff51\073\uff51\074\uff51\075\uff51\076\uff51\100" +
    "\uff51\101\uff51\102\uff51\103\uff51\104\uff51\105\uff51\106\uff51" +
    "\107\uff51\110\uff51\111\uff51\112\uff51\113\uff51\115\uff51\117" +
    "\uff51\120\uff51\123\uff51\124\uff51\125\uff51\127\uff51\130\uff51" +
    "\132\uff51\134\uff51\135\uff51\136\uff51\137\uff51\140\uff51\141" +
    "\uff51\142\uff51\143\uff51\144\uff51\145\uff51\001\002\000\126" +
    "\025\uff76\026\uff76\030\u0115\033\uff76\034\uff76\036\uff76\041" +
    "\uff76\042\uff76\045\uff76\060\uff76\061\uff76\062\uff76\063\u0114" +
    "\065\uff76\066\uff76\070\uff76\071\uff76\072\uff76\073\uff76\100" +
    "\uff76\101\uff76\102\uff76\103\uff76\112\uff76\113\uff76\115\uff76" +
    "\123\uff76\124\uff76\125\uff76\127\uff76\130\uff76\132\uff76\134" +
    "\uff76\135\uff76\136\uff76\137\uff76\140\uff76\141\uff76\142\uff76" +
    "\143\uff76\144\uff76\145\uff76\001\002\000\036\033\174\036" +
    "\143\061\163\066\161\073\123\102\157\127\203\132\125" +
    "\136\134\141\142\142\132\143\117\144\010\145\150\001" +
    "\002\000\116\025\uff84\026\uff84\033\uff84\034\uff84\036\uff84" +
    "\041\uff84\042\uff84\060\uff84\061\uff84\065\uff84\066\uff84\070" +
    "\uff84\071\uff84\072\uff84\073\uff84\100\uff84\101\uff84\102\uff84" +
    "\103\uff84\112\uff84\113\uff84\115\u010f\123\uff84\124\uff84\125" +
    "\uff84\127\uff84\130\uff84\132\uff84\134\uff84\135\uff84\136\uff84" +
    "\137\uff84\140\uff84\141\uff84\142\uff84\143\uff84\144\uff84\145" +
    "\uff84\001\002\000\036\033\174\036\143\061\163\066\161" +
    "\073\123\102\157\127\203\132\125\136\134\141\142\142" +
    "\132\143\117\144\010\145\150\001\002\000\120\025\uff7a" +
    "\026\uff7a\033\uff7a\034\uff7a\036\uff7a\041\uff7a\042\uff7a\060" +
    "\uff7a\061\uff7a\062\uff7a\065\uff7a\066\uff7a\070\uff7a\071\uff7a" +
    "\072\uff7a\073\uff7a\100\uff7a\101\uff7a\102\uff7a\103\uff7a\112" +
    "\uff7a\113\uff7a\115\uff7a\123\uff7a\124\uff7a\125\uff7a\127\uff7a" +
    "\130\uff7a\132\uff7a\134\uff7a\135\uff7a\136\uff7a\137\uff7a\140" +
    "\uff7a\141\uff7a\142\uff7a\143\uff7a\144\uff7a\145\uff7a\001\002" +
    "\000\064\025\171\033\174\036\143\042\151\060\121\061" +
    "\163\065\124\066\161\072\170\073\123\101\160\102\157" +
    "\103\136\113\155\127\113\130\176\132\125\135\115\136" +
    "\134\140\167\141\142\142\132\143\117\144\010\145\150" +
    "\001\002\000\120\025\uff77\026\uff77\033\uff77\034\uff77\036" +
    "\uff77\041\uff77\042\uff77\060\uff77\061\uff77\062\uff77\065\uff77" +
    "\066\uff77\070\uff77\071\uff77\072\uff77\073\uff77\100\uff77\101" +
    "\uff77\102\uff77\103\uff77\112\uff77\113\uff77\115\uff77\123\uff77" +
    "\124\uff77\125\uff77\127\uff77\130\uff77\132\uff77\134\uff77\135" +
    "\uff77\136\uff77\137\uff77\140\uff77\141\uff77\142\uff77\143\uff77" +
    "\144\uff77\145\uff77\001\002\000\016\042\100\050\102\116" +
    "\101\127\014\141\013\144\010\001\002\000\236\004\uff3a" +
    "\005\uff3a\006\uff3a\007\uff3a\010\uff3a\011\uff3a\012\uff3a\013" +
    "\uff3a\014\uff3a\015\uff3a\016\uff3a\017\uff3a\020\uff3a\021\uff3a" +
    "\022\uff3a\023\uff3a\025\uff3a\026\uff3a\027\uff3a\030\uff3a\033" +
    "\uff3a\034\uff3a\036\uff3a\041\uff3a\042\uff3a\043\uff3a\044\uff3a" +
    "\045\uff3a\046\uff3a\056\uff3a\057\uff3a\060\uff3a\061\uff3a\062" +
    "\uff3a\063\uff3a\064\uff3a\065\uff3a\066\uff3a\067\uff3a\070\uff3a" +
    "\071\uff3a\072\uff3a\073\uff3a\074\uff3a\075\uff3a\076\uff3a\100" +
    "\uff3a\101\uff3a\102\uff3a\103\uff3a\104\uff3a\105\uff3a\106\uff3a" +
    "\107\uff3a\110\uff3a\111\uff3a\112\uff3a\113\uff3a\115\uff3a\117" +
    "\uff3a\120\uff3a\122\uff3a\123\uff3a\124\uff3a\125\uff3a\127\uff3a" +
    "\130\uff3a\132\uff3a\134\uff3a\135\uff3a\136\uff3a\137\uff3a\140" +
    "\uff3a\141\uff3a\142\uff3a\143\uff3a\144\uff3a\145\uff3a\001\002" +
    "\000\240\004\uff26\005\uff26\006\uff26\007\uff26\010\uff26\011" +
    "\uff26\012\uff26\013\uff26\014\uff26\015\uff26\016\uff26\017\uff26" +
    "\020\uff26\021\uff26\022\uff26\023\uff26\025\uff26\026\uff26\027" +
    "\uff26\030\uff26\033\uff26\034\uff26\036\uff26\041\uff26\042\uff26" +
    "\043\uff26\044\uff26\045\uff26\046\uff26\056\uff26\057\uff26\060" +
    "\uff26\061\uff26\062\uff26\063\uff26\064\uff26\065\uff26\066\uff26" +
    "\067\uff26\070\uff26\071\uff26\072\uff26\073\uff26\074\uff26\075" +
    "\uff26\076\uff26\100\uff26\101\uff26\102\uff26\103\uff26\104\uff26" +
    "\105\uff26\106\uff26\107\uff26\110\uff26\111\uff26\112\uff26\113" +
    "\uff26\115\uff26\117\uff26\120\uff26\122\uff26\123\uff26\124\uff26" +
    "\125\uff26\127\uff26\130\uff26\132\uff26\133\021\134\uff26\135" +
    "\uff26\136\uff26\137\uff26\140\uff26\141\uff26\142\uff26\143\uff26" +
    "\144\uff26\145\uff26\001\002\000\036\033\174\036\143\061" +
    "\163\066\161\073\123\102\157\127\203\132\125\136\134" +
    "\141\142\142\132\143\117\144\010\145\150\001\002\000" +
    "\164\025\uff57\026\uff57\030\uff57\033\uff57\034\uff57\036\uff57" +
    "\041\uff57\042\uff57\045\uff57\046\uff57\056\uff57\057\uff57\060" +
    "\uff57\061\uff57\062\uff57\063\uff57\064\uff57\065\uff57\066\uff57" +
    "\070\uff57\071\uff57\072\uff57\073\uff57\074\uff57\075\uff57\076" +
    "\uff57\100\uff57\101\uff57\102\uff57\103\uff57\104\uff57\105\uff57" +
    "\106\uff57\107\uff57\110\uff57\111\uff57\112\uff57\113\uff57\115" +
    "\uff57\117\uff57\120\u0108\123\uff57\124\uff57\125\uff57\127\uff57" +
    "\130\uff57\132\uff57\134\uff57\135\uff57\136\uff57\137\uff57\140" +
    "\uff57\141\uff57\142\uff57\143\uff57\144\uff57\145\uff57\001\002" +
    "\000\016\042\100\050\102\116\101\127\014\141\013\144" +
    "\010\001\002\000\016\042\100\050\102\116\101\127\014" +
    "\141\013\144\010\001\002\000\016\042\100\050\102\116" +
    "\101\127\014\141\013\144\010\001\002\000\236\004\uff2c" +
    "\005\uff2c\006\uff2c\007\uff2c\010\uff2c\011\uff2c\012\uff2c\013" +
    "\uff2c\014\uff2c\015\uff2c\016\uff2c\017\uff2c\020\uff2c\021\uff2c" +
    "\022\uff2c\023\uff2c\025\uff2c\026\uff2c\027\uff2c\030\uff2c\033" +
    "\uff2c\034\uff2c\036\uff2c\041\uff2c\042\uff2c\043\uff2c\044\uff2c" +
    "\045\uff2c\046\uff2c\056\uff2c\057\uff2c\060\uff2c\061\uff2c\062" +
    "\uff2c\063\uff2c\064\uff2c\065\uff2c\066\uff2c\067\uff2c\070\uff2c" +
    "\071\uff2c\072\uff2c\073\uff2c\074\uff2c\075\uff2c\076\uff2c\100" +
    "\uff2c\101\uff2c\102\uff2c\103\uff2c\104\uff2c\105\uff2c\106\uff2c" +
    "\107\uff2c\110\uff2c\111\uff2c\112\uff2c\113\uff2c\115\uff2c\117" +
    "\uff2c\120\uff2c\122\uff2c\123\uff2c\124\uff2c\125\uff2c\127\uff2c" +
    "\130\uff2c\132\uff2c\134\uff2c\135\uff2c\136\uff2c\137\uff2c\140" +
    "\uff2c\141\uff2c\142\uff2c\143\uff2c\144\uff2c\145\uff2c\001\002" +
    "\000\004\067\340\001\002\000\162\025\uff5b\026\uff5b\030" +
    "\uff5b\033\uff5b\034\uff5b\036\uff5b\041\uff5b\042\uff5b\045\uff5b" +
    "\046\uff5b\056\uff5b\057\uff5b\060\uff5b\061\uff5b\062\uff5b\063" +
    "\uff5b\064\uff5b\065\uff5b\066\uff5b\070\uff5b\071\uff5b\072\uff5b" +
    "\073\uff5b\074\uff5b\075\uff5b\076\233\100\uff5b\101\uff5b\102" +
    "\uff5b\103\uff5b\104\uff5b\105\uff5b\106\uff5b\107\uff5b\110\uff5b" +
    "\111\uff5b\112\uff5b\113\uff5b\115\uff5b\117\232\123\uff5b\124" +
    "\uff5b\125\uff5b\127\uff5b\130\uff5b\132\uff5b\134\uff5b\135\uff5b" +
    "\136\uff5b\137\uff5b\140\uff5b\141\uff5b\142\uff5b\143\uff5b\144" +
    "\uff5b\145\uff5b\001\002\000\156\025\uff70\026\uff70\030\uff70" +
    "\033\uff70\034\uff70\036\uff70\041\uff70\042\uff70\045\uff70\046" +
    "\364\056\362\057\354\060\uff70\061\uff70\062\uff70\063\uff70" +
    "\064\355\065\uff70\066\uff70\070\uff70\071\uff70\072\uff70\073" +
    "\uff70\074\365\075\356\100\uff70\101\uff70\102\uff70\103\uff70" +
    "\104\353\105\360\106\357\107\352\110\363\111\361\112" +
    "\uff70\113\uff70\115\uff70\123\uff70\124\uff70\125\uff70\127\uff70" +
    "\130\uff70\132\uff70\134\uff70\135\uff70\136\uff70\137\uff70\140" +
    "\uff70\141\uff70\142\uff70\143\uff70\144\uff70\145\uff70\001\002" +
    "\000\016\042\100\050\102\116\101\127\014\141\013\144" +
    "\010\001\002\000\046\033\174\036\143\042\151\060\121" +
    "\061\163\065\124\066\161\073\123\102\157\127\203\132" +
    "\125\136\134\140\167\141\142\142\132\143\117\144\010" +
    "\145\150\001\002\000\016\034\uff99\041\uff99\066\uff99\123" +
    "\uff99\124\uff99\125\uff99\001\002\000\236\004\uff27\005\uff27" +
    "\006\uff27\007\uff27\010\uff27\011\uff27\012\uff27\013\uff27\014" +
    "\uff27\015\uff27\016\uff27\017\uff27\020\uff27\021\uff27\022\uff27" +
    "\023\uff27\025\uff27\026\uff27\027\uff27\030\uff27\033\uff27\034" +
    "\uff27\036\uff27\041\uff27\042\uff27\043\uff27\044\uff27\045\uff27" +
    "\046\uff27\056\uff27\057\uff27\060\uff27\061\uff27\062\uff27\063" +
    "\uff27\064\uff27\065\uff27\066\uff27\067\uff27\070\uff27\071\uff27" +
    "\072\uff27\073\uff27\074\uff27\075\uff27\076\uff27\100\uff27\101" +
    "\uff27\102\uff27\103\uff27\104\uff27\105\uff27\106\uff27\107\uff27" +
    "\110\uff27\111\uff27\112\uff27\113\uff27\115\uff27\117\uff27\120" +
    "\uff27\122\uff27\123\uff27\124\uff27\125\uff27\127\uff27\130\uff27" +
    "\132\uff27\134\uff27\135\uff27\136\uff27\137\uff27\140\uff27\141" +
    "\uff27\142\uff27\143\uff27\144\uff27\145\uff27\001\002\000\046" +
    "\033\174\036\143\042\151\060\121\061\163\065\124\066" +
    "\161\073\123\102\157\127\203\132\125\136\134\140\167" +
    "\141\142\142\132\143\117\144\010\145\150\001\002\000" +
    "\110\025\171\026\146\033\174\036\143\042\327\050\102" +
    "\060\121\061\163\065\124\066\161\070\164\071\145\072" +
    "\170\073\123\100\154\101\160\102\157\103\136\112\140" +
    "\113\155\116\101\123\331\127\113\130\176\132\125\134" +
    "\162\135\115\136\134\137\147\140\167\141\142\142\132" +
    "\143\117\144\010\145\150\001\002\000\016\042\100\050" +
    "\102\116\101\127\014\141\013\144\010\001\002\000\236" +
    "\004\uff2b\005\uff2b\006\uff2b\007\uff2b\010\uff2b\011\uff2b\012" +
    "\uff2b\013\uff2b\014\uff2b\015\uff2b\016\uff2b\017\uff2b\020\uff2b" +
    "\021\uff2b\022\uff2b\023\uff2b\025\uff2b\026\uff2b\027\uff2b\030" +
    "\uff2b\033\uff2b\034\uff2b\036\uff2b\041\uff2b\042\uff2b\043\uff2b" +
    "\044\uff2b\045\uff2b\046\uff2b\056\uff2b\057\uff2b\060\uff2b\061" +
    "\uff2b\062\uff2b\063\uff2b\064\uff2b\065\uff2b\066\uff2b\067\uff2b" +
    "\070\uff2b\071\uff2b\072\uff2b\073\uff2b\074\uff2b\075\uff2b\076" +
    "\uff2b\100\uff2b\101\uff2b\102\uff2b\103\uff2b\104\uff2b\105\uff2b" +
    "\106\uff2b\107\uff2b\110\uff2b\111\uff2b\112\uff2b\113\uff2b\115" +
    "\uff2b\117\uff2b\120\uff2b\122\uff2b\123\uff2b\124\uff2b\125\uff2b" +
    "\127\uff2b\130\uff2b\132\uff2b\134\uff2b\135\uff2b\136\uff2b\137" +
    "\uff2b\140\uff2b\141\uff2b\142\uff2b\143\uff2b\144\uff2b\145\uff2b" +
    "\001\002\000\010\127\014\141\013\144\010\001\002\000" +
    "\236\004\uff30\005\uff30\006\uff30\007\uff30\010\uff30\011\uff30" +
    "\012\uff30\013\uff30\014\uff30\015\uff30\016\uff30\017\uff30\020" +
    "\uff30\021\uff30\022\uff30\023\uff30\025\uff30\026\uff30\027\uff30" +
    "\030\uff30\033\uff30\034\uff30\036\uff30\041\uff30\042\uff30\043" +
    "\uff30\044\uff30\045\uff30\046\uff30\056\uff30\057\uff30\060\uff30" +
    "\061\uff30\062\uff30\063\uff30\064\uff30\065\uff30\066\uff30\067" +
    "\uff30\070\uff30\071\uff30\072\uff30\073\uff30\074\uff30\075\uff30" +
    "\076\uff30\100\uff30\101\uff30\102\uff30\103\uff30\104\uff30\105" +
    "\uff30\106\uff30\107\uff30\110\uff30\111\uff30\112\uff30\113\uff30" +
    "\115\uff30\117\uff30\120\uff30\122\uff30\123\uff30\124\uff30\125" +
    "\uff30\127\uff30\130\uff30\132\uff30\134\uff30\135\uff30\136\uff30" +
    "\137\uff30\140\uff30\141\uff30\142\uff30\143\uff30\144\uff30\145" +
    "\uff30\001\002\000\126\025\uff72\026\uff72\030\uff72\033\uff72" +
    "\034\uff72\036\uff72\041\uff72\042\uff72\045\uff72\060\uff72\061" +
    "\uff72\062\uff72\063\uff72\065\uff72\066\uff72\070\uff72\071\uff72" +
    "\072\uff72\073\uff72\100\uff72\101\uff72\102\uff72\103\uff72\112" +
    "\uff72\113\uff72\115\uff72\123\uff72\124\uff72\125\uff72\127\uff72" +
    "\130\uff72\132\uff72\134\uff72\135\uff72\136\uff72\137\uff72\140" +
    "\uff72\141\uff72\142\uff72\143\uff72\144\uff72\145\uff72\001\002" +
    "\000\050\033\174\036\143\042\151\060\121\061\163\065" +
    "\124\066\161\067\223\073\123\102\157\127\203\132\125" +
    "\136\134\140\167\141\142\142\132\143\117\144\010\145" +
    "\150\001\002\000\046\033\174\036\143\042\151\060\121" +
    "\061\163\065\124\066\161\073\123\102\157\127\203\132" +
    "\125\136\134\140\167\141\142\142\132\143\117\144\010" +
    "\145\150\001\002\000\046\033\174\036\143\042\151\060" +
    "\121\061\163\065\124\066\161\073\123\102\157\127\203" +
    "\132\125\136\134\140\167\141\142\142\132\143\117\144" +
    "\010\145\150\001\002\000\236\004\uff3c\005\uff3c\006\uff3c" +
    "\007\uff3c\010\uff3c\011\uff3c\012\uff3c\013\uff3c\014\uff3c\015" +
    "\uff3c\016\uff3c\017\uff3c\020\uff3c\021\uff3c\022\uff3c\023\uff3c" +
    "\025\uff3c\026\uff3c\027\uff3c\030\uff3c\033\uff3c\034\uff3c\036" +
    "\uff3c\041\uff3c\042\uff3c\043\uff3c\044\206\045\uff3c\046\uff3c" +
    "\056\uff3c\057\uff3c\060\uff3c\061\uff3c\062\uff3c\063\uff3c\064" +
    "\uff3c\065\uff3c\066\uff3c\067\205\070\uff3c\071\uff3c\072\uff3c" +
    "\073\uff3c\074\uff3c\075\uff3c\076\uff3c\100\uff3c\101\uff3c\102" +
    "\uff3c\103\uff3c\104\uff3c\105\uff3c\106\uff3c\107\uff3c\110\uff3c" +
    "\111\uff3c\112\uff3c\113\uff3c\115\uff3c\117\uff3c\120\uff3c\122" +
    "\uff3c\123\uff3c\124\uff3c\125\uff3c\127\uff3c\130\uff3c\132\uff3c" +
    "\134\uff3c\135\uff3c\136\uff3c\137\uff3c\140\uff3c\141\uff3c\142" +
    "\uff3c\143\uff3c\144\uff3c\145\uff3c\001\002\000\166\025\uff53" +
    "\026\uff53\027\301\030\uff53\033\uff53\034\uff53\036\uff53\041" +
    "\uff53\042\uff53\045\uff53\046\uff53\056\uff53\057\uff53\060\uff53" +
    "\061\uff53\062\uff53\063\uff53\064\uff53\065\uff53\066\uff53\070" +
    "\uff53\071\uff53\072\uff53\073\uff53\074\uff53\075\uff53\076\uff53" +
    "\100\uff53\101\uff53\102\uff53\103\uff53\104\uff53\105\uff53\106" +
    "\uff53\107\uff53\110\uff53\111\uff53\112\uff53\113\uff53\115\uff53" +
    "\117\uff53\120\uff53\123\uff53\124\uff53\125\uff53\127\uff53\130" +
    "\uff53\132\uff53\134\uff53\135\uff53\136\uff53\137\uff53\140\uff53" +
    "\141\uff53\142\uff53\143\uff53\144\uff53\145\uff53\001\002\000" +
    "\010\127\014\141\013\144\010\001\002\000\230\004\244" +
    "\005\252\006\241\007\240\010\251\011\243\012\247\013" +
    "\256\014\255\015\236\016\253\017\245\020\250\021\242" +
    "\022\246\023\254\025\uff4f\026\uff4f\027\uff4f\030\uff4f\033" +
    "\uff4f\034\uff4f\036\uff4f\041\uff4f\042\uff4f\043\237\045\uff4f" +
    "\046\uff4f\056\uff4f\057\uff4f\060\uff4f\061\uff4f\062\uff4f\063" +
    "\uff4f\064\uff4f\065\uff4f\066\uff4f\070\uff4f\071\uff4f\072\uff4f" +
    "\073\uff4f\074\uff4f\075\uff4f\076\uff4f\100\uff4f\101\uff4f\102" +
    "\uff4f\103\uff4f\104\uff4f\105\uff4f\106\uff4f\107\uff4f\110\uff4f" +
    "\111\uff4f\112\uff4f\113\uff4f\115\uff4f\117\uff4f\120\uff4f\123" +
    "\uff4f\124\uff4f\125\uff4f\127\uff4f\130\uff4f\132\uff4f\134\uff4f" +
    "\135\uff4f\136\uff4f\137\uff4f\140\uff4f\141\uff4f\142\uff4f\143" +
    "\uff4f\144\uff4f\145\uff4f\001\002\000\046\033\174\036\143" +
    "\042\151\060\121\061\163\065\124\066\161\073\123\102" +
    "\157\127\203\132\125\136\134\140\167\141\142\142\132" +
    "\143\117\144\010\145\150\001\002\000\232\004\uff3e\005" +
    "\uff3e\006\uff3e\007\uff3e\010\uff3e\011\uff3e\012\uff3e\013\uff3e" +
    "\014\uff3e\015\uff3e\016\uff3e\017\uff3e\020\uff3e\021\uff3e\022" +
    "\uff3e\023\uff3e\025\uff3e\026\uff3e\027\uff3e\030\uff3e\033\uff3e" +
    "\034\uff3e\036\uff3e\041\uff3e\042\uff3e\043\uff3e\045\uff3e\046" +
    "\uff3e\056\uff3e\057\uff3e\060\uff3e\061\uff3e\062\uff3e\063\uff3e" +
    "\064\uff3e\065\uff3e\066\uff3e\070\uff3e\071\uff3e\072\uff3e\073" +
    "\uff3e\074\uff3e\075\uff3e\076\uff3e\100\uff3e\101\uff3e\102\uff3e" +
    "\103\uff3e\104\uff3e\105\uff3e\106\uff3e\107\uff3e\110\uff3e\111" +
    "\uff3e\112\uff3e\113\uff3e\115\uff3e\117\uff3e\120\uff3e\122\200" +
    "\123\uff3e\124\uff3e\125\uff3e\127\uff3e\130\uff3e\132\uff3e\134" +
    "\uff3e\135\uff3e\136\uff3e\137\uff3e\140\uff3e\141\uff3e\142\uff3e" +
    "\143\uff3e\144\uff3e\145\uff3e\001\002\000\044\033\174\036" +
    "\143\042\151\061\163\065\201\066\161\073\123\102\157" +
    "\127\203\132\125\136\134\140\202\141\142\142\132\143" +
    "\117\144\010\145\150\001\002\000\004\067\226\001\002" +
    "\000\004\067\223\001\002\000\004\133\221\001\002\000" +
    "\236\004\uff3b\005\uff3b\006\uff3b\007\uff3b\010\uff3b\011\uff3b" +
    "\012\uff3b\013\uff3b\014\uff3b\015\uff3b\016\uff3b\017\uff3b\020" +
    "\uff3b\021\uff3b\022\uff3b\023\uff3b\025\uff3b\026\uff3b\027\uff3b" +
    "\030\uff3b\033\uff3b\034\uff3b\036\uff3b\041\uff3b\042\uff3b\043" +
    "\uff3b\044\206\045\uff3b\046\uff3b\056\uff3b\057\uff3b\060\uff3b" +
    "\061\uff3b\062\uff3b\063\uff3b\064\uff3b\065\uff3b\066\uff3b\067" +
    "\205\070\uff3b\071\uff3b\072\uff3b\073\uff3b\074\uff3b\075\uff3b" +
    "\076\uff3b\100\uff3b\101\uff3b\102\uff3b\103\uff3b\104\uff3b\105" +
    "\uff3b\106\uff3b\107\uff3b\110\uff3b\111\uff3b\112\uff3b\113\uff3b" +
    "\115\uff3b\117\uff3b\120\uff3b\122\uff3b\123\uff3b\124\uff3b\125" +
    "\uff3b\127\uff3b\130\uff3b\132\uff3b\134\uff3b\135\uff3b\136\uff3b" +
    "\137\uff3b\140\uff3b\141\uff3b\142\uff3b\143\uff3b\144\uff3b\145" +
    "\uff3b\001\002\000\104\025\171\026\146\033\174\036\143" +
    "\042\151\060\121\061\163\065\124\066\161\070\164\071" +
    "\145\072\170\073\123\100\154\101\160\102\157\103\136" +
    "\112\140\113\155\124\uff88\127\113\130\176\132\125\134" +
    "\162\135\115\136\134\137\147\140\167\141\142\142\132" +
    "\143\117\144\010\145\150\001\002\000\044\033\174\036" +
    "\143\042\210\061\163\065\207\066\161\073\123\102\157" +
    "\127\203\132\125\136\134\140\211\141\142\142\132\143" +
    "\117\144\010\145\150\001\002\000\236\004\uff32\005\uff32" +
    "\006\uff32\007\uff32\010\uff32\011\uff32\012\uff32\013\uff32\014" +
    "\uff32\015\uff32\016\uff32\017\uff32\020\uff32\021\uff32\022\uff32" +
    "\023\uff32\025\uff32\026\uff32\027\uff32\030\uff32\033\uff32\034" +
    "\uff32\036\uff32\041\uff32\042\uff32\043\uff32\044\uff32\045\uff32" +
    "\046\uff32\056\uff32\057\uff32\060\uff32\061\uff32\062\uff32\063" +
    "\uff32\064\uff32\065\uff32\066\uff32\067\uff32\070\uff32\071\uff32" +
    "\072\uff32\073\uff32\074\uff32\075\uff32\076\uff32\100\uff32\101" +
    "\uff32\102\uff32\103\uff32\104\uff32\105\uff32\106\uff32\107\uff32" +
    "\110\uff32\111\uff32\112\uff32\113\uff32\115\uff32\117\uff32\120" +
    "\uff32\122\uff32\123\uff32\124\uff32\125\uff32\127\uff32\130\uff32" +
    "\132\uff32\134\uff32\135\uff32\136\uff32\137\uff32\140\uff32\141" +
    "\uff32\142\uff32\143\uff32\144\uff32\145\uff32\001\002\000\236" +
    "\004\uff33\005\uff33\006\uff33\007\uff33\010\uff33\011\uff33\012" +
    "\uff33\013\uff33\014\uff33\015\uff33\016\uff33\017\uff33\020\uff33" +
    "\021\uff33\022\uff33\023\uff33\025\uff33\026\uff33\027\uff33\030" +
    "\uff33\033\uff33\034\uff33\036\uff33\041\uff33\042\uff33\043\uff33" +
    "\044\uff33\045\uff33\046\uff33\056\uff33\057\uff33\060\uff33\061" +
    "\uff33\062\uff33\063\uff33\064\uff33\065\uff33\066\uff33\067\uff33" +
    "\070\uff33\071\uff33\072\uff33\073\uff33\074\uff33\075\uff33\076" +
    "\uff33\100\uff33\101\uff33\102\uff33\103\uff33\104\uff33\105\uff33" +
    "\106\uff33\107\uff33\110\uff33\111\uff33\112\uff33\113\uff33\115" +
    "\uff33\117\uff33\120\uff33\122\uff33\123\uff33\124\uff33\125\uff33" +
    "\127\uff33\130\uff33\132\uff33\134\uff33\135\uff33\136\uff33\137" +
    "\uff33\140\uff33\141\uff33\142\uff33\143\uff33\144\uff33\145\uff33" +
    "\001\002\000\236\004\uff31\005\uff31\006\uff31\007\uff31\010" +
    "\uff31\011\uff31\012\uff31\013\uff31\014\uff31\015\uff31\016\uff31" +
    "\017\uff31\020\uff31\021\uff31\022\uff31\023\uff31\025\uff31\026" +
    "\uff31\027\uff31\030\uff31\033\uff31\034\uff31\036\uff31\041\uff31" +
    "\042\uff31\043\uff31\044\uff31\045\uff31\046\uff31\056\uff31\057" +
    "\uff31\060\uff31\061\uff31\062\uff31\063\uff31\064\uff31\065\uff31" +
    "\066\uff31\067\uff31\070\uff31\071\uff31\072\uff31\073\uff31\074" +
    "\uff31\075\uff31\076\uff31\100\uff31\101\uff31\102\uff31\103\uff31" +
    "\104\uff31\105\uff31\106\uff31\107\uff31\110\uff31\111\uff31\112" +
    "\uff31\113\uff31\115\uff31\117\uff31\120\uff31\122\uff31\123\uff31" +
    "\124\uff31\125\uff31\127\uff31\130\uff31\132\uff31\134\uff31\135" +
    "\uff31\136\uff31\137\uff31\140\uff31\141\uff31\142\uff31\143\uff31" +
    "\144\uff31\145\uff31\001\002\000\236\004\uff34\005\uff34\006" +
    "\uff34\007\uff34\010\uff34\011\uff34\012\uff34\013\uff34\014\uff34" +
    "\015\uff34\016\uff34\017\uff34\020\uff34\021\uff34\022\uff34\023" +
    "\uff34\025\uff34\026\uff34\027\uff34\030\uff34\033\uff34\034\uff34" +
    "\036\uff34\041\uff34\042\uff34\043\uff34\044\uff34\045\uff34\046" +
    "\uff34\056\uff34\057\uff34\060\uff34\061\uff34\062\uff34\063\uff34" +
    "\064\uff34\065\uff34\066\uff34\067\uff34\070\uff34\071\uff34\072" +
    "\uff34\073\uff34\074\uff34\075\uff34\076\uff34\100\uff34\101\uff34" +
    "\102\uff34\103\uff34\104\uff34\105\uff34\106\uff34\107\uff34\110" +
    "\uff34\111\uff34\112\uff34\113\uff34\115\uff34\117\uff34\120\uff34" +
    "\122\uff34\123\uff34\124\uff34\125\uff34\127\uff34\130\uff34\132" +
    "\uff34\134\uff34\135\uff34\136\uff34\137\uff34\140\uff34\141\uff34" +
    "\142\uff34\143\uff34\144\uff34\145\uff34\001\002\000\006\041" +
    "\217\124\uff87\001\002\000\006\041\uff86\124\uff86\001\002" +
    "\000\004\124\216\001\002\000\236\004\uff39\005\uff39\006" +
    "\uff39\007\uff39\010\uff39\011\uff39\012\uff39\013\uff39\014\uff39" +
    "\015\uff39\016\uff39\017\uff39\020\uff39\021\uff39\022\uff39\023" +
    "\uff39\025\uff39\026\uff39\027\uff39\030\uff39\033\uff39\034\uff39" +
    "\036\uff39\041\uff39\042\uff39\043\uff39\044\uff39\045\uff39\046" +
    "\uff39\056\uff39\057\uff39\060\uff39\061\uff39\062\uff39\063\uff39" +
    "\064\uff39\065\uff39\066\uff39\067\uff39\070\uff39\071\uff39\072" +
    "\uff39\073\uff39\074\uff39\075\uff39\076\uff39\100\uff39\101\uff39" +
    "\102\uff39\103\uff39\104\uff39\105\uff39\106\uff39\107\uff39\110" +
    "\uff39\111\uff39\112\uff39\113\uff39\115\uff39\117\uff39\120\uff39" +
    "\122\uff39\123\uff39\124\uff39\125\uff39\127\uff39\130\uff39\132" +
    "\uff39\134\uff39\135\uff39\136\uff39\137\uff39\140\uff39\141\uff39" +
    "\142\uff39\143\uff39\144\uff39\145\uff39\001\002\000\102\025" +
    "\171\026\146\033\174\036\143\042\151\060\121\061\163" +
    "\065\124\066\161\070\164\071\145\072\170\073\123\100" +
    "\154\101\160\102\157\103\136\112\140\113\155\127\113" +
    "\130\176\132\125\134\162\135\115\136\134\137\147\140" +
    "\167\141\142\142\132\143\117\144\010\145\150\001\002" +
    "\000\006\041\uff85\124\uff85\001\002\000\006\132\222\144" +
    "\010\001\002\000\236\004\uff28\005\uff28\006\uff28\007\uff28" +
    "\010\uff28\011\uff28\012\uff28\013\uff28\014\uff28\015\uff28\016" +
    "\uff28\017\uff28\020\uff28\021\uff28\022\uff28\023\uff28\025\uff28" +
    "\026\uff28\027\uff28\030\uff28\033\uff28\034\uff28\036\uff28\041" +
    "\uff28\042\uff28\043\uff28\044\uff28\045\uff28\046\uff28\056\uff28" +
    "\057\uff28\060\uff28\061\uff28\062\uff28\063\uff28\064\uff28\065" +
    "\uff28\066\uff28\067\uff28\070\uff28\071\uff28\072\uff28\073\uff28" +
    "\074\uff28\075\uff28\076\uff28\100\uff28\101\uff28\102\uff28\103" +
    "\uff28\104\uff28\105\uff28\106\uff28\107\uff28\110\uff28\111\uff28" +
    "\112\uff28\113\uff28\115\uff28\117\uff28\120\uff28\122\uff28\123" +
    "\uff28\124\uff28\125\uff28\127\uff28\130\uff28\132\uff28\134\uff28" +
    "\135\uff28\136\uff28\137\uff28\140\uff28\141\uff28\142\uff28\143" +
    "\uff28\144\uff28\145\uff28\001\002\000\104\025\171\026\146" +
    "\033\174\036\143\042\151\060\121\061\163\065\124\066" +
    "\161\070\164\071\145\072\170\073\123\100\154\101\160" +
    "\102\157\103\136\112\140\113\155\124\uff88\127\113\130" +
    "\176\132\125\134\162\135\115\136\134\137\147\140\167" +
    "\141\142\142\132\143\117\144\010\145\150\001\002\000" +
    "\004\124\225\001\002\000\236\004\uff36\005\uff36\006\uff36" +
    "\007\uff36\010\uff36\011\uff36\012\uff36\013\uff36\014\uff36\015" +
    "\uff36\016\uff36\017\uff36\020\uff36\021\uff36\022\uff36\023\uff36" +
    "\025\uff36\026\uff36\027\uff36\030\uff36\033\uff36\034\uff36\036" +
    "\uff36\041\uff36\042\uff36\043\uff36\044\uff36\045\uff36\046\uff36" +
    "\056\uff36\057\uff36\060\uff36\061\uff36\062\uff36\063\uff36\064" +
    "\uff36\065\uff36\066\uff36\067\uff36\070\uff36\071\uff36\072\uff36" +
    "\073\uff36\074\uff36\075\uff36\076\uff36\100\uff36\101\uff36\102" +
    "\uff36\103\uff36\104\uff36\105\uff36\106\uff36\107\uff36\110\uff36" +
    "\111\uff36\112\uff36\113\uff36\115\uff36\117\uff36\120\uff36\122" +
    "\uff36\123\uff36\124\uff36\125\uff36\127\uff36\130\uff36\132\uff36" +
    "\134\uff36\135\uff36\136\uff36\137\uff36\140\uff36\141\uff36\142" +
    "\uff36\143\uff36\144\uff36\145\uff36\001\002\000\104\025\171" +
    "\026\146\033\174\036\143\042\151\060\121\061\163\065" +
    "\124\066\161\070\164\071\145\072\170\073\123\100\154" +
    "\101\160\102\157\103\136\112\140\113\155\124\uff88\127" +
    "\113\130\176\132\125\134\162\135\115\136\134\137\147" +
    "\140\167\141\142\142\132\143\117\144\010\145\150\001" +
    "\002\000\004\124\230\001\002\000\236\004\uff37\005\uff37" +
    "\006\uff37\007\uff37\010\uff37\011\uff37\012\uff37\013\uff37\014" +
    "\uff37\015\uff37\016\uff37\017\uff37\020\uff37\021\uff37\022\uff37" +
    "\023\uff37\025\uff37\026\uff37\027\uff37\030\uff37\033\uff37\034" +
    "\uff37\036\uff37\041\uff37\042\uff37\043\uff37\044\uff37\045\uff37" +
    "\046\uff37\056\uff37\057\uff37\060\uff37\061\uff37\062\uff37\063" +
    "\uff37\064\uff37\065\uff37\066\uff37\067\uff37\070\uff37\071\uff37" +
    "\072\uff37\073\uff37\074\uff37\075\uff37\076\uff37\100\uff37\101" +
    "\uff37\102\uff37\103\uff37\104\uff37\105\uff37\106\uff37\107\uff37" +
    "\110\uff37\111\uff37\112\uff37\113\uff37\115\uff37\117\uff37\120" +
    "\uff37\122\uff37\123\uff37\124\uff37\125\uff37\127\uff37\130\uff37" +
    "\132\uff37\134\uff37\135\uff37\136\uff37\137\uff37\140\uff37\141" +
    "\uff37\142\uff37\143\uff37\144\uff37\145\uff37\001\002\000\162" +
    "\025\uff5d\026\uff5d\030\uff5d\033\uff5d\034\uff5d\036\uff5d\041" +
    "\uff5d\042\uff5d\045\uff5d\046\uff5d\056\uff5d\057\uff5d\060\uff5d" +
    "\061\uff5d\062\uff5d\063\uff5d\064\uff5d\065\uff5d\066\uff5d\070" +
    "\uff5d\071\uff5d\072\uff5d\073\uff5d\074\uff5d\075\uff5d\076\233" +
    "\100\uff5d\101\uff5d\102\uff5d\103\uff5d\104\uff5d\105\uff5d\106" +
    "\uff5d\107\uff5d\110\uff5d\111\uff5d\112\uff5d\113\uff5d\115\uff5d" +
    "\117\232\123\uff5d\124\uff5d\125\uff5d\127\uff5d\130\uff5d\132" +
    "\uff5d\134\uff5d\135\uff5d\136\uff5d\137\uff5d\140\uff5d\141\uff5d" +
    "\142\uff5d\143\uff5d\144\uff5d\145\uff5d\001\002\000\046\033" +
    "\174\036\143\042\151\060\121\061\163\065\124\066\161" +
    "\073\123\102\157\127\203\132\125\136\134\140\167\141" +
    "\142\142\132\143\117\144\010\145\150\001\002\000\046" +
    "\033\174\036\143\042\151\060\121\061\163\065\124\066" +
    "\161\073\123\102\157\127\203\132\125\136\134\140\167" +
    "\141\142\142\132\143\117\144\010\145\150\001\002\000" +
    "\162\025\uff58\026\uff58\030\uff58\033\uff58\034\uff58\036\uff58" +
    "\041\uff58\042\uff58\045\uff58\046\uff58\056\uff58\057\uff58\060" +
    "\uff58\061\uff58\062\uff58\063\uff58\064\uff58\065\uff58\066\uff58" +
    "\070\uff58\071\uff58\072\uff58\073\uff58\074\uff58\075\uff58\076" +
    "\uff58\100\uff58\101\uff58\102\uff58\103\uff58\104\uff58\105\uff58" +
    "\106\uff58\107\uff58\110\uff58\111\uff58\112\uff58\113\uff58\115" +
    "\uff58\117\uff58\123\uff58\124\uff58\125\uff58\127\uff58\130\uff58" +
    "\132\uff58\134\uff58\135\uff58\136\uff58\137\uff58\140\uff58\141" +
    "\uff58\142\uff58\143\uff58\144\uff58\145\uff58\001\002\000\162" +
    "\025\uff59\026\uff59\030\uff59\033\uff59\034\uff59\036\uff59\041" +
    "\uff59\042\uff59\045\uff59\046\uff59\056\uff59\057\uff59\060\uff59" +
    "\061\uff59\062\uff59\063\uff59\064\uff59\065\uff59\066\uff59\070" +
    "\uff59\071\uff59\072\uff59\073\uff59\074\uff59\075\uff59\076\uff59" +
    "\100\uff59\101\uff59\102\uff59\103\uff59\104\uff59\105\uff59\106" +
    "\uff59\107\uff59\110\uff59\111\uff59\112\uff59\113\uff59\115\uff59" +
    "\117\uff59\123\uff59\124\uff59\125\uff59\127\uff59\130\uff59\132" +
    "\uff59\134\uff59\135\uff59\136\uff59\137\uff59\140\uff59\141\uff59" +
    "\142\uff59\143\uff59\144\uff59\145\uff59\001\002\000\044\033" +
    "\174\036\143\042\151\061\163\065\201\066\161\073\123" +
    "\102\157\127\203\132\125\136\134\140\202\141\142\142" +
    "\132\143\117\144\010\145\150\001\002\000\044\033\174" +
    "\036\143\042\151\061\163\065\201\066\161\073\123\102" +
    "\157\127\203\132\125\136\134\140\202\141\142\142\132" +
    "\143\117\144\010\145\150\001\002\000\044\033\174\036" +
    "\143\042\151\061\163\065\201\066\161\073\123\102\157" +
    "\127\203\132\125\136\134\140\202\141\142\142\132\143" +
    "\117\144\010\145\150\001\002\000\044\033\174\036\143" +
    "\042\151\061\163\065\201\066\161\073\123\102\157\127" +
    "\203\132\125\136\134\140\202\141\142\142\132\143\117" +
    "\144\010\145\150\001\002\000\044\033\174\036\143\042" +
    "\151\061\163\065\201\066\161\073\123\102\157\127\203" +
    "\132\125\136\134\140\202\141\142\142\132\143\117\144" +
    "\010\145\150\001\002\000\044\033\174\036\143\042\151" +
    "\061\163\065\201\066\161\073\123\102\157\127\203\132" +
    "\125\136\134\140\202\141\142\142\132\143\117\144\010" +
    "\145\150\001\002\000\044\033\174\036\143\042\151\061" +
    "\163\065\201\066\161\073\123\102\157\127\203\132\125" +
    "\136\134\140\202\141\142\142\132\143\117\144\010\145" +
    "\150\001\002\000\044\033\174\036\143\042\151\061\163" +
    "\065\201\066\161\073\123\102\157\127\203\132\125\136" +
    "\134\140\202\141\142\142\132\143\117\144\010\145\150" +
    "\001\002\000\044\033\174\036\143\042\151\061\163\065" +
    "\201\066\161\073\123\102\157\127\203\132\125\136\134" +
    "\140\202\141\142\142\132\143\117\144\010\145\150\001" +
    "\002\000\044\033\174\036\143\042\151\061\163\065\201" +
    "\066\161\073\123\102\157\127\203\132\125\136\134\140" +
    "\202\141\142\142\132\143\117\144\010\145\150\001\002" +
    "\000\044\033\174\036\143\042\151\061\163\065\201\066" +
    "\161\073\123\102\157\127\203\132\125\136\134\140\202" +
    "\141\142\142\132\143\117\144\010\145\150\001\002\000" +
    "\044\033\174\036\143\042\151\061\163\065\201\066\161" +
    "\073\123\102\157\127\203\132\125\136\134\140\202\141" +
    "\142\142\132\143\117\144\010\145\150\001\002\000\044" +
    "\033\174\036\143\042\151\061\163\065\201\066\161\073" +
    "\123\102\157\127\203\132\125\136\134\140\202\141\142" +
    "\142\132\143\117\144\010\145\150\001\002\000\044\033" +
    "\174\036\143\042\151\061\163\065\201\066\161\073\123" +
    "\102\157\127\203\132\125\136\134\140\202\141\142\142" +
    "\132\143\117\144\010\145\150\001\002\000\044\033\174" +
    "\036\143\042\151\061\163\065\201\066\161\073\123\102" +
    "\157\127\203\132\125\136\134\140\202\141\142\142\132" +
    "\143\117\144\010\145\150\001\002\000\044\033\174\036" +
    "\143\042\151\061\163\065\201\066\161\073\123\102\157" +
    "\127\203\132\125\136\134\140\202\141\142\142\132\143" +
    "\117\144\010\145\150\001\002\000\044\033\174\036\143" +
    "\042\151\061\163\065\201\066\161\073\123\102\157\127" +
    "\203\132\125\136\134\140\202\141\142\142\132\143\117" +
    "\144\010\145\150\001\002\000\166\025\uff47\026\uff47\027" +
    "\uff47\030\uff47\033\uff47\034\uff47\036\uff47\041\uff47\042\uff47" +
    "\045\uff47\046\uff47\056\uff47\057\uff47\060\uff47\061\uff47\062" +
    "\uff47\063\uff47\064\uff47\065\uff47\066\uff47\070\uff47\071\uff47" +
    "\072\uff47\073\uff47\074\uff47\075\uff47\076\uff47\100\uff47\101" +
    "\uff47\102\uff47\103\uff47\104\uff47\105\uff47\106\uff47\107\uff47" +
    "\110\uff47\111\uff47\112\uff47\113\uff47\115\uff47\117\uff47\120" +
    "\uff47\123\uff47\124\uff47\125\uff47\127\uff47\130\uff47\132\uff47" +
    "\134\uff47\135\uff47\136\uff47\137\uff47\140\uff47\141\uff47\142" +
    "\uff47\143\uff47\144\uff47\145\uff47\001\002\000\166\025\uff46" +
    "\026\uff46\027\uff46\030\uff46\033\uff46\034\uff46\036\uff46\041" +
    "\uff46\042\uff46\045\uff46\046\uff46\056\uff46\057\uff46\060\uff46" +
    "\061\uff46\062\uff46\063\uff46\064\uff46\065\uff46\066\uff46\070" +
    "\uff46\071\uff46\072\uff46\073\uff46\074\uff46\075\uff46\076\uff46" +
    "\100\uff46\101\uff46\102\uff46\103\uff46\104\uff46\105\uff46\106" +
    "\uff46\107\uff46\110\uff46\111\uff46\112\uff46\113\uff46\115\uff46" +
    "\117\uff46\120\uff46\123\uff46\124\uff46\125\uff46\127\uff46\130" +
    "\uff46\132\uff46\134\uff46\135\uff46\136\uff46\137\uff46\140\uff46" +
    "\141\uff46\142\uff46\143\uff46\144\uff46\145\uff46\001\002\000" +
    "\166\025\uff3f\026\uff3f\027\uff3f\030\uff3f\033\uff3f\034\uff3f" +
    "\036\uff3f\041\uff3f\042\uff3f\045\uff3f\046\uff3f\056\uff3f\057" +
    "\uff3f\060\uff3f\061\uff3f\062\uff3f\063\uff3f\064\uff3f\065\uff3f" +
    "\066\uff3f\070\uff3f\071\uff3f\072\uff3f\073\uff3f\074\uff3f\075" +
    "\uff3f\076\uff3f\100\uff3f\101\uff3f\102\uff3f\103\uff3f\104\uff3f" +
    "\105\uff3f\106\uff3f\107\uff3f\110\uff3f\111\uff3f\112\uff3f\113" +
    "\uff3f\115\uff3f\117\uff3f\120\uff3f\123\uff3f\124\uff3f\125\uff3f" +
    "\127\uff3f\130\uff3f\132\uff3f\134\uff3f\135\uff3f\136\uff3f\137" +
    "\uff3f\140\uff3f\141\uff3f\142\uff3f\143\uff3f\144\uff3f\145\uff3f" +
    "\001\002\000\166\025\uff44\026\uff44\027\uff44\030\uff44\033" +
    "\uff44\034\uff44\036\uff44\041\uff44\042\uff44\045\uff44\046\uff44" +
    "\056\uff44\057\uff44\060\uff44\061\uff44\062\uff44\063\uff44\064" +
    "\uff44\065\uff44\066\uff44\070\uff44\071\uff44\072\uff44\073\uff44" +
    "\074\uff44\075\uff44\076\uff44\100\uff44\101\uff44\102\uff44\103" +
    "\uff44\104\uff44\105\uff44\106\uff44\107\uff44\110\uff44\111\uff44" +
    "\112\uff44\113\uff44\115\uff44\117\uff44\120\uff44\123\uff44\124" +
    "\uff44\125\uff44\127\uff44\130\uff44\132\uff44\134\uff44\135\uff44" +
    "\136\uff44\137\uff44\140\uff44\141\uff44\142\uff44\143\uff44\144" +
    "\uff44\145\uff44\001\002\000\166\025\uff4d\026\uff4d\027\uff4d" +
    "\030\uff4d\033\uff4d\034\uff4d\036\uff4d\041\uff4d\042\uff4d\045" +
    "\uff4d\046\uff4d\056\uff4d\057\uff4d\060\uff4d\061\uff4d\062\uff4d" +
    "\063\uff4d\064\uff4d\065\uff4d\066\uff4d\070\uff4d\071\uff4d\072" +
    "\uff4d\073\uff4d\074\uff4d\075\uff4d\076\uff4d\100\uff4d\101\uff4d" +
    "\102\uff4d\103\uff4d\104\uff4d\105\uff4d\106\uff4d\107\uff4d\110" +
    "\uff4d\111\uff4d\112\uff4d\113\uff4d\115\uff4d\117\uff4d\120\uff4d" +
    "\123\uff4d\124\uff4d\125\uff4d\127\uff4d\130\uff4d\132\uff4d\134" +
    "\uff4d\135\uff4d\136\uff4d\137\uff4d\140\uff4d\141\uff4d\142\uff4d" +
    "\143\uff4d\144\uff4d\145\uff4d\001\002\000\166\025\uff4a\026" +
    "\uff4a\027\uff4a\030\uff4a\033\uff4a\034\uff4a\036\uff4a\041\uff4a" +
    "\042\uff4a\045\uff4a\046\uff4a\056\uff4a\057\uff4a\060\uff4a\061" +
    "\uff4a\062\uff4a\063\uff4a\064\uff4a\065\uff4a\066\uff4a\070\uff4a" +
    "\071\uff4a\072\uff4a\073\uff4a\074\uff4a\075\uff4a\076\uff4a\100" +
    "\uff4a\101\uff4a\102\uff4a\103\uff4a\104\uff4a\105\uff4a\106\uff4a" +
    "\107\uff4a\110\uff4a\111\uff4a\112\uff4a\113\uff4a\115\uff4a\117" +
    "\uff4a\120\uff4a\123\uff4a\124\uff4a\125\uff4a\127\uff4a\130\uff4a" +
    "\132\uff4a\134\uff4a\135\uff4a\136\uff4a\137\uff4a\140\uff4a\141" +
    "\uff4a\142\uff4a\143\uff4a\144\uff4a\145\uff4a\001\002\000\166" +
    "\025\uff42\026\uff42\027\uff42\030\uff42\033\uff42\034\uff42\036" +
    "\uff42\041\uff42\042\uff42\045\uff42\046\uff42\056\uff42\057\uff42" +
    "\060\uff42\061\uff42\062\uff42\063\uff42\064\uff42\065\uff42\066" +
    "\uff42\070\uff42\071\uff42\072\uff42\073\uff42\074\uff42\075\uff42" +
    "\076\uff42\100\uff42\101\uff42\102\uff42\103\uff42\104\uff42\105" +
    "\uff42\106\uff42\107\uff42\110\uff42\111\uff42\112\uff42\113\uff42" +
    "\115\uff42\117\uff42\120\uff42\123\uff42\124\uff42\125\uff42\127" +
    "\uff42\130\uff42\132\uff42\134\uff42\135\uff42\136\uff42\137\uff42" +
    "\140\uff42\141\uff42\142\uff42\143\uff42\144\uff42\145\uff42\001" +
    "\002\000\166\025\uff48\026\uff48\027\uff48\030\uff48\033\uff48" +
    "\034\uff48\036\uff48\041\uff48\042\uff48\045\uff48\046\uff48\056" +
    "\uff48\057\uff48\060\uff48\061\uff48\062\uff48\063\uff48\064\uff48" +
    "\065\uff48\066\uff48\070\uff48\071\uff48\072\uff48\073\uff48\074" +
    "\uff48\075\uff48\076\uff48\100\uff48\101\uff48\102\uff48\103\uff48" +
    "\104\uff48\105\uff48\106\uff48\107\uff48\110\uff48\111\uff48\112" +
    "\uff48\113\uff48\115\uff48\117\uff48\120\uff48\123\uff48\124\uff48" +
    "\125\uff48\127\uff48\130\uff48\132\uff48\134\uff48\135\uff48\136" +
    "\uff48\137\uff48\140\uff48\141\uff48\142\uff48\143\uff48\144\uff48" +
    "\145\uff48\001\002\000\166\025\uff40\026\uff40\027\uff40\030" +
    "\uff40\033\uff40\034\uff40\036\uff40\041\uff40\042\uff40\045\uff40" +
    "\046\uff40\056\uff40\057\uff40\060\uff40\061\uff40\062\uff40\063" +
    "\uff40\064\uff40\065\uff40\066\uff40\070\uff40\071\uff40\072\uff40" +
    "\073\uff40\074\uff40\075\uff40\076\uff40\100\uff40\101\uff40\102" +
    "\uff40\103\uff40\104\uff40\105\uff40\106\uff40\107\uff40\110\uff40" +
    "\111\uff40\112\uff40\113\uff40\115\uff40\117\uff40\120\uff40\123" +
    "\uff40\124\uff40\125\uff40\127\uff40\130\uff40\132\uff40\134\uff40" +
    "\135\uff40\136\uff40\137\uff40\140\uff40\141\uff40\142\uff40\143" +
    "\uff40\144\uff40\145\uff40\001\002\000\166\025\uff43\026\uff43" +
    "\027\uff43\030\uff43\033\uff43\034\uff43\036\uff43\041\uff43\042" +
    "\uff43\045\uff43\046\uff43\056\uff43\057\uff43\060\uff43\061\uff43" +
    "\062\uff43\063\uff43\064\uff43\065\uff43\066\uff43\070\uff43\071" +
    "\uff43\072\uff43\073\uff43\074\uff43\075\uff43\076\uff43\100\uff43" +
    "\101\uff43\102\uff43\103\uff43\104\uff43\105\uff43\106\uff43\107" +
    "\uff43\110\uff43\111\uff43\112\uff43\113\uff43\115\uff43\117\uff43" +
    "\120\uff43\123\uff43\124\uff43\125\uff43\127\uff43\130\uff43\132" +
    "\uff43\134\uff43\135\uff43\136\uff43\137\uff43\140\uff43\141\uff43" +
    "\142\uff43\143\uff43\144\uff43\145\uff43\001\002\000\166\025" +
    "\uff4e\026\uff4e\027\uff4e\030\uff4e\033\uff4e\034\uff4e\036\uff4e" +
    "\041\uff4e\042\uff4e\045\uff4e\046\uff4e\056\uff4e\057\uff4e\060" +
    "\uff4e\061\uff4e\062\uff4e\063\uff4e\064\uff4e\065\uff4e\066\uff4e" +
    "\070\uff4e\071\uff4e\072\uff4e\073\uff4e\074\uff4e\075\uff4e\076" +
    "\uff4e\100\uff4e\101\uff4e\102\uff4e\103\uff4e\104\uff4e\105\uff4e" +
    "\106\uff4e\107\uff4e\110\uff4e\111\uff4e\112\uff4e\113\uff4e\115" +
    "\uff4e\117\uff4e\120\uff4e\123\uff4e\124\uff4e\125\uff4e\127\uff4e" +
    "\130\uff4e\132\uff4e\134\uff4e\135\uff4e\136\uff4e\137\uff4e\140" +
    "\uff4e\141\uff4e\142\uff4e\143\uff4e\144\uff4e\145\uff4e\001\002" +
    "\000\166\025\uff49\026\uff49\027\uff49\030\uff49\033\uff49\034" +
    "\uff49\036\uff49\041\uff49\042\uff49\045\uff49\046\uff49\056\uff49" +
    "\057\uff49\060\uff49\061\uff49\062\uff49\063\uff49\064\uff49\065" +
    "\uff49\066\uff49\070\uff49\071\uff49\072\uff49\073\uff49\074\uff49" +
    "\075\uff49\076\uff49\100\uff49\101\uff49\102\uff49\103\uff49\104" +
    "\uff49\105\uff49\106\uff49\107\uff49\110\uff49\111\uff49\112\uff49" +
    "\113\uff49\115\uff49\117\uff49\120\uff49\123\uff49\124\uff49\125" +
    "\uff49\127\uff49\130\uff49\132\uff49\134\uff49\135\uff49\136\uff49" +
    "\137\uff49\140\uff49\141\uff49\142\uff49\143\uff49\144\uff49\145" +
    "\uff49\001\002\000\166\025\uff41\026\uff41\027\uff41\030\uff41" +
    "\033\uff41\034\uff41\036\uff41\041\uff41\042\uff41\045\uff41\046" +
    "\uff41\056\uff41\057\uff41\060\uff41\061\uff41\062\uff41\063\uff41" +
    "\064\uff41\065\uff41\066\uff41\070\uff41\071\uff41\072\uff41\073" +
    "\uff41\074\uff41\075\uff41\076\uff41\100\uff41\101\uff41\102\uff41" +
    "\103\uff41\104\uff41\105\uff41\106\uff41\107\uff41\110\uff41\111" +
    "\uff41\112\uff41\113\uff41\115\uff41\117\uff41\120\uff41\123\uff41" +
    "\124\uff41\125\uff41\127\uff41\130\uff41\132\uff41\134\uff41\135" +
    "\uff41\136\uff41\137\uff41\140\uff41\141\uff41\142\uff41\143\uff41" +
    "\144\uff41\145\uff41\001\002\000\166\025\uff4c\026\uff4c\027" +
    "\uff4c\030\uff4c\033\uff4c\034\uff4c\036\uff4c\041\uff4c\042\uff4c" +
    "\045\uff4c\046\uff4c\056\uff4c\057\uff4c\060\uff4c\061\uff4c\062" +
    "\uff4c\063\uff4c\064\uff4c\065\uff4c\066\uff4c\070\uff4c\071\uff4c" +
    "\072\uff4c\073\uff4c\074\uff4c\075\uff4c\076\uff4c\100\uff4c\101" +
    "\uff4c\102\uff4c\103\uff4c\104\uff4c\105\uff4c\106\uff4c\107\uff4c" +
    "\110\uff4c\111\uff4c\112\uff4c\113\uff4c\115\uff4c\117\uff4c\120" +
    "\uff4c\123\uff4c\124\uff4c\125\uff4c\127\uff4c\130\uff4c\132\uff4c" +
    "\134\uff4c\135\uff4c\136\uff4c\137\uff4c\140\uff4c\141\uff4c\142" +
    "\uff4c\143\uff4c\144\uff4c\145\uff4c\001\002\000\166\025\uff4b" +
    "\026\uff4b\027\uff4b\030\uff4b\033\uff4b\034\uff4b\036\uff4b\041" +
    "\uff4b\042\uff4b\045\uff4b\046\uff4b\056\uff4b\057\uff4b\060\uff4b" +
    "\061\uff4b\062\uff4b\063\uff4b\064\uff4b\065\uff4b\066\uff4b\070" +
    "\uff4b\071\uff4b\072\uff4b\073\uff4b\074\uff4b\075\uff4b\076\uff4b" +
    "\100\uff4b\101\uff4b\102\uff4b\103\uff4b\104\uff4b\105\uff4b\106" +
    "\uff4b\107\uff4b\110\uff4b\111\uff4b\112\uff4b\113\uff4b\115\uff4b" +
    "\117\uff4b\120\uff4b\123\uff4b\124\uff4b\125\uff4b\127\uff4b\130" +
    "\uff4b\132\uff4b\134\uff4b\135\uff4b\136\uff4b\137\uff4b\140\uff4b" +
    "\141\uff4b\142\uff4b\143\uff4b\144\uff4b\145\uff4b\001\002\000" +
    "\232\004\uff3d\005\uff3d\006\uff3d\007\uff3d\010\uff3d\011\uff3d" +
    "\012\uff3d\013\uff3d\014\uff3d\015\uff3d\016\uff3d\017\uff3d\020" +
    "\uff3d\021\uff3d\022\uff3d\023\uff3d\025\uff3d\026\uff3d\027\uff3d" +
    "\030\uff3d\033\uff3d\034\uff3d\036\uff3d\041\uff3d\042\uff3d\043" +
    "\uff3d\045\uff3d\046\uff3d\056\uff3d\057\uff3d\060\uff3d\061\uff3d" +
    "\062\uff3d\063\uff3d\064\uff3d\065\uff3d\066\uff3d\070\uff3d\071" +
    "\uff3d\072\uff3d\073\uff3d\074\uff3d\075\uff3d\076\uff3d\100\uff3d" +
    "\101\uff3d\102\uff3d\103\uff3d\104\uff3d\105\uff3d\106\uff3d\107" +
    "\uff3d\110\uff3d\111\uff3d\112\uff3d\113\uff3d\115\uff3d\117\uff3d" +
    "\120\uff3d\122\200\123\uff3d\124\uff3d\125\uff3d\127\uff3d\130" +
    "\uff3d\132\uff3d\134\uff3d\135\uff3d\136\uff3d\137\uff3d\140\uff3d" +
    "\141\uff3d\142\uff3d\143\uff3d\144\uff3d\145\uff3d\001\002\000" +
    "\166\025\uff45\026\uff45\027\uff45\030\uff45\033\uff45\034\uff45" +
    "\036\uff45\041\uff45\042\uff45\045\uff45\046\uff45\056\uff45\057" +
    "\uff45\060\uff45\061\uff45\062\uff45\063\uff45\064\uff45\065\uff45" +
    "\066\uff45\070\uff45\071\uff45\072\uff45\073\uff45\074\uff45\075" +
    "\uff45\076\uff45\100\uff45\101\uff45\102\uff45\103\uff45\104\uff45" +
    "\105\uff45\106\uff45\107\uff45\110\uff45\111\uff45\112\uff45\113" +
    "\uff45\115\uff45\117\uff45\120\uff45\123\uff45\124\uff45\125\uff45" +
    "\127\uff45\130\uff45\132\uff45\134\uff45\135\uff45\136\uff45\137" +
    "\uff45\140\uff45\141\uff45\142\uff45\143\uff45\144\uff45\145\uff45" +
    "\001\002\000\236\004\uff24\005\uff24\006\uff24\007\uff24\010" +
    "\uff24\011\uff24\012\uff24\013\uff24\014\uff24\015\uff24\016\uff24" +
    "\017\uff24\020\uff24\021\uff24\022\uff24\023\uff24\025\uff24\026" +
    "\uff24\027\uff24\030\uff24\033\uff24\034\uff24\036\uff24\041\uff24" +
    "\042\uff24\043\uff24\044\uff24\045\uff24\046\uff24\056\uff24\057" +
    "\uff24\060\uff24\061\uff24\062\uff24\063\uff24\064\uff24\065\uff24" +
    "\066\uff24\067\uff24\070\uff24\071\uff24\072\uff24\073\uff24\074" +
    "\uff24\075\uff24\076\uff24\100\uff24\101\uff24\102\uff24\103\uff24" +
    "\104\uff24\105\uff24\106\uff24\107\uff24\110\uff24\111\uff24\112" +
    "\uff24\113\uff24\115\uff24\117\uff24\120\uff24\122\uff24\123\uff24" +
    "\124\uff24\125\uff24\127\uff24\130\uff24\132\uff24\134\uff24\135" +
    "\uff24\136\uff24\137\uff24\140\uff24\141\uff24\142\uff24\143\uff24" +
    "\144\uff24\145\uff24\001\002\000\044\033\174\036\143\042" +
    "\151\061\163\065\201\066\161\073\123\102\157\127\203" +
    "\132\125\136\134\140\202\141\142\142\132\143\117\144" +
    "\010\145\150\001\002\000\166\025\uff50\026\uff50\027\uff50" +
    "\030\uff50\033\uff50\034\uff50\036\uff50\041\uff50\042\uff50\045" +
    "\uff50\046\uff50\056\uff50\057\uff50\060\uff50\061\uff50\062\uff50" +
    "\063\uff50\064\uff50\065\uff50\066\uff50\070\uff50\071\uff50\072" +
    "\uff50\073\uff50\074\uff50\075\uff50\076\uff50\100\uff50\101\uff50" +
    "\102\uff50\103\uff50\104\uff50\105\uff50\106\uff50\107\uff50\110" +
    "\uff50\111\uff50\112\uff50\113\uff50\115\uff50\117\uff50\120\uff50" +
    "\123\uff50\124\uff50\125\uff50\127\uff50\130\uff50\132\uff50\134" +
    "\uff50\135\uff50\136\uff50\137\uff50\140\uff50\141\uff50\142\uff50" +
    "\143\uff50\144\uff50\145\uff50\001\002\000\162\025\uff62\026" +
    "\uff62\030\uff62\033\uff62\034\uff62\036\uff62\041\uff62\042\uff62" +
    "\045\uff62\046\uff62\056\uff62\057\uff62\060\uff62\061\uff62\062" +
    "\uff62\063\uff62\064\uff62\065\uff62\066\uff62\070\uff62\071\uff62" +
    "\072\uff62\073\uff62\074\uff62\075\uff62\076\233\100\uff62\101" +
    "\uff62\102\uff62\103\uff62\104\uff62\105\uff62\106\uff62\107\uff62" +
    "\110\uff62\111\uff62\112\uff62\113\uff62\115\uff62\117\232\123" +
    "\uff62\124\uff62\125\uff62\127\uff62\130\uff62\132\uff62\134\uff62" +
    "\135\uff62\136\uff62\137\uff62\140\uff62\141\uff62\142\uff62\143" +
    "\uff62\144\uff62\145\uff62\001\002\000\162\025\uff5f\026\uff5f" +
    "\030\uff5f\033\uff5f\034\uff5f\036\uff5f\041\uff5f\042\uff5f\045" +
    "\uff5f\046\uff5f\056\uff5f\057\uff5f\060\uff5f\061\uff5f\062\uff5f" +
    "\063\uff5f\064\uff5f\065\uff5f\066\uff5f\070\uff5f\071\uff5f\072" +
    "\uff5f\073\uff5f\074\uff5f\075\uff5f\076\233\100\uff5f\101\uff5f" +
    "\102\uff5f\103\uff5f\104\uff5f\105\uff5f\106\uff5f\107\uff5f\110" +
    "\uff5f\111\uff5f\112\uff5f\113\uff5f\115\uff5f\117\232\123\uff5f" +
    "\124\uff5f\125\uff5f\127\uff5f\130\uff5f\132\uff5f\134\uff5f\135" +
    "\uff5f\136\uff5f\137\uff5f\140\uff5f\141\uff5f\142\uff5f\143\uff5f" +
    "\144\uff5f\145\uff5f\001\002\000\162\025\uff55\026\uff55\030" +
    "\uff55\033\uff55\034\uff55\036\uff55\041\uff55\042\uff55\045\uff55" +
    "\046\uff55\056\uff55\057\uff55\060\uff55\061\uff55\062\uff55\063" +
    "\uff55\064\uff55\065\uff55\066\uff55\070\uff55\071\uff55\072\uff55" +
    "\073\uff55\074\uff55\075\uff55\076\uff55\100\uff55\101\uff55\102" +
    "\uff55\103\uff55\104\uff55\105\uff55\106\uff55\107\uff55\110\uff55" +
    "\111\uff55\112\uff55\113\uff55\115\uff55\117\uff55\123\uff55\124" +
    "\uff55\125\uff55\127\uff55\130\uff55\132\uff55\134\uff55\135\uff55" +
    "\136\uff55\137\uff55\140\uff55\141\uff55\142\uff55\143\uff55\144" +
    "\uff55\145\uff55\001\002\000\004\046\310\001\002\000\114" +
    "\025\uff83\026\uff83\033\uff83\034\uff83\036\uff83\041\uff83\042" +
    "\uff83\060\uff83\061\uff83\065\uff83\066\uff83\070\uff83\071\uff83" +
    "\072\uff83\073\uff83\100\uff83\101\uff83\102\uff83\103\uff83\112" +
    "\uff83\113\uff83\123\uff83\124\uff83\125\uff83\127\uff83\130\uff83" +
    "\132\uff83\134\uff83\135\uff83\136\uff83\137\uff83\140\uff83\141" +
    "\uff83\142\uff83\143\uff83\144\uff83\145\uff83\001\002\000\102" +
    "\025\171\026\146\033\174\036\143\042\151\060\121\061" +
    "\163\065\124\066\161\070\164\071\145\072\170\073\123" +
    "\100\154\101\160\102\157\103\136\112\140\113\155\127" +
    "\113\130\176\132\125\134\162\135\115\136\134\137\147" +
    "\140\167\141\142\142\132\143\117\144\010\145\150\001" +
    "\002\000\010\034\314\041\312\066\074\001\002\000\010" +
    "\127\014\141\013\144\010\001\002\000\114\025\uff92\026" +
    "\uff92\033\uff92\034\uff92\036\uff92\041\uff92\042\uff92\060\uff92" +
    "\061\uff92\065\uff92\066\uff92\070\uff92\071\uff92\072\uff92\073" +
    "\uff92\100\uff92\101\uff92\102\uff92\103\uff92\112\uff92\113\uff92" +
    "\123\uff92\124\uff92\125\uff92\127\uff92\130\uff92\132\uff92\134" +
    "\uff92\135\uff92\136\uff92\137\uff92\140\uff92\141\uff92\142\uff92" +
    "\143\uff92\144\uff92\145\uff92\001\002\000\102\025\171\026" +
    "\146\033\174\036\143\042\151\060\121\061\163\065\124" +
    "\066\161\070\164\071\145\072\170\073\123\100\154\101" +
    "\160\102\157\103\136\112\140\113\155\127\113\130\176" +
    "\132\125\134\162\135\115\136\134\137\147\140\167\141" +
    "\142\142\132\143\117\144\010\145\150\001\002\000\114" +
    "\025\uff89\026\uff89\033\uff89\034\uff89\036\uff89\041\uff89\042" +
    "\uff89\060\uff89\061\uff89\065\uff89\066\uff89\070\uff89\071\uff89" +
    "\072\uff89\073\uff89\100\uff89\101\uff89\102\uff89\103\uff89\112" +
    "\uff89\113\uff89\123\uff89\124\uff89\125\uff89\127\uff89\130\uff89" +
    "\132\uff89\134\uff89\135\uff89\136\uff89\137\uff89\140\uff89\141" +
    "\uff89\142\uff89\143\uff89\144\uff89\145\uff89\001\002\000\114" +
    "\025\uff8a\026\uff8a\033\uff8a\034\uff8a\036\uff8a\041\uff8a\042" +
    "\uff8a\060\uff8a\061\uff8a\065\uff8a\066\uff8a\070\uff8a\071\uff8a" +
    "\072\uff8a\073\uff8a\100\uff8a\101\uff8a\102\uff8a\103\uff8a\112" +
    "\uff8a\113\uff8a\123\uff8a\124\uff8a\125\uff8a\127\uff8a\130\uff8a" +
    "\132\uff8a\134\uff8a\135\uff8a\136\uff8a\137\uff8a\140\uff8a\141" +
    "\uff8a\142\uff8a\143\uff8a\144\uff8a\145\uff8a\001\002\000\114" +
    "\025\uff91\026\uff91\033\uff91\034\uff91\036\uff91\041\uff91\042" +
    "\uff91\060\uff91\061\uff91\065\uff91\066\uff91\070\uff91\071\uff91" +
    "\072\uff91\073\uff91\100\uff91\101\uff91\102\uff91\103\uff91\112" +
    "\uff91\113\uff91\123\uff91\124\uff91\125\uff91\127\uff91\130\uff91" +
    "\132\uff91\134\uff91\135\uff91\136\uff91\137\uff91\140\uff91\141" +
    "\uff91\142\uff91\143\uff91\144\uff91\145\uff91\001\002\000\012" +
    "\034\uff97\041\uff97\066\uff97\123\uff97\001\002\000\010\034" +
    "\314\041\322\066\074\001\002\000\016\042\100\050\102" +
    "\116\101\127\014\141\013\144\010\001\002\000\114\025" +
    "\uff80\026\uff80\033\uff80\034\uff80\036\uff80\041\uff80\042\uff80" +
    "\060\uff80\061\uff80\065\uff80\066\uff80\070\uff80\071\uff80\072" +
    "\uff80\073\uff80\100\uff80\101\uff80\102\uff80\103\uff80\112\uff80" +
    "\113\uff80\123\uff80\124\uff80\125\uff80\127\uff80\130\uff80\132" +
    "\uff80\134\uff80\135\uff80\136\uff80\137\uff80\140\uff80\141\uff80" +
    "\142\uff80\143\uff80\144\uff80\145\uff80\001\002\000\012\034" +
    "\uff98\041\uff98\066\uff98\123\uff98\001\002\000\004\123\345" +
    "\001\002\000\230\004\uff23\005\uff23\006\uff23\007\uff23\010" +
    "\uff23\011\uff23\012\uff23\013\uff23\014\uff23\015\uff23\016\uff23" +
    "\017\uff23\020\uff23\021\uff23\022\uff23\023\uff23\025\uff23\026" +
    "\uff23\027\uff23\030\uff23\033\uff23\036\uff23\040\uff9e\041\uff9e" +
    "\042\uff23\043\uff23\044\uff23\046\uff23\056\uff23\057\uff23\060" +
    "\uff23\061\uff23\062\uff23\063\uff23\064\uff23\065\uff23\066\uff23" +
    "\067\uff23\070\uff23\071\uff23\072\uff23\073\uff23\074\uff23\075" +
    "\uff23\076\uff23\100\uff23\101\uff23\102\uff23\103\uff23\104\uff23" +
    "\105\uff23\106\uff23\107\uff23\110\uff23\111\uff23\112\uff23\113" +
    "\uff23\115\uff23\117\uff23\120\uff23\122\uff23\123\uff23\127\uff23" +
    "\130\uff23\132\uff23\134\uff23\135\uff23\136\uff23\137\uff23\140" +
    "\uff23\141\uff23\142\uff23\143\uff23\144\uff23\145\uff23\001\002" +
    "\000\012\067\340\127\014\141\013\144\010\001\002\000" +
    "\104\025\171\026\146\033\174\036\143\042\151\060\121" +
    "\061\163\065\124\066\161\070\164\071\145\072\170\073" +
    "\123\100\154\101\160\102\157\103\136\112\140\113\155" +
    "\123\uff8c\127\113\130\176\132\125\134\162\135\115\136" +
    "\134\137\147\140\167\141\142\142\132\143\117\144\010" +
    "\145\150\001\002\000\264\002\uff8d\004\uff8d\005\uff8d\006" +
    "\uff8d\007\uff8d\010\uff8d\011\uff8d\012\uff8d\013\uff8d\014\uff8d" +
    "\015\uff8d\016\uff8d\017\uff8d\020\uff8d\021\uff8d\022\uff8d\023" +
    "\uff8d\024\uff8d\025\uff8d\026\uff8d\027\uff8d\030\uff8d\032\uff8d" +
    "\033\uff8d\034\uff8d\036\uff8d\037\uff8d\041\uff8d\042\uff8d\043" +
    "\uff8d\044\uff8d\045\uff8d\046\uff8d\051\uff8d\053\uff8d\054\uff8d" +
    "\055\uff8d\056\uff8d\057\uff8d\060\uff8d\061\uff8d\062\uff8d\063" +
    "\uff8d\064\uff8d\065\uff8d\066\uff8d\067\uff8d\070\uff8d\071\uff8d" +
    "\072\uff8d\073\uff8d\074\uff8d\075\uff8d\076\uff8d\100\uff8d\101" +
    "\uff8d\102\uff8d\103\uff8d\104\uff8d\105\uff8d\106\uff8d\107\uff8d" +
    "\110\uff8d\111\uff8d\112\uff8d\113\uff8d\115\uff8d\117\uff8d\120" +
    "\uff8d\121\uff8d\122\uff8d\123\uff8d\124\uff8d\125\uff8d\126\uff8d" +
    "\127\uff8d\130\uff8d\131\uff8d\132\uff8d\134\uff8d\135\uff8d\136" +
    "\uff8d\137\uff8d\140\uff8d\141\uff8d\142\uff8d\143\uff8d\144\uff8d" +
    "\145\uff8d\001\002\000\012\034\314\041\322\066\074\123" +
    "\334\001\002\000\004\123\335\001\002\000\236\004\uff20" +
    "\005\uff20\006\uff20\007\uff20\010\uff20\011\uff20\012\uff20\013" +
    "\uff20\014\uff20\015\uff20\016\uff20\017\uff20\020\uff20\021\uff20" +
    "\022\uff20\023\uff20\025\uff20\026\uff20\027\uff20\030\uff20\033" +
    "\uff20\034\uff20\036\uff20\041\uff20\042\uff20\043\uff20\044\uff20" +
    "\045\uff20\046\uff20\056\uff20\057\uff20\060\uff20\061\uff20\062" +
    "\uff20\063\uff20\064\uff20\065\uff20\066\uff20\067\uff20\070\uff20" +
    "\071\uff20\072\uff20\073\uff20\074\uff20\075\uff20\076\uff20\100" +
    "\uff20\101\uff20\102\uff20\103\uff20\104\uff20\105\uff20\106\uff20" +
    "\107\uff20\110\uff20\111\uff20\112\uff20\113\uff20\115\uff20\117" +
    "\uff20\120\uff20\122\uff20\123\uff20\124\uff20\125\uff20\127\uff20" +
    "\130\uff20\132\uff20\134\uff20\135\uff20\136\uff20\137\uff20\140" +
    "\uff20\141\uff20\142\uff20\143\uff20\144\uff20\145\uff20\001\002" +
    "\000\236\004\uff21\005\uff21\006\uff21\007\uff21\010\uff21\011" +
    "\uff21\012\uff21\013\uff21\014\uff21\015\uff21\016\uff21\017\uff21" +
    "\020\uff21\021\uff21\022\uff21\023\uff21\025\uff21\026\uff21\027" +
    "\uff21\030\uff21\033\uff21\034\uff21\036\uff21\041\uff21\042\uff21" +
    "\043\uff21\044\uff21\045\uff21\046\uff21\056\uff21\057\uff21\060" +
    "\uff21\061\uff21\062\uff21\063\uff21\064\uff21\065\uff21\066\uff21" +
    "\067\uff21\070\uff21\071\uff21\072\uff21\073\uff21\074\uff21\075" +
    "\uff21\076\uff21\100\uff21\101\uff21\102\uff21\103\uff21\104\uff21" +
    "\105\uff21\106\uff21\107\uff21\110\uff21\111\uff21\112\uff21\113" +
    "\uff21\115\uff21\117\uff21\120\uff21\122\uff21\123\uff21\124\uff21" +
    "\125\uff21\127\uff21\130\uff21\132\uff21\134\uff21\135\uff21\136" +
    "\uff21\137\uff21\140\uff21\141\uff21\142\uff21\143\uff21\144\uff21" +
    "\145\uff21\001\002\000\004\123\uff8b\001\002\000\006\040" +
    "\343\041\026\001\002\000\104\025\171\026\146\033\174" +
    "\036\143\042\151\060\121\061\163\065\124\066\161\070" +
    "\164\071\145\072\170\073\123\100\154\101\160\102\157" +
    "\103\136\112\140\113\155\124\uff88\127\113\130\176\132" +
    "\125\134\162\135\115\136\134\137\147\140\167\141\142" +
    "\142\132\143\117\144\010\145\150\001\002\000\004\124" +
    "\342\001\002\000\236\004\uff38\005\uff38\006\uff38\007\uff38" +
    "\010\uff38\011\uff38\012\uff38\013\uff38\014\uff38\015\uff38\016" +
    "\uff38\017\uff38\020\uff38\021\uff38\022\uff38\023\uff38\025\uff38" +
    "\026\uff38\027\uff38\030\uff38\033\uff38\034\uff38\036\uff38\041" +
    "\uff38\042\uff38\043\uff38\044\uff38\045\uff38\046\uff38\056\uff38" +
    "\057\uff38\060\uff38\061\uff38\062\uff38\063\uff38\064\uff38\065" +
    "\uff38\066\uff38\067\uff38\070\uff38\071\uff38\072\uff38\073\uff38" +
    "\074\uff38\075\uff38\076\uff38\100\uff38\101\uff38\102\uff38\103" +
    "\uff38\104\uff38\105\uff38\106\uff38\107\uff38\110\uff38\111\uff38" +
    "\112\uff38\113\uff38\115\uff38\117\uff38\120\uff38\122\uff38\123" +
    "\uff38\124\uff38\125\uff38\127\uff38\130\uff38\132\uff38\134\uff38" +
    "\135\uff38\136\uff38\137\uff38\140\uff38\141\uff38\142\uff38\143" +
    "\uff38\144\uff38\145\uff38\001\002\000\102\025\171\026\146" +
    "\033\174\036\143\042\151\060\121\061\163\065\124\066" +
    "\161\070\164\071\145\072\170\073\123\100\154\101\160" +
    "\102\157\103\136\112\140\113\155\127\113\130\176\132" +
    "\125\134\162\135\115\136\134\137\147\140\167\141\142" +
    "\142\132\143\117\144\010\145\150\001\002\000\016\034" +
    "\uff9a\041\uff9a\066\uff9a\123\uff9a\124\uff9a\125\uff9a\001\002" +
    "\000\264\002\uff8e\004\uff8e\005\uff8e\006\uff8e\007\uff8e\010" +
    "\uff8e\011\uff8e\012\uff8e\013\uff8e\014\uff8e\015\uff8e\016\uff8e" +
    "\017\uff8e\020\uff8e\021\uff8e\022\uff8e\023\uff8e\024\uff8e\025" +
    "\uff8e\026\uff8e\027\uff8e\030\uff8e\032\uff8e\033\uff8e\034\uff8e" +
    "\036\uff8e\037\uff8e\041\uff8e\042\uff8e\043\uff8e\044\uff8e\045" +
    "\uff8e\046\uff8e\051\uff8e\053\uff8e\054\uff8e\055\uff8e\056\uff8e" +
    "\057\uff8e\060\uff8e\061\uff8e\062\uff8e\063\uff8e\064\uff8e\065" +
    "\uff8e\066\uff8e\067\uff8e\070\uff8e\071\uff8e\072\uff8e\073\uff8e" +
    "\074\uff8e\075\uff8e\076\uff8e\100\uff8e\101\uff8e\102\uff8e\103" +
    "\uff8e\104\uff8e\105\uff8e\106\uff8e\107\uff8e\110\uff8e\111\uff8e" +
    "\112\uff8e\113\uff8e\115\uff8e\117\uff8e\120\uff8e\121\uff8e\122" +
    "\uff8e\123\uff8e\124\uff8e\125\uff8e\126\uff8e\127\uff8e\130\uff8e" +
    "\131\uff8e\132\uff8e\134\uff8e\135\uff8e\136\uff8e\137\uff8e\140" +
    "\uff8e\141\uff8e\142\uff8e\143\uff8e\144\uff8e\145\uff8e\001\002" +
    "\000\162\025\uff61\026\uff61\030\uff61\033\uff61\034\uff61\036" +
    "\uff61\041\uff61\042\uff61\045\uff61\046\uff61\056\uff61\057\uff61" +
    "\060\uff61\061\uff61\062\uff61\063\uff61\064\uff61\065\uff61\066" +
    "\uff61\070\uff61\071\uff61\072\uff61\073\uff61\074\uff61\075\uff61" +
    "\076\233\100\uff61\101\uff61\102\uff61\103\uff61\104\uff61\105" +
    "\uff61\106\uff61\107\uff61\110\uff61\111\uff61\112\uff61\113\uff61" +
    "\115\uff61\117\232\123\uff61\124\uff61\125\uff61\127\uff61\130" +
    "\uff61\132\uff61\134\uff61\135\uff61\136\uff61\137\uff61\140\uff61" +
    "\141\uff61\142\uff61\143\uff61\144\uff61\145\uff61\001\002\000" +
    "\162\025\uff5e\026\uff5e\030\uff5e\033\uff5e\034\uff5e\036\uff5e" +
    "\041\uff5e\042\uff5e\045\uff5e\046\uff5e\056\uff5e\057\uff5e\060" +
    "\uff5e\061\uff5e\062\uff5e\063\uff5e\064\uff5e\065\uff5e\066\uff5e" +
    "\070\uff5e\071\uff5e\072\uff5e\073\uff5e\074\uff5e\075\uff5e\076" +
    "\233\100\uff5e\101\uff5e\102\uff5e\103\uff5e\104\uff5e\105\uff5e" +
    "\106\uff5e\107\uff5e\110\uff5e\111\uff5e\112\uff5e\113\uff5e\115" +
    "\uff5e\117\232\123\uff5e\124\uff5e\125\uff5e\127\uff5e\130\uff5e" +
    "\132\uff5e\134\uff5e\135\uff5e\136\uff5e\137\uff5e\140\uff5e\141" +
    "\uff5e\142\uff5e\143\uff5e\144\uff5e\145\uff5e\001\002\000\010" +
    "\034\314\041\322\066\074\001\002\000\114\025\uff81\026" +
    "\uff81\033\uff81\034\uff81\036\uff81\041\uff81\042\uff81\060\uff81" +
    "\061\uff81\065\uff81\066\uff81\070\uff81\071\uff81\072\uff81\073" +
    "\uff81\100\uff81\101\uff81\102\uff81\103\uff81\112\uff81\113\uff81" +
    "\123\uff81\124\uff81\125\uff81\127\uff81\130\uff81\132\uff81\134" +
    "\uff81\135\uff81\136\uff81\137\uff81\140\uff81\141\uff81\142\uff81" +
    "\143\uff81\144\uff81\145\uff81\001\002\000\046\033\174\036" +
    "\143\042\151\060\121\061\163\065\124\066\161\073\123" +
    "\102\157\127\203\132\125\136\134\140\167\141\142\142" +
    "\132\143\117\144\010\145\150\001\002\000\046\033\174" +
    "\036\143\042\151\060\121\061\163\065\124\066\161\073" +
    "\123\102\157\127\203\132\125\136\134\140\167\141\142" +
    "\142\132\143\117\144\010\145\150\001\002\000\046\033" +
    "\174\036\143\042\151\060\121\061\163\065\124\066\161" +
    "\073\123\102\157\127\203\132\125\136\134\140\167\141" +
    "\142\142\132\143\117\144\010\145\150\001\002\000\046" +
    "\033\174\036\143\042\151\060\121\061\163\065\124\066" +
    "\161\073\123\102\157\127\203\132\125\136\134\140\167" +
    "\141\142\142\132\143\117\144\010\145\150\001\002\000" +
    "\046\033\174\036\143\042\151\060\121\061\163\065\124" +
    "\066\161\073\123\102\157\127\203\132\125\136\134\140" +
    "\167\141\142\142\132\143\117\144\010\145\150\001\002" +
    "\000\046\033\174\036\143\042\151\060\121\061\163\065" +
    "\124\066\161\073\123\102\157\127\203\132\125\136\134" +
    "\140\167\141\142\142\132\143\117\144\010\145\150\001" +
    "\002\000\046\033\174\036\143\042\151\060\121\061\163" +
    "\065\124\066\161\073\123\102\157\127\203\132\125\136" +
    "\134\140\167\141\142\142\132\143\117\144\010\145\150" +
    "\001\002\000\046\033\174\036\143\042\151\060\121\061" +
    "\163\065\124\066\161\073\123\102\157\127\203\132\125" +
    "\136\134\140\167\141\142\142\132\143\117\144\010\145" +
    "\150\001\002\000\046\033\174\036\143\042\151\060\121" +
    "\061\163\065\124\066\161\073\123\102\157\127\203\132" +
    "\125\136\134\140\167\141\142\142\132\143\117\144\010" +
    "\145\150\001\002\000\046\033\174\036\143\042\151\060" +
    "\121\061\163\065\124\066\161\073\123\102\157\127\203" +
    "\132\125\136\134\140\167\141\142\142\132\143\117\144" +
    "\010\145\150\001\002\000\046\033\174\036\143\042\151" +
    "\060\121\061\163\065\124\066\161\073\123\102\157\127" +
    "\203\132\125\136\134\140\167\141\142\142\132\143\117" +
    "\144\010\145\150\001\002\000\046\033\174\036\143\042" +
    "\151\060\121\061\163\065\124\066\161\073\123\102\157" +
    "\127\203\132\125\136\134\140\167\141\142\142\132\143" +
    "\117\144\010\145\150\001\002\000\162\025\uff6c\026\uff6c" +
    "\030\uff6c\033\uff6c\034\uff6c\036\uff6c\041\uff6c\042\uff6c\045" +
    "\uff6c\046\uff6c\056\uff6c\057\uff6c\060\uff6c\061\uff6c\062\uff6c" +
    "\063\uff6c\064\uff6c\065\uff6c\066\uff6c\070\uff6c\071\uff6c\072" +
    "\uff6c\073\uff6c\074\uff6c\075\uff6c\076\233\100\uff6c\101\uff6c" +
    "\102\uff6c\103\uff6c\104\uff6c\105\uff6c\106\uff6c\107\uff6c\110" +
    "\uff6c\111\uff6c\112\uff6c\113\uff6c\115\uff6c\117\232\123\uff6c" +
    "\124\uff6c\125\uff6c\127\uff6c\130\uff6c\132\uff6c\134\uff6c\135" +
    "\uff6c\136\uff6c\137\uff6c\140\uff6c\141\uff6c\142\uff6c\143\uff6c" +
    "\144\uff6c\145\uff6c\001\002\000\162\025\uff6e\026\uff6e\030" +
    "\uff6e\033\uff6e\034\uff6e\036\uff6e\041\uff6e\042\uff6e\045\uff6e" +
    "\046\uff6e\056\uff6e\057\uff6e\060\uff6e\061\uff6e\062\uff6e\063" +
    "\uff6e\064\uff6e\065\uff6e\066\uff6e\070\uff6e\071\uff6e\072\uff6e" +
    "\073\uff6e\074\uff6e\075\uff6e\076\233\100\uff6e\101\uff6e\102" +
    "\uff6e\103\uff6e\104\uff6e\105\uff6e\106\uff6e\107\uff6e\110\uff6e" +
    "\111\uff6e\112\uff6e\113\uff6e\115\uff6e\117\232\123\uff6e\124" +
    "\uff6e\125\uff6e\127\uff6e\130\uff6e\132\uff6e\134\uff6e\135\uff6e" +
    "\136\uff6e\137\uff6e\140\uff6e\141\uff6e\142\uff6e\143\uff6e\144" +
    "\uff6e\145\uff6e\001\002\000\162\025\uff66\026\uff66\030\uff66" +
    "\033\uff66\034\uff66\036\uff66\041\uff66\042\uff66\045\uff66\046" +
    "\uff66\056\uff66\057\uff66\060\uff66\061\uff66\062\uff66\063\uff66" +
    "\064\uff66\065\uff66\066\uff66\070\uff66\071\uff66\072\uff66\073" +
    "\uff66\074\uff66\075\uff66\076\233\100\uff66\101\uff66\102\uff66" +
    "\103\uff66\104\uff66\105\uff66\106\uff66\107\uff66\110\uff66\111" +
    "\uff66\112\uff66\113\uff66\115\uff66\117\232\123\uff66\124\uff66" +
    "\125\uff66\127\uff66\130\uff66\132\uff66\134\uff66\135\uff66\136" +
    "\uff66\137\uff66\140\uff66\141\uff66\142\uff66\143\uff66\144\uff66" +
    "\145\uff66\001\002\000\162\025\uff6b\026\uff6b\030\uff6b\033" +
    "\uff6b\034\uff6b\036\uff6b\041\uff6b\042\uff6b\045\uff6b\046\uff6b" +
    "\056\uff6b\057\uff6b\060\uff6b\061\uff6b\062\uff6b\063\uff6b\064" +
    "\uff6b\065\uff6b\066\uff6b\070\uff6b\071\uff6b\072\uff6b\073\uff6b" +
    "\074\uff6b\075\uff6b\076\233\100\uff6b\101\uff6b\102\uff6b\103" +
    "\uff6b\104\uff6b\105\uff6b\106\uff6b\107\uff6b\110\uff6b\111\uff6b" +
    "\112\uff6b\113\uff6b\115\uff6b\117\232\123\uff6b\124\uff6b\125" +
    "\uff6b\127\uff6b\130\uff6b\132\uff6b\134\uff6b\135\uff6b\136\uff6b" +
    "\137\uff6b\140\uff6b\141\uff6b\142\uff6b\143\uff6b\144\uff6b\145" +
    "\uff6b\001\002\000\162\025\uff64\026\uff64\030\uff64\033\uff64" +
    "\034\uff64\036\uff64\041\uff64\042\uff64\045\uff64\046\uff64\056" +
    "\uff64\057\uff64\060\uff64\061\uff64\062\uff64\063\uff64\064\uff64" +
    "\065\uff64\066\uff64\070\uff64\071\uff64\072\uff64\073\uff64\074" +
    "\uff64\075\uff64\076\233\100\uff64\101\uff64\102\uff64\103\uff64" +
    "\104\uff64\105\uff64\106\uff64\107\uff64\110\uff64\111\uff64\112" +
    "\uff64\113\uff64\115\uff64\117\232\123\uff64\124\uff64\125\uff64" +
    "\127\uff64\130\uff64\132\uff64\134\uff64\135\uff64\136\uff64\137" +
    "\uff64\140\uff64\141\uff64\142\uff64\143\uff64\144\uff64\145\uff64" +
    "\001\002\000\162\025\uff65\026\uff65\030\uff65\033\uff65\034" +
    "\uff65\036\uff65\041\uff65\042\uff65\045\uff65\046\uff65\056\uff65" +
    "\057\uff65\060\uff65\061\uff65\062\uff65\063\uff65\064\uff65\065" +
    "\uff65\066\uff65\070\uff65\071\uff65\072\uff65\073\uff65\074\uff65" +
    "\075\uff65\076\233\100\uff65\101\uff65\102\uff65\103\uff65\104" +
    "\uff65\105\uff65\106\uff65\107\uff65\110\uff65\111\uff65\112\uff65" +
    "\113\uff65\115\uff65\117\232\123\uff65\124\uff65\125\uff65\127" +
    "\uff65\130\uff65\132\uff65\134\uff65\135\uff65\136\uff65\137\uff65" +
    "\140\uff65\141\uff65\142\uff65\143\uff65\144\uff65\145\uff65\001" +
    "\002\000\162\025\uff63\026\uff63\030\uff63\033\uff63\034\uff63" +
    "\036\uff63\041\uff63\042\uff63\045\uff63\046\uff63\056\uff63\057" +
    "\uff63\060\uff63\061\uff63\062\uff63\063\uff63\064\uff63\065\uff63" +
    "\066\uff63\070\uff63\071\uff63\072\uff63\073\uff63\074\uff63\075" +
    "\uff63\076\233\100\uff63\101\uff63\102\uff63\103\uff63\104\uff63" +
    "\105\uff63\106\uff63\107\uff63\110\uff63\111\uff63\112\uff63\113" +
    "\uff63\115\uff63\117\232\123\uff63\124\uff63\125\uff63\127\uff63" +
    "\130\uff63\132\uff63\134\uff63\135\uff63\136\uff63\137\uff63\140" +
    "\uff63\141\uff63\142\uff63\143\uff63\144\uff63\145\uff63\001\002" +
    "\000\162\025\uff6a\026\uff6a\030\uff6a\033\uff6a\034\uff6a\036" +
    "\uff6a\041\uff6a\042\uff6a\045\uff6a\046\uff6a\056\uff6a\057\uff6a" +
    "\060\uff6a\061\uff6a\062\uff6a\063\uff6a\064\uff6a\065\uff6a\066" +
    "\uff6a\070\uff6a\071\uff6a\072\uff6a\073\uff6a\074\uff6a\075\uff6a" +
    "\076\233\100\uff6a\101\uff6a\102\uff6a\103\uff6a\104\uff6a\105" +
    "\uff6a\106\uff6a\107\uff6a\110\uff6a\111\uff6a\112\uff6a\113\uff6a" +
    "\115\uff6a\117\232\123\uff6a\124\uff6a\125\uff6a\127\uff6a\130" +
    "\uff6a\132\uff6a\134\uff6a\135\uff6a\136\uff6a\137\uff6a\140\uff6a" +
    "\141\uff6a\142\uff6a\143\uff6a\144\uff6a\145\uff6a\001\002\000" +
    "\162\025\uff6d\026\uff6d\030\uff6d\033\uff6d\034\uff6d\036\uff6d" +
    "\041\uff6d\042\uff6d\045\uff6d\046\uff6d\056\uff6d\057\uff6d\060" +
    "\uff6d\061\uff6d\062\uff6d\063\uff6d\064\uff6d\065\uff6d\066\uff6d" +
    "\070\uff6d\071\uff6d\072\uff6d\073\uff6d\074\uff6d\075\uff6d\076" +
    "\233\100\uff6d\101\uff6d\102\uff6d\103\uff6d\104\uff6d\105\uff6d" +
    "\106\uff6d\107\uff6d\110\uff6d\111\uff6d\112\uff6d\113\uff6d\115" +
    "\uff6d\117\232\123\uff6d\124\uff6d\125\uff6d\127\uff6d\130\uff6d" +
    "\132\uff6d\134\uff6d\135\uff6d\136\uff6d\137\uff6d\140\uff6d\141" +
    "\uff6d\142\uff6d\143\uff6d\144\uff6d\145\uff6d\001\002\000\162" +
    "\025\uff69\026\uff69\030\uff69\033\uff69\034\uff69\036\uff69\041" +
    "\uff69\042\uff69\045\uff69\046\uff69\056\uff69\057\uff69\060\uff69" +
    "\061\uff69\062\uff69\063\uff69\064\uff69\065\uff69\066\uff69\070" +
    "\uff69\071\uff69\072\uff69\073\uff69\074\uff69\075\uff69\076\233" +
    "\100\uff69\101\uff69\102\uff69\103\uff69\104\uff69\105\uff69\106" +
    "\uff69\107\uff69\110\uff69\111\uff69\112\uff69\113\uff69\115\uff69" +
    "\117\232\123\uff69\124\uff69\125\uff69\127\uff69\130\uff69\132" +
    "\uff69\134\uff69\135\uff69\136\uff69\137\uff69\140\uff69\141\uff69" +
    "\142\uff69\143\uff69\144\uff69\145\uff69\001\002\000\162\025" +
    "\uff68\026\uff68\030\uff68\033\uff68\034\uff68\036\uff68\041\uff68" +
    "\042\uff68\045\uff68\046\uff68\056\uff68\057\uff68\060\uff68\061" +
    "\uff68\062\uff68\063\uff68\064\uff68\065\uff68\066\uff68\070\uff68" +
    "\071\uff68\072\uff68\073\uff68\074\uff68\075\uff68\076\233\100" +
    "\uff68\101\uff68\102\uff68\103\uff68\104\uff68\105\uff68\106\uff68" +
    "\107\uff68\110\uff68\111\uff68\112\uff68\113\uff68\115\uff68\117" +
    "\232\123\uff68\124\uff68\125\uff68\127\uff68\130\uff68\132\uff68" +
    "\134\uff68\135\uff68\136\uff68\137\uff68\140\uff68\141\uff68\142" +
    "\uff68\143\uff68\144\uff68\145\uff68\001\002\000\162\025\uff67" +
    "\026\uff67\030\uff67\033\uff67\034\uff67\036\uff67\041\uff67\042" +
    "\uff67\045\uff67\046\uff67\056\uff67\057\uff67\060\uff67\061\uff67" +
    "\062\uff67\063\uff67\064\uff67\065\uff67\066\uff67\070\uff67\071" +
    "\uff67\072\uff67\073\uff67\074\uff67\075\uff67\076\233\100\uff67" +
    "\101\uff67\102\uff67\103\uff67\104\uff67\105\uff67\106\uff67\107" +
    "\uff67\110\uff67\111\uff67\112\uff67\113\uff67\115\uff67\117\232" +
    "\123\uff67\124\uff67\125\uff67\127\uff67\130\uff67\132\uff67\134" +
    "\uff67\135\uff67\136\uff67\137\uff67\140\uff67\141\uff67\142\uff67" +
    "\143\uff67\144\uff67\145\uff67\001\002\000\010\034\314\041" +
    "\322\066\074\001\002\000\114\025\uff7d\026\uff7d\033\uff7d" +
    "\034\uff7d\036\uff7d\041\uff7d\042\uff7d\060\uff7d\061\uff7d\065" +
    "\uff7d\066\uff7d\070\uff7d\071\uff7d\072\uff7d\073\uff7d\100\uff7d" +
    "\101\uff7d\102\uff7d\103\uff7d\112\uff7d\113\uff7d\123\uff7d\124" +
    "\uff7d\125\uff7d\127\uff7d\130\uff7d\132\uff7d\134\uff7d\135\uff7d" +
    "\136\uff7d\137\uff7d\140\uff7d\141\uff7d\142\uff7d\143\uff7d\144" +
    "\uff7d\145\uff7d\001\002\000\010\034\314\041\322\066\074" +
    "\001\002\000\114\025\uff82\026\uff82\033\uff82\034\uff82\036" +
    "\uff82\041\uff82\042\uff82\060\uff82\061\uff82\065\uff82\066\uff82" +
    "\070\uff82\071\uff82\072\uff82\073\uff82\100\uff82\101\uff82\102" +
    "\uff82\103\uff82\112\uff82\113\uff82\123\uff82\124\uff82\125\uff82" +
    "\127\uff82\130\uff82\132\uff82\134\uff82\135\uff82\136\uff82\137" +
    "\uff82\140\uff82\141\uff82\142\uff82\143\uff82\144\uff82\145\uff82" +
    "\001\002\000\010\034\314\041\322\066\074\001\002\000" +
    "\114\025\uff7f\026\uff7f\033\uff7f\034\uff7f\036\uff7f\041\uff7f" +
    "\042\uff7f\060\uff7f\061\uff7f\065\uff7f\066\uff7f\070\uff7f\071" +
    "\uff7f\072\uff7f\073\uff7f\100\uff7f\101\uff7f\102\uff7f\103\uff7f" +
    "\112\uff7f\113\uff7f\123\uff7f\124\uff7f\125\uff7f\127\uff7f\130" +
    "\uff7f\132\uff7f\134\uff7f\135\uff7f\136\uff7f\137\uff7f\140\uff7f" +
    "\141\uff7f\142\uff7f\143\uff7f\144\uff7f\145\uff7f\001\002\000" +
    "\044\033\174\036\143\042\151\061\163\065\201\066\161" +
    "\073\123\102\157\127\203\132\125\136\134\140\202\141" +
    "\142\142\132\143\117\144\010\145\150\001\002\000\166" +
    "\025\uff52\026\uff52\027\301\030\uff52\033\uff52\034\uff52\036" +
    "\uff52\041\uff52\042\uff52\045\uff52\046\uff52\056\uff52\057\uff52" +
    "\060\uff52\061\uff52\062\uff52\063\uff52\064\uff52\065\uff52\066" +
    "\uff52\070\uff52\071\uff52\072\uff52\073\uff52\074\uff52\075\uff52" +
    "\076\uff52\100\uff52\101\uff52\102\uff52\103\uff52\104\uff52\105" +
    "\uff52\106\uff52\107\uff52\110\uff52\111\uff52\112\uff52\113\uff52" +
    "\115\uff52\117\uff52\120\uff52\123\uff52\124\uff52\125\uff52\127" +
    "\uff52\130\uff52\132\uff52\134\uff52\135\uff52\136\uff52\137\uff52" +
    "\140\uff52\141\uff52\142\uff52\143\uff52\144\uff52\145\uff52\001" +
    "\002\000\236\004\uff2d\005\uff2d\006\uff2d\007\uff2d\010\uff2d" +
    "\011\uff2d\012\uff2d\013\uff2d\014\uff2d\015\uff2d\016\uff2d\017" +
    "\uff2d\020\uff2d\021\uff2d\022\uff2d\023\uff2d\025\uff2d\026\uff2d" +
    "\027\uff2d\030\uff2d\033\uff2d\034\uff2d\036\uff2d\041\uff2d\042" +
    "\uff2d\043\uff2d\044\uff2d\045\uff2d\046\uff2d\056\uff2d\057\uff2d" +
    "\060\uff2d\061\uff2d\062\uff2d\063\uff2d\064\uff2d\065\uff2d\066" +
    "\uff2d\067\uff2d\070\uff2d\071\uff2d\072\uff2d\073\uff2d\074\uff2d" +
    "\075\uff2d\076\uff2d\100\uff2d\101\uff2d\102\uff2d\103\uff2d\104" +
    "\uff2d\105\uff2d\106\uff2d\107\uff2d\110\uff2d\111\uff2d\112\uff2d" +
    "\113\uff2d\115\uff2d\117\uff2d\120\uff2d\122\uff2d\123\uff2d\124" +
    "\uff2d\125\uff2d\127\uff2d\130\uff2d\132\uff2d\134\uff2d\135\uff2d" +
    "\136\uff2d\137\uff2d\140\uff2d\141\uff2d\142\uff2d\143\uff2d\144" +
    "\uff2d\145\uff2d\001\002\000\010\034\314\041\322\066\074" +
    "\001\002\000\114\025\uff7e\026\uff7e\033\uff7e\034\uff7e\036" +
    "\uff7e\041\uff7e\042\uff7e\060\uff7e\061\uff7e\065\uff7e\066\uff7e" +
    "\070\uff7e\071\uff7e\072\uff7e\073\uff7e\100\uff7e\101\uff7e\102" +
    "\uff7e\103\uff7e\112\uff7e\113\uff7e\123\uff7e\124\uff7e\125\uff7e" +
    "\127\uff7e\130\uff7e\132\uff7e\134\uff7e\135\uff7e\136\uff7e\137" +
    "\uff7e\140\uff7e\141\uff7e\142\uff7e\143\uff7e\144\uff7e\145\uff7e" +
    "\001\002\000\126\025\uff6f\026\uff6f\030\uff6f\033\uff6f\034" +
    "\uff6f\036\uff6f\041\uff6f\042\uff6f\045\uff6f\060\uff6f\061\uff6f" +
    "\062\uff6f\063\uff6f\065\uff6f\066\uff6f\070\uff6f\071\uff6f\072" +
    "\uff6f\073\uff6f\100\uff6f\101\uff6f\102\uff6f\103\uff6f\112\uff6f" +
    "\113\uff6f\115\uff6f\123\uff6f\124\uff6f\125\uff6f\127\uff6f\130" +
    "\uff6f\132\uff6f\134\uff6f\135\uff6f\136\uff6f\137\uff6f\140\uff6f" +
    "\141\uff6f\142\uff6f\143\uff6f\144\uff6f\145\uff6f\001\002\000" +
    "\236\004\uff2e\005\uff2e\006\uff2e\007\uff2e\010\uff2e\011\uff2e" +
    "\012\uff2e\013\uff2e\014\uff2e\015\uff2e\016\uff2e\017\uff2e\020" +
    "\uff2e\021\uff2e\022\uff2e\023\uff2e\025\uff2e\026\uff2e\027\uff2e" +
    "\030\uff2e\033\uff2e\034\uff2e\036\uff2e\041\uff2e\042\uff2e\043" +
    "\uff2e\044\uff2e\045\uff2e\046\uff2e\056\uff2e\057\uff2e\060\uff2e" +
    "\061\uff2e\062\uff2e\063\uff2e\064\uff2e\065\uff2e\066\uff2e\067" +
    "\uff2e\070\uff2e\071\uff2e\072\uff2e\073\uff2e\074\uff2e\075\uff2e" +
    "\076\uff2e\100\uff2e\101\uff2e\102\uff2e\103\uff2e\104\uff2e\105" +
    "\uff2e\106\uff2e\107\uff2e\110\uff2e\111\uff2e\112\uff2e\113\uff2e" +
    "\115\uff2e\117\uff2e\120\uff2e\122\uff2e\123\uff2e\124\uff2e\125" +
    "\uff2e\127\uff2e\130\uff2e\132\uff2e\134\uff2e\135\uff2e\136\uff2e" +
    "\137\uff2e\140\uff2e\141\uff2e\142\uff2e\143\uff2e\144\uff2e\145" +
    "\uff2e\001\002\000\064\025\171\033\174\036\143\042\151" +
    "\060\121\061\163\065\124\066\161\072\170\073\123\101" +
    "\160\102\157\103\136\113\155\127\113\130\176\132\125" +
    "\135\115\136\134\140\167\141\142\142\132\143\117\144" +
    "\010\145\150\001\002\000\120\025\uff7b\026\uff7b\033\uff7b" +
    "\034\uff7b\036\uff7b\041\uff7b\042\uff7b\060\uff7b\061\uff7b\062" +
    "\u0111\065\uff7b\066\uff7b\070\uff7b\071\uff7b\072\uff7b\073\uff7b" +
    "\100\uff7b\101\uff7b\102\uff7b\103\uff7b\112\uff7b\113\uff7b\115" +
    "\uff7b\123\uff7b\124\uff7b\125\uff7b\127\uff7b\130\uff7b\132\uff7b" +
    "\134\uff7b\135\uff7b\136\uff7b\137\uff7b\140\uff7b\141\uff7b\142" +
    "\uff7b\143\uff7b\144\uff7b\145\uff7b\001\002\000\064\025\171" +
    "\033\174\036\143\042\151\060\121\061\163\065\124\066" +
    "\161\072\170\073\123\101\160\102\157\103\136\113\155" +
    "\127\113\130\176\132\125\135\115\136\134\140\167\141" +
    "\142\142\132\143\117\144\010\145\150\001\002\000\120" +
    "\025\uff79\026\uff79\033\uff79\034\uff79\036\uff79\041\uff79\042" +
    "\uff79\060\uff79\061\uff79\062\uff79\065\uff79\066\uff79\070\uff79" +
    "\071\uff79\072\uff79\073\uff79\100\uff79\101\uff79\102\uff79\103" +
    "\uff79\112\uff79\113\uff79\115\uff79\123\uff79\124\uff79\125\uff79" +
    "\127\uff79\130\uff79\132\uff79\134\uff79\135\uff79\136\uff79\137" +
    "\uff79\140\uff79\141\uff79\142\uff79\143\uff79\144\uff79\145\uff79" +
    "\001\002\000\236\004\uff2f\005\uff2f\006\uff2f\007\uff2f\010" +
    "\uff2f\011\uff2f\012\uff2f\013\uff2f\014\uff2f\015\uff2f\016\uff2f" +
    "\017\uff2f\020\uff2f\021\uff2f\022\uff2f\023\uff2f\025\uff2f\026" +
    "\uff2f\027\uff2f\030\uff2f\033\uff2f\034\uff2f\036\uff2f\041\uff2f" +
    "\042\uff2f\043\uff2f\044\uff2f\045\uff2f\046\uff2f\056\uff2f\057" +
    "\uff2f\060\uff2f\061\uff2f\062\uff2f\063\uff2f\064\uff2f\065\uff2f" +
    "\066\uff2f\067\uff2f\070\uff2f\071\uff2f\072\uff2f\073\uff2f\074" +
    "\uff2f\075\uff2f\076\uff2f\100\uff2f\101\uff2f\102\uff2f\103\uff2f" +
    "\104\uff2f\105\uff2f\106\uff2f\107\uff2f\110\uff2f\111\uff2f\112" +
    "\uff2f\113\uff2f\115\uff2f\117\uff2f\120\uff2f\122\uff2f\123\uff2f" +
    "\124\uff2f\125\uff2f\127\uff2f\130\uff2f\132\uff2f\134\uff2f\135" +
    "\uff2f\136\uff2f\137\uff2f\140\uff2f\141\uff2f\142\uff2f\143\uff2f" +
    "\144\uff2f\145\uff2f\001\002\000\064\025\171\033\174\036" +
    "\143\042\151\060\121\061\163\065\124\066\161\072\170" +
    "\073\123\101\160\102\157\103\136\113\155\127\113\130" +
    "\176\132\125\135\115\136\134\140\167\141\142\142\132" +
    "\143\117\144\010\145\150\001\002\000\064\025\171\033" +
    "\174\036\143\042\151\060\121\061\163\065\124\066\161" +
    "\072\170\073\123\101\160\102\157\103\136\113\155\127" +
    "\113\130\176\132\125\135\115\136\134\140\167\141\142" +
    "\142\132\143\117\144\010\145\150\001\002\000\126\025" +
    "\uff71\026\uff71\030\uff71\033\uff71\034\uff71\036\uff71\041\uff71" +
    "\042\uff71\045\uff71\060\uff71\061\uff71\062\uff71\063\uff71\065" +
    "\uff71\066\uff71\070\uff71\071\uff71\072\uff71\073\uff71\100\uff71" +
    "\101\uff71\102\uff71\103\uff71\112\uff71\113\uff71\115\uff71\123" +
    "\uff71\124\uff71\125\uff71\127\uff71\130\uff71\132\uff71\134\uff71" +
    "\135\uff71\136\uff71\137\uff71\140\uff71\141\uff71\142\uff71\143" +
    "\uff71\144\uff71\145\uff71\001\002\000\122\025\uff78\026\uff78" +
    "\033\uff78\034\uff78\036\uff78\041\uff78\042\uff78\045\u0119\060" +
    "\uff78\061\uff78\062\uff78\065\uff78\066\uff78\070\uff78\071\uff78" +
    "\072\uff78\073\uff78\100\uff78\101\uff78\102\uff78\103\uff78\112" +
    "\uff78\113\uff78\115\uff78\123\uff78\124\uff78\125\uff78\127\uff78" +
    "\130\uff78\132\uff78\134\uff78\135\uff78\136\uff78\137\uff78\140" +
    "\uff78\141\uff78\142\uff78\143\uff78\144\uff78\145\uff78\001\002" +
    "\000\120\025\uff73\026\uff73\033\uff73\034\uff73\036\uff73\041" +
    "\uff73\042\uff73\060\uff73\061\uff73\062\uff73\065\uff73\066\uff73" +
    "\070\uff73\071\uff73\072\uff73\073\uff73\100\uff73\101\uff73\102" +
    "\uff73\103\uff73\112\uff73\113\uff73\115\uff73\123\uff73\124\uff73" +
    "\125\uff73\127\uff73\130\uff73\132\uff73\134\uff73\135\uff73\136" +
    "\uff73\137\uff73\140\uff73\141\uff73\142\uff73\143\uff73\144\uff73" +
    "\145\uff73\001\002\000\064\025\171\033\174\036\143\042" +
    "\151\060\121\061\163\065\124\066\161\072\170\073\123" +
    "\101\160\102\157\103\136\113\155\127\113\130\176\132" +
    "\125\135\115\136\134\140\167\141\142\142\132\143\117" +
    "\144\010\145\150\001\002\000\122\025\uff75\026\uff75\033" +
    "\uff75\034\uff75\036\uff75\041\uff75\042\uff75\045\uff75\060\uff75" +
    "\061\uff75\062\uff75\065\uff75\066\uff75\070\uff75\071\uff75\072" +
    "\uff75\073\uff75\100\uff75\101\uff75\102\uff75\103\uff75\112\uff75" +
    "\113\uff75\115\uff75\123\uff75\124\uff75\125\uff75\127\uff75\130" +
    "\uff75\132\uff75\134\uff75\135\uff75\136\uff75\137\uff75\140\uff75" +
    "\141\uff75\142\uff75\143\uff75\144\uff75\145\uff75\001\002\000" +
    "\120\025\uff74\026\uff74\033\uff74\034\uff74\036\uff74\041\uff74" +
    "\042\uff74\060\uff74\061\uff74\062\uff74\065\uff74\066\uff74\070" +
    "\uff74\071\uff74\072\uff74\073\uff74\100\uff74\101\uff74\102\uff74" +
    "\103\uff74\112\uff74\113\uff74\115\uff74\123\uff74\124\uff74\125" +
    "\uff74\127\uff74\130\uff74\132\uff74\134\uff74\135\uff74\136\uff74" +
    "\137\uff74\140\uff74\141\uff74\142\uff74\143\uff74\144\uff74\145" +
    "\uff74\001\002\000\162\025\uff54\026\uff54\030\uff54\033\uff54" +
    "\034\uff54\036\uff54\041\uff54\042\uff54\045\uff54\046\uff54\056" +
    "\uff54\057\uff54\060\uff54\061\uff54\062\uff54\063\uff54\064\uff54" +
    "\065\uff54\066\uff54\070\uff54\071\uff54\072\uff54\073\uff54\074" +
    "\uff54\075\uff54\076\uff54\100\uff54\101\uff54\102\uff54\103\uff54" +
    "\104\uff54\105\uff54\106\uff54\107\uff54\110\uff54\111\uff54\112" +
    "\uff54\113\uff54\115\uff54\117\uff54\123\uff54\124\uff54\125\uff54" +
    "\127\uff54\130\uff54\132\uff54\134\uff54\135\uff54\136\uff54\137" +
    "\uff54\140\uff54\141\uff54\142\uff54\143\uff54\144\uff54\145\uff54" +
    "\001\002\000\004\125\u011e\001\002\000\236\004\uff25\005" +
    "\uff25\006\uff25\007\uff25\010\uff25\011\uff25\012\uff25\013\uff25" +
    "\014\uff25\015\uff25\016\uff25\017\uff25\020\uff25\021\uff25\022" +
    "\uff25\023\uff25\025\uff25\026\uff25\027\uff25\030\uff25\033\uff25" +
    "\034\uff25\036\uff25\041\uff25\042\uff25\043\uff25\044\uff25\045" +
    "\uff25\046\uff25\056\uff25\057\uff25\060\uff25\061\uff25\062\uff25" +
    "\063\uff25\064\uff25\065\uff25\066\uff25\067\uff25\070\uff25\071" +
    "\uff25\072\uff25\073\uff25\074\uff25\075\uff25\076\uff25\100\uff25" +
    "\101\uff25\102\uff25\103\uff25\104\uff25\105\uff25\106\uff25\107" +
    "\uff25\110\uff25\111\uff25\112\uff25\113\uff25\115\uff25\117\uff25" +
    "\120\uff25\122\uff25\123\uff25\124\uff25\125\uff25\127\uff25\130" +
    "\uff25\132\uff25\134\uff25\135\uff25\136\uff25\137\uff25\140\uff25" +
    "\141\uff25\142\uff25\143\uff25\144\uff25\145\uff25\001\002\000" +
    "\162\025\uff56\026\uff56\030\uff56\033\uff56\034\uff56\036\uff56" +
    "\041\uff56\042\uff56\045\uff56\046\uff56\056\uff56\057\uff56\060" +
    "\uff56\061\uff56\062\uff56\063\uff56\064\uff56\065\uff56\066\uff56" +
    "\070\uff56\071\uff56\072\uff56\073\uff56\074\uff56\075\uff56\076" +
    "\uff56\100\uff56\101\uff56\102\uff56\103\uff56\104\uff56\105\uff56" +
    "\106\uff56\107\uff56\110\uff56\111\uff56\112\uff56\113\uff56\115" +
    "\uff56\117\uff56\123\uff56\124\uff56\125\uff56\127\uff56\130\uff56" +
    "\132\uff56\134\uff56\135\uff56\136\uff56\137\uff56\140\uff56\141" +
    "\uff56\142\uff56\143\uff56\144\uff56\145\uff56\001\002\000\162" +
    "\025\uff60\026\uff60\030\uff60\033\uff60\034\uff60\036\uff60\041" +
    "\uff60\042\uff60\045\uff60\046\uff60\056\uff60\057\uff60\060\uff60" +
    "\061\uff60\062\uff60\063\uff60\064\uff60\065\uff60\066\uff60\070" +
    "\uff60\071\uff60\072\uff60\073\uff60\074\uff60\075\uff60\076\233" +
    "\100\uff60\101\uff60\102\uff60\103\uff60\104\uff60\105\uff60\106" +
    "\uff60\107\uff60\110\uff60\111\uff60\112\uff60\113\uff60\115\uff60" +
    "\117\232\123\uff60\124\uff60\125\uff60\127\uff60\130\uff60\132" +
    "\uff60\134\uff60\135\uff60\136\uff60\137\uff60\140\uff60\141\uff60" +
    "\142\uff60\143\uff60\144\uff60\145\uff60\001\002\000\162\025" +
    "\uff5c\026\uff5c\030\uff5c\033\uff5c\034\uff5c\036\uff5c\041\uff5c" +
    "\042\uff5c\045\uff5c\046\uff5c\056\uff5c\057\uff5c\060\uff5c\061" +
    "\uff5c\062\uff5c\063\uff5c\064\uff5c\065\uff5c\066\uff5c\070\uff5c" +
    "\071\uff5c\072\uff5c\073\uff5c\074\uff5c\075\uff5c\076\233\100" +
    "\uff5c\101\uff5c\102\uff5c\103\uff5c\104\uff5c\105\uff5c\106\uff5c" +
    "\107\uff5c\110\uff5c\111\uff5c\112\uff5c\113\uff5c\115\uff5c\117" +
    "\232\123\uff5c\124\uff5c\125\uff5c\127\uff5c\130\uff5c\132\uff5c" +
    "\134\uff5c\135\uff5c\136\uff5c\137\uff5c\140\uff5c\141\uff5c\142" +
    "\uff5c\143\uff5c\144\uff5c\145\uff5c\001\002\000\026\041\106" +
    "\042\100\050\102\116\101\123\uff96\124\uff96\125\uff96\127" +
    "\014\141\013\144\010\001\002\000\010\123\uff94\124\uff94" +
    "\125\uff94\001\002\000\006\040\u0125\041\026\001\002\000" +
    "\102\025\171\026\146\033\174\036\143\042\151\060\121" +
    "\061\163\065\124\066\161\070\164\071\145\072\170\073" +
    "\123\100\154\101\160\102\157\103\136\112\140\113\155" +
    "\127\113\130\176\132\125\134\162\135\115\136\134\137" +
    "\147\140\167\141\142\142\132\143\117\144\010\145\150" +
    "\001\002\000\016\034\uff9b\041\uff9b\066\uff9b\123\uff9b\124" +
    "\uff9b\125\uff9b\001\002\000\006\040\u0128\041\026\001\002" +
    "\000\102\025\171\026\146\033\174\036\143\042\151\060" +
    "\121\061\163\065\124\066\161\070\164\071\145\072\170" +
    "\073\123\100\154\101\160\102\157\103\136\112\140\113" +
    "\155\127\113\130\176\132\125\134\162\135\115\136\134" +
    "\137\147\140\167\141\142\142\132\143\117\144\010\145" +
    "\150\001\002\000\016\034\uff9c\041\uff9c\066\uff9c\123\uff9c" +
    "\124\uff9c\125\uff9c\001\002\000\004\125\u012b\001\002\000" +
    "\004\066\074\001\002\000\034\002\uffc8\024\uffc8\032\uffc8" +
    "\037\uffc8\053\uffc8\055\uffc8\060\uffc8\072\uffc8\113\uffc8\121" +
    "\uffc8\126\uffc8\131\uffc8\135\uffc8\001\002\000\010\127\014" +
    "\141\013\144\010\001\002\000\010\066\074\067\u0131\073" +
    "\u0130\001\002\000\034\002\uffc3\024\uffc3\032\uffc3\037\uffc3" +
    "\053\uffc3\055\uffc3\060\uffc3\072\uffc3\113\uffc3\121\uffc3\126" +
    "\uffc3\131\uffc3\135\uffc3\001\002\000\022\041\106\042\100" +
    "\050\102\116\101\125\uff96\127\014\141\013\144\010\001" +
    "\002\000\022\041\106\042\100\050\102\116\101\124\uff96" +
    "\127\014\141\013\144\010\001\002\000\004\124\u0133\001" +
    "\002\000\004\066\074\001\002\000\034\002\uffc4\024\uffc4" +
    "\032\uffc4\037\uffc4\053\uffc4\055\uffc4\060\uffc4\072\uffc4\113" +
    "\uffc4\121\uffc4\126\uffc4\131\uffc4\135\uffc4\001\002\000\004" +
    "\125\u0136\001\002\000\004\066\074\001\002\000\034\002" +
    "\uffc5\024\uffc5\032\uffc5\037\uffc5\053\uffc5\055\uffc5\060\uffc5" +
    "\072\uffc5\113\uffc5\121\uffc5\126\uffc5\131\uffc5\135\uffc5\001" +
    "\002\000\004\066\074\001\002\000\034\002\ufff6\024\ufff6" +
    "\032\ufff6\037\ufff6\053\ufff6\055\ufff6\060\ufff6\072\ufff6\113" +
    "\ufff6\121\ufff6\126\ufff6\131\ufff6\135\ufff6\001\002\000\034" +
    "\002\ufff5\024\ufff5\032\ufff5\037\ufff5\053\ufff5\055\ufff5\060" +
    "\ufff5\072\ufff5\113\ufff5\121\ufff5\126\ufff5\131\ufff5\135\ufff5" +
    "\001\002\000\014\066\uffec\067\u013f\127\uffec\141\uffec\144" +
    "\uffec\001\002\000\004\144\u013d\001\002\000\014\066\uffed" +
    "\067\uffed\127\uffed\141\uffed\144\uffed\001\002\000\012\066" +
    "\074\127\014\141\013\144\010\001\002\000\016\102\044" +
    "\127\014\132\045\141\013\143\043\144\010\001\002\000" +
    "\006\041\047\124\u0141\001\002\000\012\066\uffeb\127\uffeb" +
    "\141\uffeb\144\uffeb\001\002\000\040\002\uffe6\024\uffe6\032" +
    "\uffe6\037\uffe6\051\u0146\053\uffe6\054\u0147\055\uffe6\060\uffe6" +
    "\072\uffe6\113\uffe6\121\uffe6\126\uffe6\131\uffe6\135\uffe6\001" +
    "\002\000\040\002\uffe6\024\uffe6\032\uffe6\037\uffe6\051\u0146" +
    "\053\uffe6\054\u0147\055\uffe6\060\uffe6\072\uffe6\113\uffe6\121" +
    "\uffe6\126\uffe6\131\uffe6\135\uffe6\001\002\000\034\002\uffe7" +
    "\024\uffe7\032\uffe7\037\uffe7\053\uffe7\055\uffe7\060\uffe7\072" +
    "\uffe7\113\uffe7\121\uffe7\126\uffe7\131\uffe7\135\uffe7\001\002" +
    "\000\034\002\uffe1\024\uffe1\032\uffe1\037\uffe1\053\uffe1\055" +
    "\uffe1\060\uffe1\072\uffe1\113\uffe1\121\uffe1\126\uffe1\131\uffe1" +
    "\135\uffe1\001\002\000\004\145\u0161\001\002\000\006\047" +
    "\u0148\145\u014a\001\002\000\004\145\u015a\001\002\000\040" +
    "\002\uffe6\024\uffe6\032\uffe6\037\uffe6\041\u0156\051\u0146\053" +
    "\uffe6\055\uffe6\060\uffe6\072\uffe6\113\uffe6\121\uffe6\126\uffe6" +
    "\131\uffe6\135\uffe6\001\002\000\056\002\uffe6\024\uffe6\032" +
    "\uffe6\035\u014d\037\uffe6\051\u0146\053\uffe6\055\uffe6\060\uffe6" +
    "\065\u014c\072\uffe6\102\u0152\113\uffe6\121\uffe6\126\uffe6\127" +
    "\u0150\131\uffe6\132\u0153\135\uffe6\141\013\143\u0151\144\010" +
    "\001\002\000\040\002\uffe0\024\uffe0\032\uffe0\037\uffe0\041" +
    "\uffe0\051\uffe0\053\uffe0\055\uffe0\060\uffe0\072\uffe0\113\uffe0" +
    "\121\uffe0\126\uffe0\131\uffe0\135\uffe0\001\002\000\040\002" +
    "\uffdb\024\uffdb\032\uffdb\037\uffdb\041\uffdb\051\uffdb\053\uffdb" +
    "\055\uffdb\060\uffdb\072\uffdb\113\uffdb\121\uffdb\126\uffdb\131" +
    "\uffdb\135\uffdb\001\002\000\006\047\u0148\145\u0155\001\002" +
    "\000\034\002\uffe4\024\uffe4\032\uffe4\037\uffe4\053\uffe4\055" +
    "\uffe4\060\uffe4\072\uffe4\113\uffe4\121\uffe4\126\uffe4\131\uffe4" +
    "\135\uffe4\001\002\000\040\002\uffdd\024\uffdd\032\uffdd\037" +
    "\uffdd\041\uffdd\051\uffdd\053\uffdd\055\uffdd\060\uffdd\072\uffdd" +
    "\113\uffdd\121\uffdd\126\uffdd\131\uffdd\135\uffdd\001\002\000" +
    "\042\002\uffd9\024\uffd9\032\uffd9\037\uffd9\041\uffd9\051\uffd9" +
    "\053\uffd9\055\uffd9\060\uffd9\072\uffd9\113\uffd9\121\uffd9\126" +
    "\uffd9\131\uffd9\133\015\135\uffd9\001\002\000\040\002\uffd7" +
    "\024\uffd7\032\uffd7\037\uffd7\041\uffd7\051\uffd7\053\uffd7\055" +
    "\uffd7\060\uffd7\072\uffd7\113\uffd7\121\uffd7\126\uffd7\131\uffd7" +
    "\135\uffd7\001\002\000\040\002\uffd3\024\uffd3\032\uffd3\037" +
    "\uffd3\041\uffd3\051\uffd3\053\uffd3\055\uffd3\060\uffd3\072\uffd3" +
    "\113\uffd3\121\uffd3\126\uffd3\131\uffd3\135\uffd3\001\002\000" +
    "\040\002\uffd5\024\uffd5\032\uffd5\037\uffd5\041\uffd5\051\uffd5" +
    "\053\uffd5\055\uffd5\060\uffd5\072\uffd5\113\uffd5\121\uffd5\126" +
    "\uffd5\131\uffd5\135\uffd5\001\002\000\040\002\uffe6\024\uffe6" +
    "\032\uffe6\037\uffe6\041\u0156\051\u0146\053\uffe6\055\uffe6\060" +
    "\uffe6\072\uffe6\113\uffe6\121\uffe6\126\uffe6\131\uffe6\135\uffe6" +
    "\001\002\000\020\065\u014c\102\u0152\127\u0150\132\u0153\141" +
    "\013\143\u0151\144\010\001\002\000\006\047\u0148\145\u0155" +
    "\001\002\000\034\002\uffe3\024\uffe3\032\uffe3\037\uffe3\053" +
    "\uffe3\055\uffe3\060\uffe3\072\uffe3\113\uffe3\121\uffe3\126\uffe3" +
    "\131\uffe3\135\uffe3\001\002\000\040\002\uffdf\024\uffdf\032" +
    "\uffdf\037\uffdf\041\uffdf\051\uffdf\053\uffdf\055\uffdf\060\uffdf" +
    "\072\uffdf\113\uffdf\121\uffdf\126\uffdf\131\uffdf\135\uffdf\001" +
    "\002\000\034\002\uffe2\024\uffe2\032\uffe2\037\uffe2\053\uffe2" +
    "\055\uffe2\060\uffe2\072\uffe2\113\uffe2\121\uffe2\126\uffe2\131" +
    "\uffe2\135\uffe2\001\002\000\020\065\u015b\102\u015f\127\u015d" +
    "\132\u0160\141\013\143\u015e\144\010\001\002\000\040\002" +
    "\uffdc\024\uffdc\032\uffdc\037\uffdc\041\uffdc\051\uffdc\053\uffdc" +
    "\055\uffdc\060\uffdc\072\uffdc\113\uffdc\121\uffdc\126\uffdc\131" +
    "\uffdc\135\uffdc\001\002\000\040\002\uffde\024\uffde\032\uffde" +
    "\037\uffde\041\uffde\051\uffde\053\uffde\055\uffde\060\uffde\072" +
    "\uffde\113\uffde\121\uffde\126\uffde\131\uffde\135\uffde\001\002" +
    "\000\042\002\uffda\024\uffda\032\uffda\037\uffda\041\uffda\051" +
    "\uffda\053\uffda\055\uffda\060\uffda\072\uffda\113\uffda\121\uffda" +
    "\126\uffda\131\uffda\133\015\135\uffda\001\002\000\040\002" +
    "\uffd8\024\uffd8\032\uffd8\037\uffd8\041\uffd8\051\uffd8\053\uffd8" +
    "\055\uffd8\060\uffd8\072\uffd8\113\uffd8\121\uffd8\126\uffd8\131" +
    "\uffd8\135\uffd8\001\002\000\040\002\uffd4\024\uffd4\032\uffd4" +
    "\037\uffd4\041\uffd4\051\uffd4\053\uffd4\055\uffd4\060\uffd4\072" +
    "\uffd4\113\uffd4\121\uffd4\126\uffd4\131\uffd4\135\uffd4\001\002" +
    "\000\040\002\uffd6\024\uffd6\032\uffd6\037\uffd6\041\uffd6\051" +
    "\uffd6\053\uffd6\055\uffd6\060\uffd6\072\uffd6\113\uffd6\121\uffd6" +
    "\126\uffd6\131\uffd6\135\uffd6\001\002\000\034\002\uffe5\024" +
    "\uffe5\032\uffe5\037\uffe5\053\uffe5\055\uffe5\060\uffe5\072\uffe5" +
    "\113\uffe5\121\uffe5\126\uffe5\131\uffe5\135\uffe5\001\002\000" +
    "\034\002\uffe8\024\uffe8\032\uffe8\037\uffe8\053\uffe8\055\uffe8" +
    "\060\uffe8\072\uffe8\113\uffe8\121\uffe8\126\uffe8\131\uffe8\135" +
    "\uffe8\001\002\000\014\066\uffec\067\u013f\127\uffec\141\uffec" +
    "\144\uffec\001\002\000\012\066\074\127\014\141\013\144" +
    "\010\001\002\000\040\002\uffe6\024\uffe6\032\uffe6\037\uffe6" +
    "\051\u0146\053\uffe6\054\u0147\055\uffe6\060\uffe6\072\uffe6\113" +
    "\uffe6\121\uffe6\126\uffe6\131\uffe6\135\uffe6\001\002\000\040" +
    "\002\uffe6\024\uffe6\032\uffe6\037\uffe6\051\u0146\053\uffe6\054" +
    "\u0147\055\uffe6\060\uffe6\072\uffe6\113\uffe6\121\uffe6\126\uffe6" +
    "\131\uffe6\135\uffe6\001\002\000\034\002\uffea\024\uffea\032" +
    "\uffea\037\uffea\053\uffea\055\uffea\060\uffea\072\uffea\113\uffea" +
    "\121\uffea\126\uffea\131\uffea\135\uffea\001\002\000\034\002" +
    "\uffe9\024\uffe9\032\uffe9\037\uffe9\053\uffe9\055\uffe9\060\uffe9" +
    "\072\uffe9\113\uffe9\121\uffe9\126\uffe9\131\uffe9\135\uffe9\001" +
    "\002\000\014\024\u016f\072\u016d\113\u016a\131\u016e\135\u016c" +
    "\001\002\000\014\024\uffbd\072\uffbd\113\uffbd\131\uffbd\135" +
    "\uffbd\001\002\000\014\024\uffba\072\uffba\113\uffba\131\uffba" +
    "\135\uffba\001\002\000\014\024\uffbc\072\uffbc\113\uffbc\131" +
    "\uffbc\135\uffbc\001\002\000\014\024\uffbe\072\uffbe\113\uffbe" +
    "\131\uffbe\135\uffbe\001\002\000\010\127\014\141\013\144" +
    "\010\001\002\000\014\024\uffbf\072\uffbf\113\uffbf\131\uffbf" +
    "\135\uffbf\001\002\000\012\041\026\052\u0172\064\u0171\066" +
    "\uffb4\001\002\000\016\102\u0180\127\014\132\u0181\141\013" +
    "\143\u017f\144\010\001\002\000\016\102\u017b\127\014\132" +
    "\u017a\141\013\143\u017c\144\010\001\002\000\004\066\u0174" +
    "\001\002\000\022\041\106\042\100\050\102\116\101\123" +
    "\uff96\127\014\141\013\144\010\001\002\000\004\123\u0176" +
    "\001\002\000\036\002\uff90\024\uff90\032\uff90\037\uff90\053" +
    "\uff90\055\uff90\060\uff90\066\074\072\uff90\113\uff90\121\uff90" +
    "\126\uff90\131\uff90\135\uff90\001\002\000\034\002\uffc0\024" +
    "\uffc0\032\uffc0\037\uffc0\053\uffc0\055\uffc0\060\uffc0\072\uffc0" +
    "\113\uffc0\121\uffc0\126\uffc0\131\uffc0\135\uffc0\001\002\000" +
    "\034\002\uff8f\024\uff8f\032\uff8f\037\uff8f\053\uff8f\055\uff8f" +
    "\060\uff8f\072\uff8f\113\uff8f\121\uff8f\126\uff8f\131\uff8f\135" +
    "\uff8f\001\002\000\004\066\uffb9\001\002\000\004\066\uffb7" +
    "\001\002\000\004\066\uffb6\001\002\000\004\066\uffb8\001" +
    "\002\000\006\066\uffb5\117\u0182\001\002\000\006\066\uffab" +
    "\117\uffab\001\002\000\006\066\uffaa\117\uffaa\001\002\000" +
    "\006\066\uffa8\117\uffa8\001\002\000\006\066\uffa9\117\uffa9" +
    "\001\002\000\016\102\u0185\127\014\132\u0183\141\013\143" +
    "\u0186\144\010\001\002\000\006\066\uffa5\117\uffa5\001\002" +
    "\000\006\066\uffa7\117\uffa7\001\002\000\006\066\uffa4\117" +
    "\uffa4\001\002\000\006\066\uffa6\117\uffa6\001\002\000\004" +
    "\066\074\001\002\000\034\002\ufff4\024\ufff4\032\ufff4\037" +
    "\ufff4\053\ufff4\055\ufff4\060\ufff4\072\ufff4\113\ufff4\121\ufff4" +
    "\126\ufff4\131\ufff4\135\ufff4\001\002\000\034\002\ufff3\024" +
    "\ufff3\032\ufff3\037\ufff3\053\ufff3\055\ufff3\060\ufff3\072\ufff3" +
    "\113\ufff3\121\ufff3\126\ufff3\131\ufff3\135\ufff3\001\002\000" +
    "\014\024\uffc1\072\uffc1\113\uffc1\131\uffc1\135\uffc1\001\002" +
    "\000\034\002\ufff1\024\ufff1\032\ufff1\037\ufff1\053\ufff1\055" +
    "\ufff1\060\ufff1\072\ufff1\113\ufff1\121\ufff1\126\ufff1\131\ufff1" +
    "\135\ufff1\001\002\000\004\044\u019d\001\002\000\012\040" +
    "\u018e\044\uffd2\067\u0190\073\u018f\001\002\000\102\025\171" +
    "\026\146\033\174\036\143\042\151\060\121\061\163\065" +
    "\124\066\161\070\164\071\145\072\170\073\123\100\154" +
    "\101\160\102\157\103\136\112\140\113\155\127\113\130" +
    "\176\132\125\134\162\135\115\136\134\137\147\140\167" +
    "\141\142\142\132\143\117\144\010\145\150\001\002\000" +
    "\022\041\106\042\100\050\102\116\101\125\uff96\127\014" +
    "\141\013\144\010\001\002\000\022\041\106\042\100\050" +
    "\102\116\101\124\uff96\127\014\141\013\144\010\001\002" +
    "\000\004\124\u0192\001\002\000\004\040\u0193\001\002\000" +
    "\102\025\171\026\146\033\174\036\143\042\151\060\121" +
    "\061\163\065\124\066\161\070\164\071\145\072\170\073" +
    "\123\100\154\101\160\102\157\103\136\112\140\113\155" +
    "\127\113\130\176\132\125\134\162\135\115\136\134\137" +
    "\147\140\167\141\142\142\132\143\117\144\010\145\150" +
    "\001\002\000\004\066\074\001\002\000\034\002\uffcd\024" +
    "\uffcd\032\uffcd\037\uffcd\053\uffcd\055\uffcd\060\uffcd\072\uffcd" +
    "\113\uffcd\121\uffcd\126\uffcd\131\uffcd\135\uffcd\001\002\000" +
    "\004\125\u0197\001\002\000\004\040\u0198\001\002\000\102" +
    "\025\171\026\146\033\174\036\143\042\151\060\121\061" +
    "\163\065\124\066\161\070\164\071\145\072\170\073\123" +
    "\100\154\101\160\102\157\103\136\112\140\113\155\127" +
    "\113\130\176\132\125\134\162\135\115\136\134\137\147" +
    "\140\167\141\142\142\132\143\117\144\010\145\150\001" +
    "\002\000\004\066\074\001\002\000\034\002\uffce\024\uffce" +
    "\032\uffce\037\uffce\053\uffce\055\uffce\060\uffce\072\uffce\113" +
    "\uffce\121\uffce\126\uffce\131\uffce\135\uffce\001\002\000\004" +
    "\066\074\001\002\000\034\002\uffcc\024\uffcc\032\uffcc\037" +
    "\uffcc\053\uffcc\055\uffcc\060\uffcc\072\uffcc\113\uffcc\121\uffcc" +
    "\126\uffcc\131\uffcc\135\uffcc\001\002\000\010\127\014\141" +
    "\013\144\010\001\002\000\010\040\u019f\067\u01a1\073\u01a0" +
    "\001\002\000\102\025\171\026\146\033\174\036\143\042" +
    "\151\060\121\061\163\065\124\066\161\070\164\071\145" +
    "\072\170\073\123\100\154\101\160\102\157\103\136\112" +
    "\140\113\155\127\113\130\176\132\125\134\162\135\115" +
    "\136\134\137\147\140\167\141\142\142\132\143\117\144" +
    "\010\145\150\001\002\000\022\041\106\042\100\050\102" +
    "\116\101\125\uff96\127\014\141\013\144\010\001\002\000" +
    "\022\041\106\042\100\050\102\116\101\124\uff96\127\014" +
    "\141\013\144\010\001\002\000\004\124\u01a3\001\002\000" +
    "\004\040\u01a4\001\002\000\102\025\171\026\146\033\174" +
    "\036\143\042\151\060\121\061\163\065\124\066\161\070" +
    "\164\071\145\072\170\073\123\100\154\101\160\102\157" +
    "\103\136\112\140\113\155\127\113\130\176\132\125\134" +
    "\162\135\115\136\134\137\147\140\167\141\142\142\132" +
    "\143\117\144\010\145\150\001\002\000\004\066\074\001" +
    "\002\000\034\002\uffca\024\uffca\032\uffca\037\uffca\053\uffca" +
    "\055\uffca\060\uffca\072\uffca\113\uffca\121\uffca\126\uffca\131" +
    "\uffca\135\uffca\001\002\000\004\125\u01a8\001\002\000\004" +
    "\040\u01a9\001\002\000\102\025\171\026\146\033\174\036" +
    "\143\042\151\060\121\061\163\065\124\066\161\070\164" +
    "\071\145\072\170\073\123\100\154\101\160\102\157\103" +
    "\136\112\140\113\155\127\113\130\176\132\125\134\162" +
    "\135\115\136\134\137\147\140\167\141\142\142\132\143" +
    "\117\144\010\145\150\001\002\000\004\066\074\001\002" +
    "\000\034\002\uffcb\024\uffcb\032\uffcb\037\uffcb\053\uffcb\055" +
    "\uffcb\060\uffcb\072\uffcb\113\uffcb\121\uffcb\126\uffcb\131\uffcb" +
    "\135\uffcb\001\002\000\004\066\074\001\002\000\034\002" +
    "\uffc9\024\uffc9\032\uffc9\037\uffc9\053\uffc9\055\uffc9\060\uffc9" +
    "\072\uffc9\113\uffc9\121\uffc9\126\uffc9\131\uffc9\135\uffc9\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table =
    unpackFromStrings(new String[] {
    "\000\u01ab\000\006\036\003\065\005\001\001\000\004\045" +
    "\030\001\001\000\006\037\010\040\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\040\015\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\040\021\001\001\000\002" +
    "\001\001\000\010\037\023\040\011\041\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\037\027\040\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\044" +
    "\031\050\032\001\001\000\002\001\001\000\006\030\060" +
    "\055\054\001\001\000\006\037\034\040\011\001\001\000" +
    "\002\001\001\000\006\037\053\040\011\001\001\000\014" +
    "\037\040\040\011\061\045\062\041\063\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\037\040\040\011\061\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\037\052\040\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\026\u018b\027\u018a\037\u018c\040\011\001\001\000" +
    "\006\037\u0189\040\011\001\001\000\010\020\u0187\037\u0186" +
    "\040\011\001\001\000\004\060\u0168\001\001\000\004\006" +
    "\u0162\001\001\000\004\006\u013a\001\001\000\010\020\u0138" +
    "\037\u0137\040\011\001\001\000\012\026\066\037\067\040" +
    "\011\051\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\062\002\130\003\164\004\171" +
    "\005\152\013\174\014\140\015\115\017\327\020\121\022" +
    "\324\031\134\032\125\033\136\034\172\037\117\040\011" +
    "\042\165\043\113\046\132\047\143\052\176\053\127\070" +
    "\151\071\126\001\001\000\002\001\001\000\014\010\102" +
    "\012\u0129\037\023\040\011\041\103\001\001\000\014\010" +
    "\102\012\104\037\023\040\011\041\103\001\001\000\010" +
    "\037\023\040\011\041\336\001\001\000\010\037\023\040" +
    "\011\041\u0126\001\001\000\010\037\023\040\011\041\u0123" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\010\102\012\106\037\023\040\011\041\103" +
    "\001\001\000\002\001\001\000\004\020\110\001\001\000" +
    "\002\001\001\000\060\002\130\003\164\004\171\005\152" +
    "\013\174\014\140\015\115\017\155\020\121\031\134\032" +
    "\125\033\136\034\172\037\117\040\011\042\165\043\113" +
    "\046\132\047\143\052\176\053\127\070\151\071\126\001" +
    "\001\000\036\003\164\004\171\013\174\014\140\020\121" +
    "\034\172\037\117\040\011\043\113\047\143\052\176\053" +
    "\127\070\u0120\071\126\001\001\000\002\001\001\000\036" +
    "\003\164\004\171\013\174\014\140\020\121\034\172\037" +
    "\117\040\011\043\113\047\143\052\176\053\127\070\u011f" +
    "\071\126\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\003\164\004\171\013\174\014\140" +
    "\020\121\034\172\037\117\040\011\043\u011e\047\143\052" +
    "\176\053\127\071\126\001\001\000\002\001\001\000\060" +
    "\002\130\003\164\004\171\005\152\013\174\014\140\015" +
    "\115\017\u011c\020\121\031\134\032\125\033\136\034\172" +
    "\037\117\040\011\042\165\043\113\046\132\047\143\052" +
    "\176\053\127\070\151\071\126\001\001\000\034\003\164" +
    "\004\171\013\174\014\140\020\121\034\172\037\117\040" +
    "\011\043\u011b\047\143\052\176\053\127\071\126\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\003\164\020\121" +
    "\037\117\040\011\071\u0112\001\001\000\002\001\001\000" +
    "\014\003\164\020\121\037\117\040\011\071\u010d\001\001" +
    "\000\002\001\001\000\042\003\164\004\171\005\152\013" +
    "\174\014\140\020\121\034\172\037\117\040\011\042\u010c" +
    "\043\113\047\143\052\176\053\127\070\151\071\126\001" +
    "\001\000\002\001\001\000\014\010\317\011\u010a\037\023" +
    "\040\011\041\103\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\003\164\020\121\037\117\040\011\071\u0109" +
    "\001\001\000\002\001\001\000\014\010\317\011\u0105\037" +
    "\023\040\011\041\103\001\001\000\014\010\317\011\u0103" +
    "\037\023\040\011\041\103\001\001\000\014\010\317\011" +
    "\u0101\037\023\040\011\041\103\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\010\317\011\347\037\023\040\011\041\103\001\001" +
    "\000\036\003\164\004\171\013\174\014\140\020\121\034" +
    "\172\037\117\040\011\043\113\047\143\052\176\053\127" +
    "\070\346\071\126\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\003\164\004\171\013\174\014\140\020\121" +
    "\034\172\037\117\040\011\043\113\047\143\052\176\053" +
    "\127\070\345\071\126\001\001\000\070\002\130\003\164" +
    "\004\171\005\152\010\317\011\331\013\174\014\140\015" +
    "\115\017\327\020\121\022\324\031\134\032\125\033\136" +
    "\034\172\037\325\040\011\041\103\042\165\043\113\046" +
    "\132\047\143\052\176\053\127\070\151\071\126\001\001" +
    "\000\014\010\317\011\320\037\023\040\011\041\103\001" +
    "\001\000\002\001\001\000\010\035\306\037\305\040\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\003" +
    "\164\004\171\013\174\014\140\020\121\034\172\037\117" +
    "\040\011\043\304\047\143\052\176\053\127\071\126\001" +
    "\001\000\036\003\164\004\171\013\174\014\140\020\121" +
    "\034\172\037\117\040\011\043\113\047\143\052\176\053" +
    "\127\070\303\071\126\001\001\000\036\003\164\004\171" +
    "\013\174\014\140\020\121\034\172\037\117\040\011\043" +
    "\113\047\143\052\176\053\127\070\302\071\126\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\037\277\040" +
    "\011\001\001\000\002\001\001\000\036\003\164\004\171" +
    "\013\174\014\140\020\121\034\172\037\117\040\011\043" +
    "\113\047\143\052\176\053\127\070\230\071\126\001\001" +
    "\000\002\001\001\000\020\003\164\004\203\014\140\020" +
    "\121\037\117\040\011\071\126\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\064\002\130\003\164\004\171\005\152\013\174\014\140" +
    "\015\115\017\213\020\121\024\214\025\212\031\134\032" +
    "\125\033\136\034\172\037\117\040\011\042\165\043\113" +
    "\046\132\047\143\052\176\053\127\070\151\071\126\001" +
    "\001\000\014\003\164\020\121\037\117\040\011\071\211" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\060\002\130\003" +
    "\164\004\171\005\152\013\174\014\140\015\115\017\217" +
    "\020\121\031\134\032\125\033\136\034\172\037\117\040" +
    "\011\042\165\043\113\046\132\047\143\052\176\053\127" +
    "\070\151\071\126\001\001\000\002\001\001\000\004\040" +
    "\015\001\001\000\002\001\001\000\064\002\130\003\164" +
    "\004\171\005\152\013\174\014\140\015\115\017\213\020" +
    "\121\024\223\025\212\031\134\032\125\033\136\034\172" +
    "\037\117\040\011\042\165\043\113\046\132\047\143\052" +
    "\176\053\127\070\151\071\126\001\001\000\002\001\001" +
    "\000\002\001\001\000\064\002\130\003\164\004\171\005" +
    "\152\013\174\014\140\015\115\017\213\020\121\024\226" +
    "\025\212\031\134\032\125\033\136\034\172\037\117\040" +
    "\011\042\165\043\113\046\132\047\143\052\176\053\127" +
    "\070\151\071\126\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\003\164\004\171\013\174" +
    "\014\140\020\121\034\172\037\117\040\011\043\234\047" +
    "\143\052\176\053\127\071\126\001\001\000\034\003\164" +
    "\004\171\013\174\014\140\020\121\034\172\037\117\040" +
    "\011\043\233\047\143\052\176\053\127\071\126\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\003\164\004" +
    "\171\013\174\014\140\020\121\037\117\040\011\052\176" +
    "\053\276\071\126\001\001\000\022\003\164\004\171\014" +
    "\140\020\121\037\117\040\011\052\275\071\126\001\001" +
    "\000\026\003\164\004\171\013\174\014\140\020\121\037" +
    "\117\040\011\052\176\053\274\071\126\001\001\000\026" +
    "\003\164\004\171\013\174\014\140\020\121\037\117\040" +
    "\011\052\176\053\273\071\126\001\001\000\026\003\164" +
    "\004\171\013\174\014\140\020\121\037\117\040\011\052" +
    "\176\053\272\071\126\001\001\000\026\003\164\004\171" +
    "\013\174\014\140\020\121\037\117\040\011\052\176\053" +
    "\271\071\126\001\001\000\026\003\164\004\171\013\174" +
    "\014\140\020\121\037\117\040\011\052\176\053\270\071" +
    "\126\001\001\000\026\003\164\004\171\013\174\014\140" +
    "\020\121\037\117\040\011\052\176\053\267\071\126\001" +
    "\001\000\026\003\164\004\171\013\174\014\140\020\121" +
    "\037\117\040\011\052\176\053\266\071\126\001\001\000" +
    "\026\003\164\004\171\013\174\014\140\020\121\037\117" +
    "\040\011\052\176\053\265\071\126\001\001\000\026\003" +
    "\164\004\171\013\174\014\140\020\121\037\117\040\011" +
    "\052\176\053\264\071\126\001\001\000\026\003\164\004" +
    "\171\013\174\014\140\020\121\037\117\040\011\052\176" +
    "\053\263\071\126\001\001\000\026\003\164\004\171\013" +
    "\174\014\140\020\121\037\117\040\011\052\176\053\262" +
    "\071\126\001\001\000\026\003\164\004\171\013\174\014" +
    "\140\020\121\037\117\040\011\052\176\053\261\071\126" +
    "\001\001\000\026\003\164\004\171\013\174\014\140\020" +
    "\121\037\117\040\011\052\176\053\260\071\126\001\001" +
    "\000\026\003\164\004\171\013\174\014\140\020\121\037" +
    "\117\040\011\052\176\053\257\071\126\001\001\000\026" +
    "\003\164\004\171\013\174\014\140\020\121\037\117\040" +
    "\011\052\176\053\256\071\126\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\003\164\004\171\013\174\014\140" +
    "\020\121\037\117\040\011\052\176\053\301\071\126\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\060\002\130\003\164\004\171\005\152\013\174\014\140" +
    "\015\115\017\310\020\121\031\134\032\125\033\136\034" +
    "\172\037\117\040\011\042\165\043\113\046\132\047\143" +
    "\052\176\053\127\070\151\071\126\001\001\000\006\020" +
    "\314\023\312\001\001\000\010\035\316\037\305\040\011" +
    "\001\001\000\002\001\001\000\060\002\130\003\164\004" +
    "\171\005\152\013\174\014\140\015\115\017\315\020\121" +
    "\031\134\032\125\033\136\034\172\037\117\040\011\042" +
    "\165\043\113\046\132\047\143\052\176\053\127\070\151" +
    "\071\126\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\020\314\023\322" +
    "\001\001\000\012\010\323\037\023\040\011\041\103\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\037\023\040\011\041\336\001" +
    "\001\000\062\002\130\003\164\004\171\005\152\013\174" +
    "\014\140\015\115\017\327\020\121\022\335\031\134\032" +
    "\125\033\136\034\172\037\117\040\011\042\165\043\113" +
    "\046\132\047\143\052\176\053\127\070\151\071\126\001" +
    "\001\000\002\001\001\000\006\020\314\023\332\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\064\002\130\003\164" +
    "\004\171\005\152\013\174\014\140\015\115\017\213\020" +
    "\121\024\340\025\212\031\134\032\125\033\136\034\172" +
    "\037\117\040\011\042\165\043\113\046\132\047\143\052" +
    "\176\053\127\070\151\071\126\001\001\000\002\001\001" +
    "\000\002\001\001\000\060\002\130\003\164\004\171\005" +
    "\152\013\174\014\140\015\115\017\343\020\121\031\134" +
    "\032\125\033\136\034\172\037\117\040\011\042\165\043" +
    "\113\046\132\047\143\052\176\053\127\070\151\071\126" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\020\314\023\350\001\001" +
    "\000\002\001\001\000\036\003\164\004\171\013\174\014" +
    "\140\020\121\034\172\037\117\040\011\043\113\047\143" +
    "\052\176\053\127\070\u0100\071\126\001\001\000\036\003" +
    "\164\004\171\013\174\014\140\020\121\034\172\037\117" +
    "\040\011\043\113\047\143\052\176\053\127\070\377\071" +
    "\126\001\001\000\036\003\164\004\171\013\174\014\140" +
    "\020\121\034\172\037\117\040\011\043\113\047\143\052" +
    "\176\053\127\070\376\071\126\001\001\000\036\003\164" +
    "\004\171\013\174\014\140\020\121\034\172\037\117\040" +
    "\011\043\113\047\143\052\176\053\127\070\375\071\126" +
    "\001\001\000\036\003\164\004\171\013\174\014\140\020" +
    "\121\034\172\037\117\040\011\043\113\047\143\052\176" +
    "\053\127\070\374\071\126\001\001\000\036\003\164\004" +
    "\171\013\174\014\140\020\121\034\172\037\117\040\011" +
    "\043\113\047\143\052\176\053\127\070\373\071\126\001" +
    "\001\000\036\003\164\004\171\013\174\014\140\020\121" +
    "\034\172\037\117\040\011\043\113\047\143\052\176\053" +
    "\127\070\372\071\126\001\001\000\036\003\164\004\171" +
    "\013\174\014\140\020\121\034\172\037\117\040\011\043" +
    "\113\047\143\052\176\053\127\070\371\071\126\001\001" +
    "\000\036\003\164\004\171\013\174\014\140\020\121\034" +
    "\172\037\117\040\011\043\113\047\143\052\176\053\127" +
    "\070\370\071\126\001\001\000\036\003\164\004\171\013" +
    "\174\014\140\020\121\034\172\037\117\040\011\043\113" +
    "\047\143\052\176\053\127\070\367\071\126\001\001\000" +
    "\036\003\164\004\171\013\174\014\140\020\121\034\172" +
    "\037\117\040\011\043\113\047\143\052\176\053\127\070" +
    "\366\071\126\001\001\000\036\003\164\004\171\013\174" +
    "\014\140\020\121\034\172\037\117\040\011\043\113\047" +
    "\143\052\176\053\127\070\365\071\126\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\020\314\023\u0102" +
    "\001\001\000\002\001\001\000\006\020\314\023\u0104\001" +
    "\001\000\002\001\001\000\006\020\314\023\u0106\001\001" +
    "\000\002\001\001\000\030\003\164\004\171\013\174\014" +
    "\140\020\121\034\u0108\037\117\040\011\052\176\053\127" +
    "\071\126\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\020\314\023\u010b\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\054\002\130\003\164\004" +
    "\171\005\152\013\174\014\140\015\u010f\020\121\031\134" +
    "\032\125\033\136\034\172\037\117\040\011\042\165\043" +
    "\113\047\143\052\176\053\127\070\151\071\126\001\001" +
    "\000\002\001\001\000\052\002\130\003\164\004\171\005" +
    "\152\013\174\014\140\020\121\031\u0111\032\125\033\136" +
    "\034\172\037\117\040\011\042\165\043\113\047\143\052" +
    "\176\053\127\070\151\071\126\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\002\130\003\164\004\171\005" +
    "\152\013\174\014\140\020\121\031\u0117\032\u0116\033\136" +
    "\034\172\037\117\040\011\042\165\043\113\047\143\052" +
    "\176\053\127\070\151\071\126\001\001\000\042\003\164" +
    "\004\171\005\152\013\174\014\140\020\121\034\172\037" +
    "\117\040\011\042\u0115\043\113\047\143\052\176\053\127" +
    "\070\151\071\126\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\050\002\130\003\164\004\171" +
    "\005\152\013\174\014\140\020\121\032\u0119\033\u011a\034" +
    "\172\037\117\040\011\042\165\043\113\047\143\052\176" +
    "\053\127\070\151\071\126\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\010\102\012\u0122\037\023\040\011\041\103" +
    "\001\001\000\002\001\001\000\002\001\001\000\060\002" +
    "\130\003\164\004\171\005\152\013\174\014\140\015\115" +
    "\017\u0125\020\121\031\134\032\125\033\136\034\172\037" +
    "\117\040\011\042\165\043\113\046\132\047\143\052\176" +
    "\053\127\070\151\071\126\001\001\000\002\001\001\000" +
    "\002\001\001\000\060\002\130\003\164\004\171\005\152" +
    "\013\174\014\140\015\115\017\u0128\020\121\031\134\032" +
    "\125\033\136\034\172\037\117\040\011\042\165\043\113" +
    "\046\132\047\143\052\176\053\127\070\151\071\126\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\u012b" +
    "\001\001\000\002\001\001\000\006\037\u012d\040\011\001" +
    "\001\000\004\020\u012e\001\001\000\002\001\001\000\014" +
    "\010\102\012\u0134\037\023\040\011\041\103\001\001\000" +
    "\014\010\102\012\u0131\037\023\040\011\041\103\001\001" +
    "\000\002\001\001\000\004\020\u0133\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\u0136\001\001\000\002" +
    "\001\001\000\004\020\u0139\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\u013d\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\020\u0142\037\u0141\040\011\001" +
    "\001\000\012\037\040\040\011\061\045\062\u013f\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\016\u0144\054" +
    "\u0161\001\001\000\006\016\u0144\054\u0143\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\066" +
    "\u0148\067\u014a\001\001\000\002\001\001\000\004\016\u0158" +
    "\001\001\000\010\016\u014d\037\u014e\040\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\066\u0153\067\u014a" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\u0156\001\001\000\006\037\u014e\040\011\001" +
    "\001\000\004\067\u0157\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\037\u015b\040\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\u0163\001\001" +
    "\000\010\020\u0165\037\u0164\040\011\001\001\000\006\016" +
    "\u0144\054\u0167\001\001\000\006\016\u0144\054\u0166\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\057\u016a\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\037\023\040\011\041\u016f\001" +
    "\001\000\002\001\001\000\004\056\u0172\001\001\000\010" +
    "\037\u017d\040\011\064\u017c\001\001\000\006\037\u0178\040" +
    "\011\001\001\000\002\001\001\000\014\010\102\012\u0174" +
    "\037\023\040\011\041\103\001\001\000\002\001\001\000" +
    "\006\020\u0177\021\u0176\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\037\u0183\040\011\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\u0188\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\060\002\130\003\164\004\171\005\152\013\174" +
    "\014\140\015\115\017\u019a\020\121\031\134\032\125\033" +
    "\136\034\172\037\117\040\011\042\165\043\113\046\132" +
    "\047\143\052\176\053\127\070\151\071\126\001\001\000" +
    "\014\010\102\012\u0195\037\023\040\011\041\103\001\001" +
    "\000\014\010\102\012\u0190\037\023\040\011\041\103\001" +
    "\001\000\002\001\001\000\002\001\001\000\060\002\130" +
    "\003\164\004\171\005\152\013\174\014\140\015\115\017" +
    "\u0193\020\121\031\134\032\125\033\136\034\172\037\117" +
    "\040\011\042\165\043\113\046\132\047\143\052\176\053" +
    "\127\070\151\071\126\001\001\000\004\020\u0194\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\060\002\130\003\164\004\171\005\152\013\174\014\140" +
    "\015\115\017\u0198\020\121\031\134\032\125\033\136\034" +
    "\172\037\117\040\011\042\165\043\113\046\132\047\143" +
    "\052\176\053\127\070\151\071\126\001\001\000\004\020" +
    "\u0199\001\001\000\002\001\001\000\004\020\u019b\001\001" +
    "\000\002\001\001\000\006\037\u019d\040\011\001\001\000" +
    "\002\001\001\000\060\002\130\003\164\004\171\005\152" +
    "\013\174\014\140\015\115\017\u01ab\020\121\031\134\032" +
    "\125\033\136\034\172\037\117\040\011\042\165\043\113" +
    "\046\132\047\143\052\176\053\127\070\151\071\126\001" +
    "\001\000\014\010\102\012\u01a6\037\023\040\011\041\103" +
    "\001\001\000\014\010\102\012\u01a1\037\023\040\011\041" +
    "\103\001\001\000\002\001\001\000\002\001\001\000\060" +
    "\002\130\003\164\004\171\005\152\013\174\014\140\015" +
    "\115\017\u01a4\020\121\031\134\032\125\033\136\034\172" +
    "\037\117\040\011\042\165\043\113\046\132\047\143\052" +
    "\176\053\127\070\151\071\126\001\001\000\004\020\u01a5" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\060\002\130\003\164\004\171\005\152\013\174" +
    "\014\140\015\115\017\u01a9\020\121\031\134\032\125\033" +
    "\136\034\172\037\117\040\011\042\165\043\113\046\132" +
    "\047\143\052\176\053\127\070\151\071\126\001\001\000" +
    "\004\020\u01aa\001\001\000\002\001\001\000\004\020\u01ac" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CompParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CompParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup_11a.runtime.Symbol do_action(
    int                        act_num,
    java_cup_11a.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CompParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




  public Module alloymodule=null;
  public String alloyfile="";

  @SuppressWarnings("unchecked")
  @Override public Symbol parse() throws java.lang.Exception {
     int act; // current action code
     Symbol lhs_sym = null; // the Symbol/stack element returned by a reduce
     short handle_size, lhs_sym_num; // information about production being reduced with
     production_tab = production_table();
     action_tab     = action_table();
     reduce_tab     = reduce_table();
     init_actions();
     user_init();
     // start
     cur_token = scan();
     stack.removeAllElements();
     stack.push(getSymbolFactory().startSymbol("START", 0, start_state()));
     tos = 0;
     for (_done_parsing = false; !_done_parsing; ) {
        act = get_action(((Symbol)stack.peek()).parse_state, cur_token.sym);
        if (act > 0) { // "shift"; thus, we shift to the encoded state by pushing it on the stack
           cur_token.parse_state = act-1;
           stack.push(cur_token);
           tos++;
           cur_token = scan();
        } else if (act<0) { // "reduce"
           lhs_sym = do_action((-act)-1, this, stack, tos);
           lhs_sym_num = production_tab[(-act)-1][0];
           handle_size = production_tab[(-act)-1][1];
           for (int i = 0; i < handle_size; i++)  {  stack.pop(); tos--; }
           act = get_reduce(((Symbol)stack.peek()).parse_state, lhs_sym_num);
           lhs_sym.parse_state = act;
           stack.push(lhs_sym);
           tos++;
        } else { // "error"
           syntax_error(cur_token);
           done_parsing();
        }
     }
     return lhs_sym;
  }

  private Pos alloypos(Symbol x) {
    if (x==null) return null;
    if (x.value instanceof Pos) return (Pos)(x.value);
    if (x.value instanceof Exp) return ((Exp)(x.value)).pos;
    return x.pos;
  }

  public void syntax_error(Symbol x) throws Err {
    Map<Integer,String> ch=new LinkedHashMap<Integer,String>();
    ch.put(CompSym.ABSTRACT        , "abstract");
    ch.put(CompSym.ALL             , "all");
    ch.put(CompSym.ALL2            , "all");
    ch.put(CompSym.ANY_ARROW_LONE  , "set");
    ch.put(CompSym.ANY_ARROW_ONE   , "set");
    ch.put(CompSym.ANY_ARROW_SOME  , "set");
    ch.put(CompSym.AS              , "as");
    ch.put(CompSym.ASSERT          , "assert");
    ch.put(CompSym.BUT             , "but");
    ch.put(CompSym.CHECK           , "check");
    ch.put(CompSym.ELSE            , "else");
    ch.put(CompSym.EXACTLY         , "exactly");
    ch.put(CompSym.EXPECT          , "expect");
    ch.put(CompSym.EXTENDS         , "extends");
    ch.put(CompSym.FACT            , "fact");
    ch.put(CompSym.FOR             , "for");
    ch.put(CompSym.FUN             , "fun");
    ch.put(CompSym.ID              , "NAME");
    ch.put(CompSym.IDEN            , "iden");
    ch.put(CompSym.IN              , "in");
    ch.put(CompSym.INT             , "int");
    ch.put(CompSym.LET             , "let");
    ch.put(CompSym.LONE            , "lone");
    ch.put(CompSym.LONE2           , "lone");
    ch.put(CompSym.LONE_ARROW_ANY  , "lone");
    ch.put(CompSym.LONE_ARROW_LONE , "lone");
    ch.put(CompSym.LONE_ARROW_ONE  , "lone");
    ch.put(CompSym.LONE_ARROW_SOME , "lone");
    ch.put(CompSym.MODULE          , "module");
    ch.put(CompSym.NO              , "no");
    ch.put(CompSym.NO2             , "no");
    ch.put(CompSym.NONE            , "none");
    ch.put(CompSym.NUMBER          , "NUMBER");
    ch.put(CompSym.ONE             , "one");
    ch.put(CompSym.ONE2            , "one");
    ch.put(CompSym.ONE_ARROW_ANY   , "one");
    ch.put(CompSym.ONE_ARROW_LONE  , "one");
    ch.put(CompSym.ONE_ARROW_ONE   , "one");
    ch.put(CompSym.ONE_ARROW_SOME  , "one");
    ch.put(CompSym.OPEN            , "open");
    ch.put(CompSym.PRED            , "pred");
    ch.put(CompSym.RUN             , "run");
    ch.put(CompSym.SET             , "set");
    ch.put(CompSym.SIG             , "sig");
    ch.put(CompSym.SIGINT          , "Int");
    ch.put(CompSym.SOME            , "some");
    ch.put(CompSym.SOME2           , "some");
    ch.put(CompSym.SOME_ARROW_ANY  , "some");
    ch.put(CompSym.SOME_ARROW_LONE , "some");
    ch.put(CompSym.SOME_ARROW_ONE  , "some");
    ch.put(CompSym.SOME_ARROW_SOME , "some");
    ch.put(CompSym.SUM             , "sum");
    ch.put(CompSym.SUM2            , "sum");
    ch.put(CompSym.THIS            , "this");
    ch.put(CompSym.UNIV            , "univ");
    ch.put(CompSym.AMPERSAND       , "&");
    ch.put(CompSym.AND             , "&&");
    ch.put(CompSym.ARROW           , "->");
    ch.put(CompSym.AT              , "@");
    ch.put(CompSym.BAR             , "|");
    ch.put(CompSym.CARET           , "^");
    ch.put(CompSym.COLON           , ":");
    ch.put(CompSym.COMMA           , ",");
    ch.put(CompSym.DOMAIN          , "<:");
    ch.put(CompSym.DOT             , ".");
    ch.put(CompSym.EQUALS          , "=");
    ch.put(CompSym.GT              , ">");
    ch.put(CompSym.GTE             , ">=");
    ch.put(CompSym.HASH            , "#");
    ch.put(CompSym.IFF             , "<=>");
    ch.put(CompSym.IMPLIES         , "->");
    ch.put(CompSym.LBRACE          , "{");
    ch.put(CompSym.LBRACKET        , "[");
    ch.put(CompSym.LPAREN          , "(");
    ch.put(CompSym.LT              , "<");
    ch.put(CompSym.LTE             , "=<");
    ch.put(CompSym.MINUS           , "-");
    ch.put(CompSym.NOT             , "!");
    ch.put(CompSym.NOTEQUALS       , "!");
    ch.put(CompSym.NOTGT           , "!");
    ch.put(CompSym.NOTGTE          , "!");
    ch.put(CompSym.NOTIN           , "!");
    ch.put(CompSym.NOTLT           , "!");
    ch.put(CompSym.NOTLTE          , "!");
    ch.put(CompSym.OR              , "||");
    ch.put(CompSym.PLUS            , "+");
    ch.put(CompSym.PLUSPLUS        , "++");
    ch.put(CompSym.RANGE           , ":>");
    ch.put(CompSym.RBRACE          , "}");
    ch.put(CompSym.RBRACKET        , "]");
    ch.put(CompSym.RPAREN          , ")");
    ch.put(CompSym.SLASH           , "/");
    ch.put(CompSym.STAR            , "*");
    ch.put(CompSym.TILDE           , "~");
    TreeSet<String> list=new TreeSet<String>();
    Pos p=alloypos(x);
    if (!stack.empty()) for(Map.Entry<Integer,String> e:ch.entrySet()) {
        int key=e.getKey(), act=get_action(((Symbol)stack.peek()).parse_state, key);
        if (act==0) continue;
        try {
            if (act>0 || alloy_confirm(key)) list.add(e.getValue());
        } catch(Throwable ex) {
            // If the parser is really really confused, alloy_confirm() could fail with array out-of-bound exception, etc.
        }
    }
    String result="There are "+list.size()+" possible tokens that can appear here:\n";
    for(String item:list) result=result+item+" ";
    throw new ErrorSyntax(p, (list.size()!=0)?result:"");
  }

  private boolean alloy_confirm(int key) {
    int state = ((Symbol)stack.peek()).parse_state;
    Stack<Object> newstack=new Stack<Object>(); for(Object x:stack) newstack.push(x);
    while(true) {
      int act = get_action(state, key);
      if (act>0) return true;
      if (act==0) return false;
      int lhs_sym_num = production_tab[(-act)-1][0];
      int handle_size = production_tab[(-act)-1][1];
      for (int i = 0; i < handle_size; i++) { if (newstack.empty()) return false; newstack.pop(); }
      if (newstack.empty()) return false;
      if (newstack.peek() instanceof Symbol) state=((Symbol)newstack.peek()).parse_state;
      state=get_reduce(state, lhs_sym_num);
      newstack.push(null);
    }
  }

  static Module alloy_parseStream(Map<String,String> fc, Module world, int lineOffset, final String filename, final String prefix)
  throws Err, FileNotFoundException, IOException {
    Reader isr=null;
    try {
        if (world==null) world=new Module(null, Pos.UNKNOWN, "");
        String content=fc.get(filename);
        if (content==null) { content=Util.readAll(filename); fc.put(filename,content); }
        isr=new StringReader(content);
        Module u = world.lookupOrCreateModule(Pos.UNKNOWN, prefix);
        CompFilter s=new CompFilter(world,filename,lineOffset,new BufferedReader(isr));
        CompParser p=new CompParser(s);
        p.alloymodule=u;
        p.alloyfile=filename;
        try {p.parse();} catch(Throwable ex) {if (ex instanceof Err) throw (Err)ex; throw new ErrorFatal("Parser Exception: "+ex);}
        return u;
    } finally {
        Util.close(isr);
    }
  }


}

/** Autogenerated by CUP. */
class CUP$CompParser$actions {


    /**
     * This function is needed to handle a difficult parsing ambiguity.
     *
     * <p>
     * "some EXPR", "one EXPR", and "lone EXPR"
     * can be either formulas (saying the EXPR has at least 1, exactly 1, or at most 1 tuple),
     * or multiplicity constraints (saying something else has this multiplicity).
     *
     * <p>
     * So we let the parser generate the former by default.
     * And whenever we construct a EDecl(x,y) object,
     * or an ExprBinary.Op.IN(x,y) object, or a function return type,
     * we call this method on y to convert it into a multiplicity constraint.
     *
     * <p>
     * This is safe, because in all 3 cases, a formula would be illegal.
     * So the first form is always wrong.
     *
     * <p>
     * And this is sufficient, because those are the only 3 places
     * where a mulitplicity constraint is allowed to appear.
     *
     * @return a newly formed multiplciity constraint (if this.op==SOME or LONE or ONE),
     * otherwise it just returns the original node.
     */
    private Exp mult(Exp x) throws Err {
        if (x instanceof ExpUnary) {
           ExpUnary y=(ExpUnary)x;
           if (y.op==ExprUnary.Op.SOME) return new ExpUnary(y.pos, ExprUnary.Op.SOMEOF, y.sub);
           if (y.op==ExprUnary.Op.LONE) return new ExpUnary(y.pos, ExprUnary.Op.LONEOF, y.sub);
           if (y.op==ExprUnary.Op.ONE)  return new ExpUnary(y.pos, ExprUnary.Op.ONEOF, y.sub);
        }
        return x;
    }
    private Exp alloyTrue(Pos pos) throws Err { return new ExpConstant(pos, ExprConstant.Op.TRUE, 0); }

    private Exp t(ExpDot j, Pos close) throws Err {
      if (j.right instanceof ExpName) {
         String n=((ExpName)(j.right)).name;
         if (n.equals("int"))  return new ExpUnary(j.pos, ExprUnary.Op.CAST2INT, j.left);
         if (n.equals("disj")) return new ExpBuiltin(j.pos, close, Util.asList(j.left));
      }
      else if (j.right instanceof ExpBuiltin) {
         ExpBuiltin n=((ExpBuiltin)(j.right));
         List<Exp> args=new ArrayList<Exp>(n.args);
         args.add(j.left);
         return new ExpBuiltin(j.pos, n.closingBracket, args);
      }
      return j;
    }

  private final CompParser parser;

  /** Constructor */
  CUP$CompParser$actions(CompParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
@SuppressWarnings("unchecked") public final java_cup_11a.runtime.Symbol CUP$CompParser$do_action(
    int                        CUP$CompParser$act_num,
    java_cup_11a.runtime.lr_parser CUP$CompParser$parser,
    java.util.Stack            CUP$CompParser$stack,
    int                        CUP$CompParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup_11a.runtime.Symbol CUP$CompParser$result;

      /* select the action based on the action number */
      switch (CUP$CompParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // BaseExpr ::= LBRACE Declp RBRACE
            {
              Exp RESULT =null;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        List<Decl> a = (List<Decl>)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Pos c = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpQuant(o, c, ExprQuant.Op.COMPREHENSION, a, alloyTrue(c));
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",1, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // BaseExpr ::= LBRACE Declp SuperOrBar RBRACE
            {
              Exp RESULT =null;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
        List<Decl> a = (List<Decl>)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Pos c = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpQuant(o, c, ExprQuant.Op.COMPREHENSION, a, b);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",1, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // BaseExpr ::= Super
            {
              Exp RESULT =null;
        Exp x = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=x;
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",1, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // BaseExpr ::= Name
            {
              Exp RESULT =null;
        ExpName x = (ExpName)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=x;
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",1, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // BaseExpr ::= AT Name
            {
              Exp RESULT =null;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        ExpName x = (ExpName)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpName(o.merge(x.pos), "@"+x.name);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",1, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // BaseExpr ::= LPAREN Expr RPAREN
            {
              Exp RESULT =null;
        Exp x = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
         RESULT=x;
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",1, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // BaseExpr ::= THIS
            {
              Exp RESULT =null;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpName(o, "this");
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",1, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // BaseExpr ::= NONE
            {
              Exp RESULT =null;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpName(o, "none");
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",1, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // BaseExpr ::= SEQ SLASH SIGINT
            {
              Exp RESULT =null;
        Pos a = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        Pos b = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpName(a.merge(b), "seq/Int");
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",1, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // BaseExpr ::= SIGINT
            {
              Exp RESULT =null;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpName(o, "Int");
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",1, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // BaseExpr ::= UNIV
            {
              Exp RESULT =null;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpName(o, "univ");
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",1, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // BaseExpr ::= IDEN
            {
              Exp RESULT =null;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpName(o, "iden");
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",1, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // BaseExpr ::= NUMBER
            {
              Exp RESULT =null;
        Exp x = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=x;
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BaseExpr",1, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // UnopExpr ::= CARET UnopExpr
            {
              Exp RESULT =null;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpUnary(o, ExprUnary.Op.CLOSURE,   b);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExpr",55, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // UnopExpr ::= STAR UnopExpr
            {
              Exp RESULT =null;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpUnary(o, ExprUnary.Op.RCLOSURE,  b);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExpr",55, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // UnopExpr ::= TILDE UnopExpr
            {
              Exp RESULT =null;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpUnary(o, ExprUnary.Op.TRANSPOSE, b);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExpr",55, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // UnopExpr ::= BaseExpr
            {
              Exp RESULT =null;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=b;
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnopExpr",55, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // DotExpr ::= BracketExpr DOT SUM
            {
              Exp RESULT =null;
        Exp a = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
         RESULT=new ExpUnary(o, ExprUnary.Op.CAST2INT, a);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DotExpr",10, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // DotExpr ::= BracketExpr DOT INT
            {
              Exp RESULT =null;
        Exp a = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
         RESULT=new ExpUnary(o, ExprUnary.Op.CAST2INT, a);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DotExpr",10, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // DotExpr ::= BracketExpr DOT DISJ
            {
              Exp RESULT =null;
        Exp a = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Pos b = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=t(new ExpDot(o, null, a, new ExpName(b,"disj")), null);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DotExpr",10, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // DotExpr ::= BracketExpr DOT UnopExpr
            {
              Exp RESULT =null;
        Exp a = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=t(new ExpDot(o, null, a, b),                     null);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DotExpr",10, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // DotExpr ::= UnopExpr
            {
              Exp RESULT =null;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=b;
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DotExpr",10, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // BracketExpr ::= SUM LBRACKET Exprs RBRACKET
            {
              Exp RESULT =null;
        Pos a = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
        List<Exp> b = (List<Exp>)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Pos c = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         Exp aa=new ExpName(a,"int");  for(Exp bb:b) aa=t(new ExpDot(aa.span().merge(bb.span()), c, bb, aa), c); RESULT=aa;
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BracketExpr",2, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // BracketExpr ::= INT LBRACKET Exprs RBRACKET
            {
              Exp RESULT =null;
        Pos a = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
        List<Exp> b = (List<Exp>)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Pos c = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         Exp aa=new ExpName(a,"int");  for(Exp bb:b) aa=t(new ExpDot(aa.span().merge(bb.span()), c, bb, aa), c); RESULT=aa;
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BracketExpr",2, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // BracketExpr ::= DISJ LBRACKET Exprs RBRACKET
            {
              Exp RESULT =null;
        Pos a = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
        List<Exp> b = (List<Exp>)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Pos c = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         Exp aa=new ExpName(a,"disj"); for(Exp bb:b) aa=t(new ExpDot(aa.span().merge(bb.span()), c, bb, aa), c); RESULT=aa;
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BracketExpr",2, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // BracketExpr ::= BracketExpr LBRACKET Exprs RBRACKET
            {
              Exp RESULT =null;
        Exp a = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
        List<Exp> b = (List<Exp>)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Pos c = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         Exp aa=a;                     for(Exp bb:b) aa=t(new ExpDot(aa.span().merge(bb.span()), c, bb, aa), c); RESULT=aa;
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BracketExpr",2, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // BracketExpr ::= DotExpr
            {
              Exp RESULT =null;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=b;
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("BracketExpr",2, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // RangeExpr ::= RangeExpr RANGE BracketExpr
            {
              Exp RESULT =null;
        Exp a = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpBinary(o, ExprBinary.Op.RANGE, a, b);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RangeExpr",40, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // RangeExpr ::= BracketExpr
            {
              Exp RESULT =null;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=b;
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RangeExpr",40, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // DomainExpr ::= DomainExpr DOMAIN RangeExpr
            {
              Exp RESULT =null;
        Exp a = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpBinary(o, ExprBinary.Op.DOMAIN, a, b);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DomainExpr",9, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // DomainExpr ::= RangeExpr
            {
              Exp RESULT =null;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=b;
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("DomainExpr",9, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // RelationExpr ::= DomainExpr LONE_ARROW_LONE RelationExpr
            {
              Exp RESULT =null;
        Exp a = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpBinary(o, ExprBinary.Op.LONE_ARROW_LONE,a,b);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelationExpr",41, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // RelationExpr ::= DomainExpr LONE_ARROW_ONE RelationExpr
            {
              Exp RESULT =null;
        Exp a = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpBinary(o, ExprBinary.Op.LONE_ARROW_ONE ,a,b);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelationExpr",41, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // RelationExpr ::= DomainExpr LONE_ARROW_SOME RelationExpr
            {
              Exp RESULT =null;
        Exp a = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpBinary(o, ExprBinary.Op.LONE_ARROW_SOME,a,b);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelationExpr",41, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // RelationExpr ::= DomainExpr LONE_ARROW_ANY RelationExpr
            {
              Exp RESULT =null;
        Exp a = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpBinary(o, ExprBinary.Op.LONE_ARROW_ANY ,a,b);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelationExpr",41, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // RelationExpr ::= DomainExpr ONE_ARROW_LONE RelationExpr
            {
              Exp RESULT =null;
        Exp a = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpBinary(o, ExprBinary.Op.ONE_ARROW_LONE ,a,b);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelationExpr",41, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // RelationExpr ::= DomainExpr ONE_ARROW_ONE RelationExpr
            {
              Exp RESULT =null;
        Exp a = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpBinary(o, ExprBinary.Op.ONE_ARROW_ONE  ,a,b);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelationExpr",41, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // RelationExpr ::= DomainExpr ONE_ARROW_SOME RelationExpr
            {
              Exp RESULT =null;
        Exp a = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpBinary(o, ExprBinary.Op.ONE_ARROW_SOME ,a,b);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelationExpr",41, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // RelationExpr ::= DomainExpr ONE_ARROW_ANY RelationExpr
            {
              Exp RESULT =null;
        Exp a = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpBinary(o, ExprBinary.Op.ONE_ARROW_ANY  ,a,b);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelationExpr",41, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // RelationExpr ::= DomainExpr SOME_ARROW_LONE RelationExpr
            {
              Exp RESULT =null;
        Exp a = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpBinary(o, ExprBinary.Op.SOME_ARROW_LONE,a,b);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelationExpr",41, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // RelationExpr ::= DomainExpr SOME_ARROW_ONE RelationExpr
            {
              Exp RESULT =null;
        Exp a = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpBinary(o, ExprBinary.Op.SOME_ARROW_ONE ,a,b);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelationExpr",41, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // RelationExpr ::= DomainExpr SOME_ARROW_SOME RelationExpr
            {
              Exp RESULT =null;
        Exp a = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpBinary(o, ExprBinary.Op.SOME_ARROW_SOME,a,b);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelationExpr",41, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // RelationExpr ::= DomainExpr SOME_ARROW_ANY RelationExpr
            {
              Exp RESULT =null;
        Exp a = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpBinary(o, ExprBinary.Op.SOME_ARROW_ANY ,a,b);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelationExpr",41, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // RelationExpr ::= DomainExpr ANY_ARROW_LONE RelationExpr
            {
              Exp RESULT =null;
        Exp a = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpBinary(o, ExprBinary.Op.ANY_ARROW_LONE ,a,b);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelationExpr",41, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // RelationExpr ::= DomainExpr ANY_ARROW_ONE RelationExpr
            {
              Exp RESULT =null;
        Exp a = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpBinary(o, ExprBinary.Op.ANY_ARROW_ONE  ,a,b);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelationExpr",41, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // RelationExpr ::= DomainExpr ANY_ARROW_SOME RelationExpr
            {
              Exp RESULT =null;
        Exp a = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpBinary(o, ExprBinary.Op.ANY_ARROW_SOME ,a,b);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelationExpr",41, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // RelationExpr ::= DomainExpr ARROW RelationExpr
            {
              Exp RESULT =null;
        Exp a = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpBinary(o, ExprBinary.Op.ARROW          ,a,b);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelationExpr",41, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // RelationExpr ::= DomainExpr
            {
              Exp RESULT =null;
        Exp a = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=a;
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("RelationExpr",41, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // IntersectExpr ::= IntersectExpr AMPERSAND RelationExpr
            {
              Exp RESULT =null;
        Exp a = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpBinary(o, ExprBinary.Op.INTERSECT, a, b);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("IntersectExpr",26, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // IntersectExpr ::= RelationExpr
            {
              Exp RESULT =null;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=b;
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("IntersectExpr",26, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // OverrideExpr ::= OverrideExpr PLUSPLUS IntersectExpr
            {
              Exp RESULT =null;
        Exp a = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpBinary(o, ExprBinary.Op.PLUSPLUS, a, b);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OverrideExpr",37, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // OverrideExpr ::= IntersectExpr
            {
              Exp RESULT =null;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=b;
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OverrideExpr",37, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // NumUnopExpr ::= INT NumUnopExpr
            {
              Exp RESULT =null;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpUnary(o, ExprUnary.Op.CAST2INT,    b);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExpr",33, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // NumUnopExpr ::= SUM NumUnopExpr
            {
              Exp RESULT =null;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpUnary(o, ExprUnary.Op.CAST2INT,    b);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExpr",33, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // NumUnopExpr ::= HASH NumUnopExpr
            {
              Exp RESULT =null;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpUnary(o, ExprUnary.Op.CARDINALITY, b);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExpr",33, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // NumUnopExpr ::= OverrideExpr
            {
              Exp RESULT =null;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=b;
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NumUnopExpr",33, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // UnionDiffExpr ::= UnionDiffExpr MINUS NumUnopExpr
            {
              Exp RESULT =null;
        Exp a = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpBinary(o, ExprBinary.Op.MINUS, a, b);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExpr",54, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // UnionDiffExpr ::= UnionDiffExpr PLUS NumUnopExpr
            {
              Exp RESULT =null;
        Exp a = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpBinary(o, ExprBinary.Op.PLUS,  a, b);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExpr",54, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // UnionDiffExpr ::= NumUnopExpr
            {
              Exp RESULT =null;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=b;
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("UnionDiffExpr",54, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // CompareExpr ::= UnionDiffExpr
            {
              Exp RESULT =null;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=b;
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExpr",3, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // CompareExpr ::= SEQ UnionDiffExpr
            {
              Exp RESULT =null;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpBinary(o, ExprBinary.Op.ISSEQ_ARROW_LONE, new ExpName(null,"seq/Int"), b); parser.alloymodule.addOpen(o, "util/sequniv", new ArrayList<ExpName>(), "seq");
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExpr",3, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // CompareExpr ::= SET UnionDiffExpr
            {
              Exp RESULT =null;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpUnary(o, ExprUnary.Op.SETOF, b);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExpr",3, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // CompareExpr ::= ONE UnionDiffExpr
            {
              Exp RESULT =null;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpUnary(o, ExprUnary.Op.ONE,   b);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExpr",3, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // CompareExpr ::= LONE UnionDiffExpr
            {
              Exp RESULT =null;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpUnary(o, ExprUnary.Op.LONE,  b);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExpr",3, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // CompareExpr ::= SOME UnionDiffExpr
            {
              Exp RESULT =null;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpUnary(o, ExprUnary.Op.SOME,  b);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExpr",3, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // CompareExpr ::= NO UnionDiffExpr
            {
              Exp RESULT =null;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpUnary(o, ExprUnary.Op.NO,    b);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExpr",3, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // CompareExpr ::= ALL UnionDiffExpr
            {
              Exp RESULT =null;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
         if (1==1) throw new ErrorSyntax(o,"The \"all x\" construct is no longer supported. If you know the range of possible values of x, consider rewriting it as \"x == set_of_all_possible_values\".");
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExpr",3, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // CompareExpr ::= CompareExpr NOTGTE UnionDiffExpr
            {
              Exp RESULT =null;
        Exp a = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpBinary(o, ExprBinary.Op.LT,a,b);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExpr",3, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // CompareExpr ::= CompareExpr NOTLTE UnionDiffExpr
            {
              Exp RESULT =null;
        Exp a = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpBinary(o, ExprBinary.Op.GT,a,b);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExpr",3, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // CompareExpr ::= CompareExpr NOTGT UnionDiffExpr
            {
              Exp RESULT =null;
        Exp a = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpBinary(o, ExprBinary.Op.LTE,a,b);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExpr",3, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // CompareExpr ::= CompareExpr NOTLT UnionDiffExpr
            {
              Exp RESULT =null;
        Exp a = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpBinary(o, ExprBinary.Op.GTE,a,b);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExpr",3, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // CompareExpr ::= CompareExpr NOTIN UnionDiffExpr
            {
              Exp RESULT =null;
        Exp a = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpBinary(o, ExprBinary.Op.IN,a,mult(b)).not();
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExpr",3, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // CompareExpr ::= CompareExpr NOTEQUALS UnionDiffExpr
            {
              Exp RESULT =null;
        Exp a = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpBinary(o, ExprBinary.Op.EQUALS,a,b).not();
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExpr",3, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // CompareExpr ::= CompareExpr GTE UnionDiffExpr
            {
              Exp RESULT =null;
        Exp a = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpBinary(o, ExprBinary.Op.GTE,a,b);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExpr",3, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // CompareExpr ::= CompareExpr LTE UnionDiffExpr
            {
              Exp RESULT =null;
        Exp a = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpBinary(o, ExprBinary.Op.LTE,a,b);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExpr",3, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // CompareExpr ::= CompareExpr GT UnionDiffExpr
            {
              Exp RESULT =null;
        Exp a = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpBinary(o, ExprBinary.Op.GT,a,b);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExpr",3, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // CompareExpr ::= CompareExpr LT UnionDiffExpr
            {
              Exp RESULT =null;
        Exp a = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpBinary(o, ExprBinary.Op.LT,a,b);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExpr",3, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // CompareExpr ::= CompareExpr IN UnionDiffExpr
            {
              Exp RESULT =null;
        Exp a = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpBinary(o, ExprBinary.Op.IN,a,mult(b));
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExpr",3, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // CompareExpr ::= CompareExpr EQUALS UnionDiffExpr
            {
              Exp RESULT =null;
        Exp a = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpBinary(o, ExprBinary.Op.EQUALS,a,b);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CompareExpr",3, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // NegExpr ::= NOT NegExpr
            {
              Exp RESULT =null;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpUnary(o, ExprUnary.Op.NOT, b);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NegExpr",32, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // NegExpr ::= CompareExpr
            {
              Exp RESULT =null;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=b;
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NegExpr",32, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // AndExpr ::= AndExpr AND NegExpr
            {
              Exp RESULT =null;
        Exp a = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpBinary(o, ExprBinary.Op.AND, a, b);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("AndExpr",0, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // AndExpr ::= NegExpr
            {
              Exp RESULT =null;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=b;
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("AndExpr",0, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // ImpliesExprOpen ::= AndExpr IMPLIES ImpliesExpr
            {
              Exp RESULT =null;
        Exp a = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpBinary(o, ExprBinary.Op.OR, a.not(), b);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprOpen",25, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // ImpliesExprOpen ::= AndExpr IMPLIES ImpliesExprClose ELSE ImpliesExprOpen
            {
              Exp RESULT =null;
        Exp a = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        Exp c = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpITE(a,b,c);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprOpen",25, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // ImpliesExprClose ::= AndExpr IMPLIES ImpliesExprClose ELSE ImpliesExprClose
            {
              Exp RESULT =null;
        Exp a = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        Exp c = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpITE(a,b,c);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprClose",24, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // ImpliesExprClose ::= AndExpr
            {
              Exp RESULT =null;
        Exp a = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=a;
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExprClose",24, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // ImpliesExpr ::= ImpliesExprOpen
            {
              Exp RESULT =null;
        Exp a = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=a;
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExpr",23, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // ImpliesExpr ::= ImpliesExprClose
            {
              Exp RESULT =null;
        Exp a = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=a;
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("ImpliesExpr",23, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // EquivExpr ::= EquivExpr IFF ImpliesExpr
            {
              Exp RESULT =null;
        Exp a = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpBinary(o, ExprBinary.Op.IFF, a, b);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("EquivExpr",11, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // EquivExpr ::= ImpliesExpr
            {
              Exp RESULT =null;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=b;
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("EquivExpr",11, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // OrExpr ::= OrExpr OR EquivExpr
            {
              Exp RESULT =null;
        Exp a = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpBinary(o, ExprBinary.Op.OR, a, b);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OrExpr",36, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // OrExpr ::= EquivExpr
            {
              Exp RESULT =null;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=b;
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("OrExpr",36, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Expr ::= SUM2 Declp SuperOrBar
            {
              Exp RESULT =null;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        List<Decl> a = (List<Decl>)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpQuant(o, null, ExprQuant.Op.SUM,  a, b);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Expr",13, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Expr ::= ONE2 Declp SuperOrBar
            {
              Exp RESULT =null;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        List<Decl> a = (List<Decl>)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpQuant(o, null, ExprQuant.Op.ONE,  a, b);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Expr",13, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Expr ::= LONE2 Declp SuperOrBar
            {
              Exp RESULT =null;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        List<Decl> a = (List<Decl>)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpQuant(o, null, ExprQuant.Op.LONE, a, b);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Expr",13, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Expr ::= SOME2 Declp SuperOrBar
            {
              Exp RESULT =null;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        List<Decl> a = (List<Decl>)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpQuant(o, null, ExprQuant.Op.SOME, a, b);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Expr",13, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Expr ::= NO2 Declp SuperOrBar
            {
              Exp RESULT =null;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        List<Decl> a = (List<Decl>)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpQuant(o, null, ExprQuant.Op.NO,   a, b);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Expr",13, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Expr ::= ALL2 Declp SuperOrBar
            {
              Exp RESULT =null;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        List<Decl> a = (List<Decl>)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpQuant(o, null, ExprQuant.Op.ALL,  a, b);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Expr",13, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Expr ::= LET Let
            {
              Exp RESULT =null;
        Exp x = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=x;
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Expr",13, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Expr ::= OrExpr
            {
              Exp RESULT =null;
        Exp x = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=x;
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Expr",13, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Exprp ::= Exprp COMMA Expr
            {
              List<Exp> RESULT =null;
        List<Exp> a = (List<Exp>)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         a.add(b); RESULT=a;
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Exprp",19, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Exprp ::= Expr
            {
              List<Exp> RESULT =null;
        Exp x = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ArrayList<Exp>(); RESULT.add(x);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Exprp",19, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Exprs ::= Exprp
            {
              List<Exp> RESULT =null;
        List<Exp> x = (List<Exp>)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=x;
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Exprs",18, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Exprs ::=
            {
              List<Exp> RESULT =null;
         RESULT=new ArrayList<Exp>();
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Exprs",18, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // SuperOrBar ::= Super
            {
              Exp RESULT =null;
        Exp x = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=x;
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SuperOrBar",17, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // SuperOrBar ::= BAR Expr
            {
              Exp RESULT =null;
        Exp x = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=x;
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SuperOrBar",17, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // SuperP ::= Expr SuperP
            {
              Exp RESULT =null;
        Exp a = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpBinary(null, ExprBinary.Op.AND, a, b);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SuperP",16, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // SuperP ::= Expr
            {
              Exp RESULT =null;
        Exp a = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=a;
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SuperP",16, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Super ::= LBRACE RBRACE
            {
              Exp RESULT =null;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
         RESULT=alloyTrue(o);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Super",14, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Super ::= LBRACE SuperP RBRACE
            {
              Exp RESULT =null;
        Exp x = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
         RESULT=x;
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Super",14, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // SuperOpt ::= Super
            {
              Exp RESULT =null;
        Exp x = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=x;
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SuperOpt",15, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // SuperOpt ::=
            {
              Exp RESULT =null;
         RESULT=null;
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SuperOpt",15, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Let ::= Name EQUALS Expr COMMA Let
            {
              Exp RESULT =null;
        ExpName a = (ExpName)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        Exp x = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;

  if (a.name.indexOf('/')>=0) throw new ErrorSyntax(a.pos, "Let variable name cannot contain \'/\'");
  if (a.name.indexOf('@')>=0) throw new ErrorSyntax(a.pos, "Let variable name cannot contain \'@\'");
  RESULT = new ExpLet(o, a, b, x);

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Let",27, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Let ::= Name EQUALS Expr SuperOrBar
            {
              Exp RESULT =null;
        ExpName a = (ExpName)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Exp x = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;

  if (a.name.indexOf('/')>=0) throw new ErrorSyntax(a.pos, "Let variable name cannot contain \'/\'");
  if (a.name.indexOf('@')>=0) throw new ErrorSyntax(a.pos, "Let variable name cannot contain \'@\'");
  RESULT = new ExpLet(o, a, b, x);

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Let",27, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Decls ::= COMMA Decls
            {
              List<Decl> RESULT =null;
        List<Decl> y = (List<Decl>)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=y;
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decls",8, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Decls ::= Decla COMMA Decls
            {
              List<Decl> RESULT =null;
        Decl x = (Decl)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        List<Decl> y = (List<Decl>)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=y; RESULT.add(0,x);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decls",8, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Decls ::= Decla
            {
              List<Decl> RESULT =null;
        Decl x = (Decl)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ArrayList<Decl>(); RESULT.add(x);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decls",8, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Decls ::=
            {
              List<Decl> RESULT =null;
         RESULT=new ArrayList<Decl>();
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decls",8, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Declp ::= Decla
            {
              List<Decl> RESULT =null;
        Decl y = (Decl)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ArrayList<Decl>(); RESULT.add(y);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declp",7, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Declp ::= Declp COMMA Decla
            {
              List<Decl> RESULT =null;
        List<Decl> x = (List<Decl>)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        Decl y = (Decl)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=x; RESULT.add(y);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Declp",7, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Decla ::= Names COLON Expr
            {
              Decl RESULT =null;
        List<ExpName> a = (List<ExpName>)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new Decl(null, a, mult(b));
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",6, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Decla ::= DISJ Names COLON Expr
            {
              Decl RESULT =null;
        Pos k = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
        List<ExpName> a = (List<ExpName>)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        Exp b = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new Decl(k,    a, mult(b));
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",6, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Decla ::= EXH Names COLON Expr
            {
              Decl RESULT =null;
        Pos k = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
         if (1==1) throw ExpName.hint(k,"exh");
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",6, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Decla ::= PART Names COLON Expr
            {
              Decl RESULT =null;
        Pos k = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
         if (1==1) throw ExpName.hint(k,"part");
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Decla",6, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Names ::= Names COMMA Name
            {
              List<ExpName> RESULT =null;
        List<ExpName> a = (List<ExpName>)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        ExpName b = (ExpName)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         a.add(b); RESULT=a;
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Names",31, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Names ::= Name
            {
              List<ExpName> RESULT =null;
        ExpName x = (ExpName)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ArrayList<ExpName>(); RESULT.add(x);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Names",31, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // NameHelper ::= NameHelper SLASH ID
            {
              ExpName RESULT =null;
        ExpName a = (ExpName)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        ExpName b = (ExpName)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpName(a.pos.merge(b.pos), a.name+"/"+b.name);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NameHelper",30, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // NameHelper ::= ID
            {
              ExpName RESULT =null;
        ExpName x = (ExpName)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=x;
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("NameHelper",30, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Name ::= SEQ SLASH NameHelper
            {
              ExpName RESULT =null;
        Pos a = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        ExpName b = (ExpName)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpName(a.merge(b.pos),  "seq/"+b.name);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Name",29, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Name ::= THIS SLASH NameHelper
            {
              ExpName RESULT =null;
        Pos a = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        ExpName b = (ExpName)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpName(a.merge(b.pos), "this/"+b.name);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Name",29, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Name ::= NameHelper
            {
              ExpName RESULT =null;
        ExpName x = (ExpName)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=x;
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Name",29, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // SigRefu ::= SigRefu PLUS NONE
            {
              Pair<Pos,List<String>> RESULT =null;
        Pair<Pos,List<String>> a = (Pair<Pos,List<String>>)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        Pos b = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new Pair<Pos,List<String>>(a.a.merge(b),     a.b); RESULT.b.add("none");
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRefu",50, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // SigRefu ::= SigRefu PLUS SIGINT
            {
              Pair<Pos,List<String>> RESULT =null;
        Pair<Pos,List<String>> a = (Pair<Pos,List<String>>)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        Pos b = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new Pair<Pos,List<String>>(a.a.merge(b),     a.b); RESULT.b.add("Int");
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRefu",50, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // SigRefu ::= SigRefu PLUS UNIV
            {
              Pair<Pos,List<String>> RESULT =null;
        Pair<Pos,List<String>> a = (Pair<Pos,List<String>>)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        Pos b = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new Pair<Pos,List<String>>(a.a.merge(b),     a.b); RESULT.b.add("univ");
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRefu",50, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // SigRefu ::= SigRefu PLUS Name
            {
              Pair<Pos,List<String>> RESULT =null;
        Pair<Pos,List<String>> a = (Pair<Pos,List<String>>)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        ExpName b = (ExpName)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new Pair<Pos,List<String>>(a.a.merge(b.pos), a.b); RESULT.b.add(b.name);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRefu",50, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // SigRefu ::= NONE
            {
              Pair<Pos,List<String>> RESULT =null;
        Pos x = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new Pair<Pos,List<String>>(x,                new ArrayList<String>()); RESULT.b.add("none");
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRefu",50, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // SigRefu ::= SIGINT
            {
              Pair<Pos,List<String>> RESULT =null;
        Pos x = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new Pair<Pos,List<String>>(x,                new ArrayList<String>()); RESULT.b.add("Int");
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRefu",50, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // SigRefu ::= UNIV
            {
              Pair<Pos,List<String>> RESULT =null;
        Pos x = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new Pair<Pos,List<String>>(x,                new ArrayList<String>()); RESULT.b.add("univ");
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRefu",50, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // SigRefu ::= Name
            {
              Pair<Pos,List<String>> RESULT =null;
        ExpName x = (ExpName)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new Pair<Pos,List<String>>(x.pos,            new ArrayList<String>()); RESULT.b.add(x.name);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRefu",50, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // SigRefp ::= SigRefp COMMA SigRef
            {
              List<ExpName> RESULT =null;
        List<ExpName> a = (List<ExpName>)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        ExpName b = (ExpName)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         a.add(b); RESULT=a;
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRefp",48, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // SigRefp ::= SigRef
            {
              List<ExpName> RESULT =null;
        ExpName x = (ExpName)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ArrayList<ExpName>(); RESULT.add(x);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRefp",48, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // SigRefs ::= SigRefp
            {
              List<ExpName> RESULT =null;
        List<ExpName> x = (List<ExpName>)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=x;
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRefs",49, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SigRefs ::=
            {
              List<ExpName> RESULT =null;
         RESULT=new ArrayList<ExpName>();
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRefs",49, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SigRef ::= NONE
            {
              ExpName RESULT =null;
        Pos x = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpName(x,"none");
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRef",47, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SigRef ::= SIGINT
            {
              ExpName RESULT =null;
        Pos x = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpName(x,"Int");
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRef",47, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SigRef ::= UNIV
            {
              ExpName RESULT =null;
        Pos x = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpName(x,"univ");
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRef",47, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SigRef ::= Name
            {
              ExpName RESULT =null;
        ExpName x = (ExpName)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=x;
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigRef",47, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SigIn ::=
            {
              Pair<Pos,List<String>> RESULT =null;
         RESULT=null;
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigIn",44, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // SigIn ::= IN SigRefu
            {
              Pair<Pos,List<String>> RESULT =null;
        Pos a = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Pair<Pos,List<String>> b = (Pair<Pos,List<String>>)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new Pair<Pos,List<String>>(a.merge(b.a),   b.b);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigIn",44, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SigIn ::= EXTENDS NONE
            {
              Pair<Pos,List<String>> RESULT =null;
        Pos e = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Pos a = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new Pair<Pos,List<String>>(e.merge(a),     new ArrayList<String>()); RESULT.b.add(null); RESULT.b.add("none");
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigIn",44, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SigIn ::= EXTENDS SIGINT
            {
              Pair<Pos,List<String>> RESULT =null;
        Pos e = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Pos a = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new Pair<Pos,List<String>>(e.merge(a),     new ArrayList<String>()); RESULT.b.add(null); RESULT.b.add("Int");
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigIn",44, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SigIn ::= EXTENDS UNIV
            {
              Pair<Pos,List<String>> RESULT =null;
        Pos e = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Pos a = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new Pair<Pos,List<String>>(e.merge(a),     new ArrayList<String>()); RESULT.b.add(null); RESULT.b.add("univ");
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigIn",44, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SigIn ::= EXTENDS Name
            {
              Pair<Pos,List<String>> RESULT =null;
        Pos e = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        ExpName a = (ExpName)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new Pair<Pos,List<String>>(e.merge(a.pos), new ArrayList<String>()); RESULT.b.add(null); RESULT.b.add(a.name);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigIn",44, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SigQuals ::= SigQuals SigQual
            {
              List<Pos> RESULT =null;
        List<Pos> a = (List<Pos>)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        List<Pos> b = (List<Pos>)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=a; for(int i=0;i<4;i++) if (a.get(i)==null) a.set(i,b.get(i)); else if (b.get(i)!=null) throw new ErrorSyntax(b.get(i), "The same qualifer cannot be specified more than once for the same sig.");
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigQuals",46, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SigQuals ::=
            {
              List<Pos> RESULT =null;
         RESULT=new ArrayList<Pos>(4); RESULT.add(null); RESULT.add(null); RESULT.add(null); RESULT.add(null);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigQuals",46, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SigQual ::= SOME
            {
              List<Pos> RESULT =null;
        Pos x = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ArrayList<Pos>(4); RESULT.add(null); RESULT.add(null); RESULT.add(null); RESULT.add(x);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigQual",45, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SigQual ::= ONE
            {
              List<Pos> RESULT =null;
        Pos x = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ArrayList<Pos>(4); RESULT.add(null); RESULT.add(null); RESULT.add(x);    RESULT.add(null);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigQual",45, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SigQual ::= LONE
            {
              List<Pos> RESULT =null;
        Pos x = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ArrayList<Pos>(4); RESULT.add(null); RESULT.add(x);    RESULT.add(null); RESULT.add(null);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigQual",45, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SigQual ::= ABSTRACT
            {
              List<Pos> RESULT =null;
        Pos x = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ArrayList<Pos>(4); RESULT.add(x);    RESULT.add(null); RESULT.add(null); RESULT.add(null);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("SigQual",45, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Sig ::= Hint SigQuals SIG Names SigIn LBRACE Decls RBRACE SuperOpt
            {
              Object RESULT =null;
        List<ExpName> h = (List<ExpName>)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).value;
        List<Pos> a = (List<Pos>)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-7)).value;
        List<ExpName> b = (List<ExpName>)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
        Pair<Pos,List<String>> c = (Pair<Pos,List<String>>)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
        List<Decl> d = (List<Decl>)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        Exp e = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;

   Module.SigAST s;
   for(ExpName bbb:b) {
     String bb=bbb.name;
     if (c==null)
       s=parser.alloymodule.addSig(h, bbb.pos, bb, a.get(0)!=null, a.get(1)!=null, a.get(2)!=null, a.get(3)!=null, null,null,d,e);
     else if (c.b.get(0)==null) {
       s=parser.alloymodule.addSig(h, bbb.pos, bb, a.get(0)!=null, a.get(1)!=null, a.get(2)!=null, a.get(3)!=null, null,(String)(c.b.get(1)),d,e);
       s.extendsPosition=c.a;
       }
     else {
       s=parser.alloymodule.addSig(h, bbb.pos, bb, a.get(0)!=null, a.get(1)!=null, a.get(2)!=null, a.get(3)!=null, c.b, null, d, e);
       s.inPosition=c.a;
       }
     s.absPosition=a.get(0);
     s.lonePosition=a.get(1);
     s.onePosition=a.get(2);
     s.somePosition=a.get(3);
   }

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Sig",43, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Hint ::= HASH Name
            {
              List<ExpName> RESULT =null;
        ExpName e = (ExpName)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=Util.asList(e);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Hint",22, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Hint ::=
            {
              List<ExpName> RESULT =null;
         RESULT=null;
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Hint",22, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Predicate ::= First DOT Name Super
            {
              Object RESULT =null;
        Exp f = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
        ExpName n = (ExpName)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Exp v = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         parser.alloymodule.addFunc(n.pos, n.name, f   , new ArrayList<Decl>(), null, v);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate",39, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Predicate ::= First DOT Name LBRACKET Decls RBRACKET Super
            {
              Object RESULT =null;
        Exp f = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
        ExpName n = (ExpName)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
        List<Decl> d = (List<Decl>)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        Exp v = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         parser.alloymodule.addFunc(n.pos, n.name, f   , d                    , null, v);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate",39, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Predicate ::= First DOT Name LPAREN Decls RPAREN Super
            {
              Object RESULT =null;
        Exp f = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
        ExpName n = (ExpName)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
        List<Decl> d = (List<Decl>)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        Exp v = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         parser.alloymodule.addFunc(n.pos, n.name, f   , d                    , null, v);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate",39, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Predicate ::= Name Super
            {
              Object RESULT =null;
        ExpName n = (ExpName)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Exp v = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         parser.alloymodule.addFunc(n.pos, n.name, null, new ArrayList<Decl>(), null, v);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate",39, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Predicate ::= Name LBRACKET Decls RBRACKET Super
            {
              Object RESULT =null;
        ExpName n = (ExpName)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
        List<Decl> d = (List<Decl>)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        Exp v = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         parser.alloymodule.addFunc(n.pos, n.name, null, d                    , null, v);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate",39, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Predicate ::= Name LPAREN Decls RPAREN Super
            {
              Object RESULT =null;
        ExpName n = (ExpName)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
        List<Decl> d = (List<Decl>)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        Exp v = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         parser.alloymodule.addFunc(n.pos, n.name, null, d                    , null, v);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Predicate",39, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Function ::= First DOT Name COLON Expr Super
            {
              Object RESULT =null;
        Exp f = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
        ExpName n = (ExpName)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
        Exp r = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Exp v = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         parser.alloymodule.addFunc(n.pos, n.name, f   , new ArrayList<Decl>(), mult(r), v);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function",21, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Function ::= First DOT Name LBRACKET Decls RBRACKET COLON Expr Super
            {
              Object RESULT =null;
        Exp f = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).value;
        ExpName n = (ExpName)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
        List<Decl> d = (List<Decl>)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
        Exp r = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Exp v = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         parser.alloymodule.addFunc(n.pos, n.name, f   , d                    , mult(r), v);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function",21, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Function ::= First DOT Name LPAREN Decls RPAREN COLON Expr Super
            {
              Object RESULT =null;
        Exp f = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-8)).value;
        ExpName n = (ExpName)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
        List<Decl> d = (List<Decl>)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
        Exp r = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Exp v = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         parser.alloymodule.addFunc(n.pos, n.name, f   , d                    , mult(r), v);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function",21, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Function ::= Name COLON Expr Super
            {
              Object RESULT =null;
        ExpName n = (ExpName)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
        Exp r = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Exp v = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         parser.alloymodule.addFunc(n.pos, n.name, null, new ArrayList<Decl>(), mult(r), v);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function",21, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Function ::= Name LBRACKET Decls RBRACKET COLON Expr Super
            {
              Object RESULT =null;
        ExpName n = (ExpName)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
        List<Decl> d = (List<Decl>)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
        Exp r = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Exp v = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         parser.alloymodule.addFunc(n.pos, n.name, null, d                    , mult(r), v);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function",21, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Function ::= Name LPAREN Decls RPAREN COLON Expr Super
            {
              Object RESULT =null;
        ExpName n = (ExpName)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
        List<Decl> d = (List<Decl>)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
        Exp r = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Exp v = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         parser.alloymodule.addFunc(n.pos, n.name, null, d                    , mult(r), v);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Function",21, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // First ::= NONE
            {
              Exp RESULT =null;
        Pos x = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpName(x, "none");
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("First",20, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // First ::= SIGINT
            {
              Exp RESULT =null;
        Pos x = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpName(x, "Int");
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("First",20, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // First ::= UNIV
            {
              Exp RESULT =null;
        Pos x = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ExpName(x, "univ");
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("First",20, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // First ::= Name
            {
              Exp RESULT =null;
        ExpName x = (ExpName)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=x;
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("First",20, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Typescope ::= NUMBER NONE
            {
              List<String> RESULT =null;
        Exp a = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
         if (1==1) throw new ErrorSyntax(a.pos, "You cannot set a scope on none.");
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope",53, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Typescope ::= EXACTLY NUMBER NONE
            {
              List<String> RESULT =null;
        Exp a = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
         if (1==1) throw new ErrorSyntax(a.pos, "You cannot set a scope on none.");
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope",53, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Typescope ::= NUMBER SIGINT
            {
              List<String> RESULT =null;
        Exp a = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
         if (1==1) throw new ErrorSyntax(a.pos, "You can no longer set a scope on Int; the number of Int atoms is always exactly equal to 2^(integer bitwidth).\n");
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope",53, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Typescope ::= EXACTLY NUMBER SIGINT
            {
              List<String> RESULT =null;
        Exp a = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
         if (1==1) throw new ErrorSyntax(a.pos, "You can no longer set a scope on Int; the number of Int atoms is always exactly equal to 2^(integer bitwidth).\n");
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope",53, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Typescope ::= NUMBER UNIV
            {
              List<String> RESULT =null;
        Exp a = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
         if (1==1) throw new ErrorSyntax(a.pos, "You cannot set a scope on univ.");
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope",53, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Typescope ::= EXACTLY NUMBER UNIV
            {
              List<String> RESULT =null;
        Exp a = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
         if (1==1) throw new ErrorSyntax(a.pos, "You cannot set a scope on univ.");
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope",53, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Typescope ::= NUMBER SEQ
            {
              List<String> RESULT =null;
        Exp a = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
         RESULT=new ArrayList<String>(); RESULT.add( ""+((ExpConstant)a).num); RESULT.add("seq");
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope",53, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Typescope ::= EXACTLY NUMBER SEQ
            {
              List<String> RESULT =null;
        Exp a = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
         RESULT=new ArrayList<String>(); RESULT.add("e"+((ExpConstant)a).num); RESULT.add("seq");
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope",53, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Typescope ::= NUMBER INT
            {
              List<String> RESULT =null;
        Exp a = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
         RESULT=new ArrayList<String>(); RESULT.add( ""+((ExpConstant)a).num); RESULT.add("int");
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope",53, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Typescope ::= EXACTLY NUMBER INT
            {
              List<String> RESULT =null;
        Exp a = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
         RESULT=new ArrayList<String>(); RESULT.add("e"+((ExpConstant)a).num); RESULT.add("int");
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope",53, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Typescope ::= NUMBER Name
            {
              List<String> RESULT =null;
        Exp a = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        ExpName b = (ExpName)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ArrayList<String>(); RESULT.add( ""+((ExpConstant)a).num); RESULT.add(b.name);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope",53, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Typescope ::= EXACTLY NUMBER Name
            {
              List<String> RESULT =null;
        Exp a = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        ExpName b = (ExpName)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ArrayList<String>(); RESULT.add("e"+((ExpConstant)a).num); RESULT.add(b.name);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescope",53, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Typescopes ::= Typescopes COMMA Typescope
            {
              List<String> RESULT =null;
        List<String> a = (List<String>)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        List<String> b = (List<String>)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=a; a.addAll(b);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescopes",52, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Typescopes ::= Typescope
            {
              List<String> RESULT =null;
        List<String> a = (List<String>)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=a;
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Typescopes",52, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Scope ::= Expects
            {
              List<String> RESULT =null;
        String c = (String)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ArrayList<String>(); RESULT.add("");                      RESULT.add(c);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Scope",42, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Scope ::= FOR Typescopes Expects
            {
              List<String> RESULT =null;
        List<String> b = (List<String>)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        String c = (String)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ArrayList<String>(); RESULT.add("");                      RESULT.add(c); RESULT.addAll(b);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Scope",42, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Scope ::= FOR NUMBER BUT Typescopes Expects
            {
              List<String> RESULT =null;
        Exp a = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
        List<String> b = (List<String>)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        String c = (String)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ArrayList<String>(); RESULT.add(""+((ExpConstant)a).num); RESULT.add(c); RESULT.addAll(b);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Scope",42, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Scope ::= FOR NUMBER Expects
            {
              List<String> RESULT =null;
        Exp a = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        String c = (String)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=new ArrayList<String>(); RESULT.add(""+((ExpConstant)a).num); RESULT.add(c);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Scope",42, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Expects ::= EXPECT NUMBER
            {
              String RESULT =null;
        Exp a = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=""+((ExpConstant)a).num;
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Expects",12, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Expects ::=
            {
              String RESULT =null;
         RESULT="";
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Expects",12, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Paragraphs ::= Paragraphs RUN CmdLabel CmdOpt Super Scope
            {
              Object RESULT =null;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
        String x = (String)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
        List<ExpName> y = (List<ExpName>)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        Exp e = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        List<String> s = (List<String>)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;

  int bitwidth = -1 , maxseq = -1;
  int overall = s.get(0).length()>0 ? Integer.parseInt(s.get(0)) : -1;
  int expects = s.get(1).length()>0 ? Integer.parseInt(s.get(1)) : -1;
  Map<String,Integer> scope=new LinkedHashMap<String,Integer>();
  for(int i=2; i<s.size()-1; i=i+2) {
    int j;
    String a=s.get(i);
    String b=s.get(i+1);
    if (a.charAt(0)=='e') { j=Integer.parseInt(a.substring(1)); j=(0-j)-1; } else { j=Integer.parseInt(a); }
    if (scope.containsKey(b)) throw new ErrorSyntax(o,"The scope of the sig \""+b+"\" cannot be specified more than once.");
    scope.put(b,j);
  }
  if (scope.containsKey("int")) bitwidth=scope.remove("int");
  if (scope.containsKey("seq")) maxseq=scope.remove("seq");
  parser.alloymodule.addCommand(o, e, false, overall, bitwidth, maxseq, expects, scope, x, y);

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Paragraphs",38, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Paragraphs ::= Paragraphs RUN CmdLabel CmdOpt Name Scope
            {
              Object RESULT =null;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
        String x = (String)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
        List<ExpName> y = (List<ExpName>)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        ExpName n = (ExpName)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        List<String> s = (List<String>)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;

  int bitwidth = -1 , maxseq = -1;
  int overall = s.get(0).length()>0 ? Integer.parseInt(s.get(0)) : -1;
  int expects = s.get(1).length()>0 ? Integer.parseInt(s.get(1)) : -1;
  Map<String,Integer> scope=new LinkedHashMap<String,Integer>();
  for(int i=2; i<s.size()-1; i=i+2) {
    int j;
    String a=s.get(i);
    String b=s.get(i+1);
    if (a.charAt(0)=='e') { j=Integer.parseInt(a.substring(1)); j=(0-j)-1; } else { j=Integer.parseInt(a); }
    if (scope.containsKey(b)) throw new ErrorSyntax(o,"The scope of the sig \""+b+"\" cannot be specified more than once.");
    scope.put(b,j);
  }
  if (scope.containsKey("int")) bitwidth=scope.remove("int");
  if (scope.containsKey("seq")) maxseq=scope.remove("seq");
  parser.alloymodule.addCommand(o, n.name, false, overall, bitwidth, maxseq, expects, scope, x, y);

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Paragraphs",38, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Paragraphs ::= Paragraphs CHECK CmdLabel CmdOpt Name Scope
            {
              Object RESULT =null;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
        String x = (String)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
        List<ExpName> y = (List<ExpName>)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        ExpName n = (ExpName)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        List<String> s = (List<String>)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;

  int bitwidth = -1 , maxseq = -1;
  int overall = s.get(0).length()>0 ? Integer.parseInt(s.get(0)) : -1;
  int expects = s.get(1).length()>0 ? Integer.parseInt(s.get(1)) : -1;
  Map<String,Integer> scope=new LinkedHashMap<String,Integer>();
  for(int i=2; i<s.size()-1; i=i+2) {
    int j;
    String a=s.get(i);
    String b=s.get(i+1);
    if (a.charAt(0)=='e') { j=Integer.parseInt(a.substring(1)); j=(0-j)-1; } else { j=Integer.parseInt(a); }
    if (scope.containsKey(b)) throw new ErrorSyntax(o,"The scope of the sig \""+b+"\" cannot be specified more than once.");
    scope.put(b,j);
  }
  if (scope.containsKey("int")) bitwidth=scope.remove("int");
  if (scope.containsKey("seq")) maxseq=scope.remove("seq");
  parser.alloymodule.addCommand(o, n.name, true, overall, bitwidth, maxseq, expects, scope, x, y);

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Paragraphs",38, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Paragraphs ::= Paragraphs CHECK CmdLabel CmdOpt Super Scope
            {
              Object RESULT =null;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
        String x = (String)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
        List<ExpName> y = (List<ExpName>)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        Exp e = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        List<String> s = (List<String>)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;

  int bitwidth = -1 , maxseq = -1;
  int overall = s.get(0).length()>0 ? Integer.parseInt(s.get(0)) : -1;
  int expects = s.get(1).length()>0 ? Integer.parseInt(s.get(1)) : -1;
  Map<String,Integer> scope=new LinkedHashMap<String,Integer>();
  for(int i=2; i<s.size()-1; i=i+2) {
    int j;
    String a=s.get(i);
    String b=s.get(i+1);
    if (a.charAt(0)=='e') { j=Integer.parseInt(a.substring(1)); j=(0-j)-1; } else { j=Integer.parseInt(a); }
    if (scope.containsKey(b)) throw new ErrorSyntax(o,"The scope of the sig \""+b+"\" cannot be specified more than once.");
    scope.put(b,j);
  }
  if (scope.containsKey("int")) bitwidth=scope.remove("int");
  if (scope.containsKey("seq")) maxseq=scope.remove("seq");
  parser.alloymodule.addCommand(o, e, true, overall, bitwidth, maxseq, expects, scope, x, y);

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Paragraphs",38, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CmdOpt ::= LBRACKET SigRefp RBRACKET
            {
              List<ExpName> RESULT =null;
        List<ExpName> o = (List<ExpName>)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
         RESULT=o;
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CmdOpt",5, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CmdOpt ::=
            {
              List<ExpName> RESULT =null;
         RESULT=new ArrayList<ExpName>();
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CmdOpt",5, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CmdLabel ::= DOT ID
            {
              String RESULT =null;
        ExpName i = (ExpName)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         RESULT=i.name;
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CmdLabel",4, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CmdLabel ::=
            {
              String RESULT =null;
         RESULT="";
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("CmdLabel",4, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Paragraphs ::=
            {
              Object RESULT =null;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Paragraphs",38, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Paragraphs ::= Paragraphs PRED Predicate
            {
              Object RESULT =null;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Paragraphs",38, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Paragraphs ::= Paragraphs FUN Function
            {
              Object RESULT =null;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Paragraphs",38, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Paragraphs ::= Paragraphs Sig
            {
              Object RESULT =null;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Paragraphs",38, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Paragraphs ::= Paragraphs ASSERT Name Super
            {
              Object RESULT =null;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        ExpName n = (ExpName)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Exp e = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         parser.alloymodule.addAssertion (o , n.name , e);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Paragraphs",38, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Paragraphs ::= Paragraphs ASSERT Super
            {
              Object RESULT =null;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Exp e = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         parser.alloymodule.addAssertion (o , ""     , e);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Paragraphs",38, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Paragraphs ::= Paragraphs FACT Name Super
            {
              Object RESULT =null;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        ExpName n = (ExpName)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Exp e = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         parser.alloymodule.addFact      (o , n.name , e);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Paragraphs",38, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Paragraphs ::= Paragraphs FACT Super
            {
              Object RESULT =null;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Exp e = (Exp)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         parser.alloymodule.addFact      (o , ""     , e);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Paragraphs",38, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Opens ::= Opens Open
            {
              Object RESULT =null;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Opens",35, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Opens ::=
            {
              Object RESULT =null;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Opens",35, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Open ::= OPEN Name LBRACKET SigRefs RBRACKET AS Name
            {
              Object RESULT =null;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-6)).value;
        ExpName a = (ExpName)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-5)).value;
        List<ExpName> b = (List<ExpName>)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
        ExpName c = (ExpName)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         parser.alloymodule.addOpen(o.merge(c.pos), a.name, b, c.name);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Open",34, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Open ::= OPEN Name LBRACKET SigRefs RBRACKET
            {
              Object RESULT =null;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
        ExpName a = (ExpName)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
        List<ExpName> b = (List<ExpName>)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        Pos c = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         parser.alloymodule.addOpen(o.merge(c),     a.name, b, "");
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Open",34, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Open ::= OPEN Name AS Name
            {
              Object RESULT =null;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
        ExpName a = (ExpName)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-2)).value;
        ExpName c = (ExpName)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         parser.alloymodule.addOpen(o.merge(c.pos), a.name, new ArrayList<ExpName>(), c.name);
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Open",34, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Open ::= OPEN Name
            {
              Object RESULT =null;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        ExpName a = (ExpName)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         parser.alloymodule.addOpen(o.merge(a.pos), a.name, new ArrayList<ExpName>(), "");
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Open",34, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Module ::=
            {
              Object RESULT =null;
         parser.alloymodule.addModelLine(new Pos(parser.alloyfile,1,1), ""     , new ArrayList<ExpName>());
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Module",28, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Module ::= MODULE Name LBRACKET Names RBRACKET
            {
              Object RESULT =null;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-4)).value;
        ExpName n = (ExpName)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-3)).value;
        List<ExpName> b = (List<ExpName>)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
         parser.alloymodule.addModelLine(o                            , n.name , b                       );
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Module",28, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Module ::= MODULE Name
            {
              Object RESULT =null;
        Pos o = (Pos)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        ExpName n = (ExpName)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.peek()).value;
         parser.alloymodule.addModelLine(o                            , n.name , new ArrayList<ExpName>());
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Module",28, RESULT);
            }
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Specification EOF
            {
              Object RESULT =null;
        Object start_val = (Object)((java_cup_11a.runtime.Symbol) CUP$CompParser$stack.elementAt(CUP$CompParser$top-1)).value;
        RESULT = start_val;
              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$CompParser$parser.done_parsing();
          return CUP$CompParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Specification ::= Module Opens Paragraphs
            {
              Object RESULT =null;

              CUP$CompParser$result = parser.getSymbolFactory().newSymbol("Specification",51, RESULT);
            }
          return CUP$CompParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

